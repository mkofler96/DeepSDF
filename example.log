INFO:optimization.opti:Starting optimization in optimization_runs/opti_double_lattice
DEBUG:optimization.opti:Computing Solution
DEBUG:optimization.opti:Generating Geometry
DEBUG:deep_sdf.mesh:Querying 18081 DeepSDF points
DEBUG:deep_sdf.mesh:sampling takes: 0.032973
DEBUG:root:torch.cuda.memory_allocated:  27.47MiB | torch.cuda.memory_reserved:  58.00MiB
DEBUG:deep_sdf.mesh:Computing DeepSDF derivatives
DEBUG:deep_sdf.mesh:sampling takes: 0.000642
DEBUG:deep_sdf.mesh:sampling takes: 0.000561
DEBUG:deep_sdf.mesh:sampling takes: 0.000316
DEBUG:deep_sdf.mesh:sampling takes: 0.000313
DEBUG:deep_sdf.mesh:sampling takes: 0.000319
DEBUG:deep_sdf.mesh:sampling takes: 0.000314
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000295
DEBUG:deep_sdf.mesh:sampling takes: 0.000314
DEBUG:deep_sdf.mesh:sampling takes: 0.000303
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000310
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000312
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000316
DEBUG:deep_sdf.mesh:sampling takes: 0.000301
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000308
DEBUG:deep_sdf.mesh:sampling takes: 0.000299
DEBUG:deep_sdf.mesh:sampling takes: 0.000301
DEBUG:deep_sdf.mesh:sampling takes: 0.000299
DEBUG:deep_sdf.mesh:sampling takes: 0.000315
DEBUG:deep_sdf.mesh:sampling takes: 0.000305
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000312
DEBUG:deep_sdf.mesh:sampling takes: 0.000301
DEBUG:deep_sdf.mesh:sampling takes: 0.000312
DEBUG:deep_sdf.mesh:sampling takes: 0.000305
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000320
DEBUG:deep_sdf.mesh:sampling takes: 0.000303
DEBUG:deep_sdf.mesh:sampling takes: 0.000300
DEBUG:deep_sdf.mesh:sampling takes: 0.000316
DEBUG:deep_sdf.mesh:sampling takes: 0.000300
DEBUG:deep_sdf.mesh:sampling takes: 0.000297
DEBUG:deep_sdf.mesh:sampling takes: 0.000313
DEBUG:deep_sdf.mesh:sampling takes: 0.000301
DEBUG:deep_sdf.mesh:sampling takes: 0.000308
DEBUG:deep_sdf.mesh:sampling takes: 0.000314
DEBUG:deep_sdf.mesh:sampling takes: 0.000307
DEBUG:deep_sdf.mesh:sampling takes: 0.000320
DEBUG:deep_sdf.mesh:sampling takes: 0.000298
DEBUG:deep_sdf.mesh:sampling takes: 0.000299
DEBUG:deep_sdf.mesh:sampling takes: 0.000310
DEBUG:deep_sdf.mesh:sampling takes: 0.000303
DEBUG:deep_sdf.mesh:sampling takes: 0.000321
DEBUG:deep_sdf.mesh:sampling takes: 0.000305
DEBUG:deep_sdf.mesh:sampling takes: 0.000299
DEBUG:deep_sdf.mesh:sampling takes: 0.000308
DEBUG:deep_sdf.mesh:sampling takes: 0.000298
DEBUG:deep_sdf.mesh:sampling takes: 0.000322
DEBUG:deep_sdf.mesh:sampling takes: 0.000295
DEBUG:deep_sdf.mesh:sampling takes: 0.000315
DEBUG:deep_sdf.mesh:sampling takes: 0.000305
DEBUG:deep_sdf.mesh:sampling takes: 0.000297
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000298
DEBUG:deep_sdf.mesh:sampling takes: 0.000301
DEBUG:deep_sdf.mesh:sampling takes: 0.000310
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000303
DEBUG:deep_sdf.mesh:sampling takes: 0.000313
DEBUG:deep_sdf.mesh:sampling takes: 0.000299
DEBUG:deep_sdf.mesh:sampling takes: 0.000300
DEBUG:deep_sdf.mesh:sampling takes: 0.000301
DEBUG:deep_sdf.mesh:sampling takes: 0.000297
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000292
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000315
DEBUG:deep_sdf.mesh:sampling takes: 0.000300
DEBUG:deep_sdf.mesh:sampling takes: 0.000305
DEBUG:deep_sdf.mesh:sampling takes: 0.000313
DEBUG:deep_sdf.mesh:sampling takes: 0.000296
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000317
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000296
DEBUG:deep_sdf.mesh:sampling takes: 0.000323
DEBUG:deep_sdf.mesh:sampling takes: 0.000303
DEBUG:deep_sdf.mesh:sampling takes: 0.000299
DEBUG:deep_sdf.mesh:sampling takes: 0.000310
DEBUG:deep_sdf.mesh:sampling takes: 0.000300
DEBUG:root:torch.cuda.memory_allocated:  47.93MiB | torch.cuda.memory_reserved:  90.00MiB
DEBUG:deep_sdf.mesh:Time for computing derivatives: 0.516094446182251
DEBUG:gustaf:<Faces> setting vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> setting faces
DEBUG:analysis.geometry:Tetrahedralizing surface mesh
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Volumes> setting vertices
DEBUG:gustaf:<Volumes> returning vertex_data
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:optimization.opti:Writing surface mesh to simulation/tmpkyd39nzh/simulation_1/surf1.inp
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning vertex_data
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Faces> setting vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> setting faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:analysis.geometry:Exporting mesh with 28723 elements, 8808 vertices, 844 boundaries with marker 1, 1796 boundaries with marker 2, and 13888 boundaries with marker 3.
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=163)
           2	LOAD_GLOBAL(arg=0, lineno=165)
           4	LOAD_GLOBAL(arg=1, lineno=165)
           6	LOAD_FAST(arg=0, lineno=165)
           8	LOAD_DEREF(arg=0, lineno=165)
          10	BINARY_SUBTRACT(arg=None, lineno=165)
          12	LOAD_CONST(arg=1, lineno=165)
          14	BINARY_POWER(arg=None, lineno=165)
          16	CALL_FUNCTION(arg=1, lineno=165)
          18	CALL_FUNCTION(arg=1, lineno=165)
          20	STORE_FAST(arg=1, lineno=165)
          22	LOAD_FAST(arg=1, lineno=166)
          24	LOAD_DEREF(arg=2, lineno=166)
          26	COMPARE_OP(arg=0, lineno=166)
          28	POP_JUMP_IF_FALSE(arg=58, lineno=166)
          30	LOAD_GLOBAL(arg=2, lineno=167)
          32	LOAD_METHOD(arg=3, lineno=167)
          34	LOAD_DEREF(arg=1, lineno=167)
          36	LOAD_CONST(arg=2, lineno=167)
          38	BINARY_SUBSCR(arg=None, lineno=167)
          40	LOAD_DEREF(arg=1, lineno=167)
          42	LOAD_CONST(arg=3, lineno=167)
          44	BINARY_SUBSCR(arg=None, lineno=167)
          46	LOAD_DEREF(arg=1, lineno=167)
          48	LOAD_CONST(arg=1, lineno=167)
          50	BINARY_SUBSCR(arg=None, lineno=167)
          52	BUILD_TUPLE(arg=3, lineno=167)
          54	CALL_METHOD(arg=1, lineno=167)
          56	RETURN_VALUE(arg=None, lineno=167)
>         58	LOAD_GLOBAL(arg=2, lineno=169)
          60	LOAD_METHOD(arg=3, lineno=169)
          62	LOAD_CONST(arg=4, lineno=169)
          64	CALL_METHOD(arg=1, lineno=169)
          66	RETURN_VALUE(arg=None, lineno=169)
          68	LOAD_CONST(arg=0, lineno=169)
          70	RETURN_VALUE(arg=None, lineno=169)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=163)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=165)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$ptx6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$ptx6.2', '$8load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$10binary_subtract.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=BINARY_POWER(arg=None, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$10binary_subtract.4', '$const12.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$14binary_power.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$16call_function.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=STORE_FAST(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$18call_function.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=166)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_DEREF(arg=2, lineno=166)
DEBUG:numba.core.byteflow:stack ['$cr22.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=COMPARE_OP(arg=0, lineno=166)
DEBUG:numba.core.byteflow:stack ['$cr22.9', '$24load_deref.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=58, lineno=166)
DEBUG:numba.core.byteflow:stack ['$26compare_op.11']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=30 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=167)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_METHOD(arg=3, lineno=167)
DEBUG:numba.core.byteflow:stack ['$30load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_DEREF(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$34load_deref.2']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$34load_deref.2', '$const36.3']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_DEREF(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_CONST(arg=3, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$40load_deref.5']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$40load_deref.5', '$const42.6']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_DEREF(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$44binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_CONST(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$44binary_subscr.7', '$46load_deref.8']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$44binary_subscr.7', '$46load_deref.8', '$const48.9']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=BUILD_TUPLE(arg=3, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$44binary_subscr.7', '$50binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=CALL_METHOD(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$52build_tuple.11']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=167)
DEBUG:numba.core.byteflow:stack ['$54call_method.12']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=58 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_GLOBAL(arg=2, lineno=169)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_METHOD(arg=3, lineno=169)
DEBUG:numba.core.byteflow:stack ['$58load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_CONST(arg=4, lineno=169)
DEBUG:numba.core.byteflow:stack ['$60load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=169)
DEBUG:numba.core.byteflow:stack ['$60load_method.1', '$const62.2']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=169)
DEBUG:numba.core.byteflow:stack ['$64call_method.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$ptx6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'lhs': '$ptx6.2', 'rhs': '$8load_deref.3', 'res': '$10binary_subtract.4'}), (12, {'res': '$const12.5'}), (14, {'lhs': '$10binary_subtract.4', 'rhs': '$const12.5', 'res': '$14binary_power.6'}), (16, {'func': '$4load_global.1', 'args': ['$14binary_power.6'], 'res': '$16call_function.7'}), (18, {'func': '$2load_global.0', 'args': ['$16call_function.7'], 'res': '$18call_function.8'}), (20, {'value': '$18call_function.8'}), (22, {'res': '$cr22.9'}), (24, {'res': '$24load_deref.10'}), (26, {'lhs': '$cr22.9', 'rhs': '$24load_deref.10', 'res': '$26compare_op.11'}), (28, {'pred': '$26compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 58: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.0'}), (32, {'item': '$30load_global.0', 'res': '$32load_method.1'}), (34, {'res': '$34load_deref.2'}), (36, {'res': '$const36.3'}), (38, {'index': '$const36.3', 'target': '$34load_deref.2', 'res': '$38binary_subscr.4'}), (40, {'res': '$40load_deref.5'}), (42, {'res': '$const42.6'}), (44, {'index': '$const42.6', 'target': '$40load_deref.5', 'res': '$44binary_subscr.7'}), (46, {'res': '$46load_deref.8'}), (48, {'res': '$const48.9'}), (50, {'index': '$const48.9', 'target': '$46load_deref.8', 'res': '$50binary_subscr.10'}), (52, {'items': ['$38binary_subscr.4', '$44binary_subscr.7', '$50binary_subscr.10'], 'res': '$52build_tuple.11'}), (54, {'func': '$32load_method.1', 'args': ['$52build_tuple.11'], 'res': '$54call_method.12'}), (56, {'retval': '$54call_method.12', 'castval': '$56return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$58load_global.0'}), (60, {'item': '$58load_global.0', 'res': '$60load_method.1'}), (62, {'res': '$const62.2'}), (64, {'func': '$60load_method.1', 'args': ['$const62.2'], 'res': '$64call_method.3'}), (66, {'retval': '$64call_method.3', 'castval': '$66return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptx = arg(0, name=ptx)                   ['ptx']
    $2load_global.0 = global(sqrt: <ufunc 'sqrt'>) ['$2load_global.0']
    $4load_global.1 = global(sum: <built-in function sum>) ['$4load_global.1']
    $8load_deref.3 = freevar(center: [2.  0.5 0.5]) ['$8load_deref.3']
    $10binary_subtract.4 = ptx - $8load_deref.3 ['$10binary_subtract.4', '$8load_deref.3', 'ptx']
    $const12.5 = const(int, 2)               ['$const12.5']
    $14binary_power.6 = $10binary_subtract.4 ** $const12.5 ['$10binary_subtract.4', '$14binary_power.6', '$const12.5']
    $16call_function.7 = call $4load_global.1($14binary_power.6, func=$4load_global.1, args=[Var($14binary_power.6, MFEMLinearElasticity.py:165)], kws=(), vararg=None, varkwarg=None, target=None) ['$14binary_power.6', '$16call_function.7', '$4load_global.1']
    cr = call $2load_global.0($16call_function.7, func=$2load_global.0, args=[Var($16call_function.7, MFEMLinearElasticity.py:165)], kws=(), vararg=None, varkwarg=None, target=None) ['$16call_function.7', '$2load_global.0', 'cr']
    $24load_deref.10 = freevar(r: 0.1)       ['$24load_deref.10']
    $26compare_op.11 = cr < $24load_deref.10 ['$24load_deref.10', '$26compare_op.11', 'cr']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.11, func=bool28, args=(Var($26compare_op.11, MFEMLinearElasticity.py:166),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.11', '$28pred', 'bool28']
    branch $28pred, 30, 58                   ['$28pred']
label 30:
    $30load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$30load_global.0']
    $32load_method.1 = getattr(value=$30load_global.0, attr=array) ['$30load_global.0', '$32load_method.1']
    $34load_deref.2 = freevar(force: [100.   0.   0.]) ['$34load_deref.2']
    $const36.3 = const(int, 0)               ['$const36.3']
    $38binary_subscr.4 = getitem(value=$34load_deref.2, index=$const36.3, fn=<built-in function getitem>) ['$34load_deref.2', '$38binary_subscr.4', '$const36.3']
    $40load_deref.5 = freevar(force: [100.   0.   0.]) ['$40load_deref.5']
    $const42.6 = const(int, 1)               ['$const42.6']
    $44binary_subscr.7 = getitem(value=$40load_deref.5, index=$const42.6, fn=<built-in function getitem>) ['$40load_deref.5', '$44binary_subscr.7', '$const42.6']
    $46load_deref.8 = freevar(force: [100.   0.   0.]) ['$46load_deref.8']
    $const48.9 = const(int, 2)               ['$const48.9']
    $50binary_subscr.10 = getitem(value=$46load_deref.8, index=$const48.9, fn=<built-in function getitem>) ['$46load_deref.8', '$50binary_subscr.10', '$const48.9']
    $52build_tuple.11 = build_tuple(items=[Var($38binary_subscr.4, MFEMLinearElasticity.py:167), Var($44binary_subscr.7, MFEMLinearElasticity.py:167), Var($50binary_subscr.10, MFEMLinearElasticity.py:167)]) ['$38binary_subscr.4', '$44binary_subscr.7', '$50binary_subscr.10', '$52build_tuple.11']
    $54call_method.12 = call $32load_method.1($52build_tuple.11, func=$32load_method.1, args=[Var($52build_tuple.11, MFEMLinearElasticity.py:167)], kws=(), vararg=None, varkwarg=None, target=None) ['$32load_method.1', '$52build_tuple.11', '$54call_method.12']
    $56return_value.13 = cast(value=$54call_method.12) ['$54call_method.12', '$56return_value.13']
    return $56return_value.13                ['$56return_value.13']
label 58:
    $58load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$58load_global.0']
    $60load_method.1 = getattr(value=$58load_global.0, attr=array) ['$58load_global.0', '$60load_method.1']
    $const_0.0 = const(float, 0.0)           ['$const_0.0']
    $const_0.0.1 = const(float, 0.0)         ['$const_0.0.1']
    $const_0.0.2 = const(float, 0.0)         ['$const_0.0.2']
    $const62.2 = build_tuple(items=[Var($const_0.0, MFEMLinearElasticity.py:169), Var($const_0.0.1, MFEMLinearElasticity.py:169), Var($const_0.0.2, MFEMLinearElasticity.py:169)]) ['$const62.2', '$const_0.0', '$const_0.0.1', '$const_0.0.2']
    $64call_method.3 = call $60load_method.1($const62.2, func=$60load_method.1, args=[Var($const62.2, MFEMLinearElasticity.py:169)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.1', '$64call_method.3', '$const62.2']
    $66return_value.4 = cast(value=$64call_method.3) ['$64call_method.3', '$66return_value.4']
    return $66return_value.4                 ['$66return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f076206c4c0>
DEBUG:numba.core.ssa:on stmt: ptx = arg(0, name=ptx)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(sqrt: <ufunc 'sqrt'>)
DEBUG:numba.core.ssa:on stmt: $4load_global.1 = global(sum: <built-in function sum>)
DEBUG:numba.core.ssa:on stmt: $8load_deref.3 = freevar(center: [2.  0.5 0.5])
DEBUG:numba.core.ssa:on stmt: $10binary_subtract.4 = ptx - $8load_deref.3
DEBUG:numba.core.ssa:on stmt: $const12.5 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $14binary_power.6 = $10binary_subtract.4 ** $const12.5
DEBUG:numba.core.ssa:on stmt: $16call_function.7 = call $4load_global.1($14binary_power.6, func=$4load_global.1, args=[Var($14binary_power.6, MFEMLinearElasticity.py:165)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: cr = call $2load_global.0($16call_function.7, func=$2load_global.0, args=[Var($16call_function.7, MFEMLinearElasticity.py:165)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $24load_deref.10 = freevar(r: 0.1)
DEBUG:numba.core.ssa:on stmt: $26compare_op.11 = cr < $24load_deref.10
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28($26compare_op.11, func=bool28, args=(Var($26compare_op.11, MFEMLinearElasticity.py:166),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 58
DEBUG:numba.core.ssa:==== SSA block analysis pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f076206c4c0>
DEBUG:numba.core.ssa:on stmt: $30load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $32load_method.1 = getattr(value=$30load_global.0, attr=array)
DEBUG:numba.core.ssa:on stmt: $34load_deref.2 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const36.3 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $38binary_subscr.4 = static_getitem(value=$34load_deref.2, index=0, index_var=$const36.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $40load_deref.5 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const42.6 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $44binary_subscr.7 = static_getitem(value=$40load_deref.5, index=1, index_var=$const42.6, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $46load_deref.8 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const48.9 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $50binary_subscr.10 = static_getitem(value=$46load_deref.8, index=2, index_var=$const48.9, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $52build_tuple.11 = build_tuple(items=[Var($38binary_subscr.4, MFEMLinearElasticity.py:167), Var($44binary_subscr.7, MFEMLinearElasticity.py:167), Var($50binary_subscr.10, MFEMLinearElasticity.py:167)])
DEBUG:numba.core.ssa:on stmt: $54call_method.12 = call $32load_method.1($52build_tuple.11, func=$32load_method.1, args=[Var($52build_tuple.11, MFEMLinearElasticity.py:167)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $56return_value.13 = cast(value=$54call_method.12)
DEBUG:numba.core.ssa:on stmt: return $56return_value.13
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f076206c4c0>
DEBUG:numba.core.ssa:on stmt: $58load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $60load_method.1 = getattr(value=$58load_global.0, attr=array)
DEBUG:numba.core.ssa:on stmt: $const_0.0 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const_0.0.1 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const_0.0.2 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const62.2 = build_tuple(items=[Var($const_0.0, MFEMLinearElasticity.py:169), Var($const_0.0.1, MFEMLinearElasticity.py:169), Var($const_0.0.2, MFEMLinearElasticity.py:169)])
DEBUG:numba.core.ssa:on stmt: $64call_method.3 = call $60load_method.1($const62.2, func=$60load_method.1, args=[Var($const62.2, MFEMLinearElasticity.py:169)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $66return_value.4 = cast(value=$64call_method.3)
DEBUG:numba.core.ssa:on stmt: return $66return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [(<numba.core.ir.Assign object at 0x7f0762063430>,
                                       0)],
             '$14binary_power.6': [(<numba.core.ir.Assign object at 0x7f0762063c40>,
                                    0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x7f0762063880>,
                                     0)],
             '$24load_deref.10': [(<numba.core.ir.Assign object at 0x7f0762071850>,
                                   0)],
             '$26compare_op.11': [(<numba.core.ir.Assign object at 0x7f0762071c10>,
                                   0)],
             '$28pred': [(<numba.core.ir.Assign object at 0x7f07620713a0>, 0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7f0762063fd0>,
                                  0)],
             '$30load_global.0': [(<numba.core.ir.Assign object at 0x7f0762071790>,
                                   30)],
             '$32load_method.1': [(<numba.core.ir.Assign object at 0x7f0762071b80>,
                                   30)],
             '$34load_deref.2': [(<numba.core.ir.Assign object at 0x7f0762071040>,
                                  30)],
             '$38binary_subscr.4': [(<numba.core.ir.Assign object at 0x7f076206c430>,
                                     30)],
             '$40load_deref.5': [(<numba.core.ir.Assign object at 0x7f0762071220>,
                                  30)],
             '$44binary_subscr.7': [(<numba.core.ir.Assign object at 0x7f076206c2e0>,
                                     30)],
             '$46load_deref.8': [(<numba.core.ir.Assign object at 0x7f076206ed00>,
                                  30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x7f0762063ca0>,
                                  0)],
             '$50binary_subscr.10': [(<numba.core.ir.Assign object at 0x7f076206cb50>,
                                      30)],
             '$52build_tuple.11': [(<numba.core.ir.Assign object at 0x7f076206ecd0>,
                                    30)],
             '$54call_method.12': [(<numba.core.ir.Assign object at 0x7f076206e130>,
                                    30)],
             '$56return_value.13': [(<numba.core.ir.Assign object at 0x7f076206ed60>,
                                     30)],
             '$58load_global.0': [(<numba.core.ir.Assign object at 0x7f076206e190>,
                                   58)],
             '$60load_method.1': [(<numba.core.ir.Assign object at 0x7f076206ce20>,
                                   58)],
             '$64call_method.3': [(<numba.core.ir.Assign object at 0x7f076206c7c0>,
                                   58)],
             '$66return_value.4': [(<numba.core.ir.Assign object at 0x7f076206c8e0>,
                                    58)],
             '$8load_deref.3': [(<numba.core.ir.Assign object at 0x7f07620631f0>,
                                 0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7f0762063250>,
                             0)],
             '$const36.3': [(<numba.core.ir.Assign object at 0x7f07620714c0>,
                             30)],
             '$const42.6': [(<numba.core.ir.Assign object at 0x7f076206eb50>,
                             30)],
             '$const48.9': [(<numba.core.ir.Assign object at 0x7f076206e640>,
                             30)],
             '$const62.2': [(<numba.core.ir.Assign object at 0x7f076206ca00>,
                             58)],
             '$const_0.0': [(<numba.core.ir.Assign object at 0x7f076206cee0>,
                             58)],
             '$const_0.0.1': [(<numba.core.ir.Assign object at 0x7f076206cf70>,
                               58)],
             '$const_0.0.2': [(<numba.core.ir.Assign object at 0x7f076206c070>,
                               58)],
             'bool28': [(<numba.core.ir.Assign object at 0x7f0762071c40>, 0)],
             'cr': [(<numba.core.ir.Assign object at 0x7f07620632b0>, 0)],
             'ptx': [(<numba.core.ir.Assign object at 0x7f07620893d0>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f07620891c0>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=719)
           2	LOAD_FAST(arg=1, lineno=720)
           4	STORE_FAST(arg=2, lineno=720)
           6	LOAD_DEREF(arg=0, lineno=721)
           8	LOAD_FAST(arg=0, lineno=721)
          10	CALL_FUNCTION(arg=1, lineno=721)
          12	GET_ITER(arg=None, lineno=721)
>         14	FOR_ITER(arg=12, lineno=721)
          16	STORE_FAST(arg=3, lineno=721)
          18	LOAD_FAST(arg=2, lineno=723)
          20	LOAD_FAST(arg=3, lineno=723)
          22	BINARY_ADD(arg=None, lineno=723)
          24	STORE_FAST(arg=2, lineno=723)
          26	JUMP_ABSOLUTE(arg=14, lineno=723)
>         28	LOAD_FAST(arg=2, lineno=724)
          30	RETURN_VALUE(arg=None, lineno=724)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=719)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=720)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=STORE_FAST(arg=2, lineno=720)
DEBUG:numba.core.byteflow:stack ['$start2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_DEREF(arg=0, lineno=721)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=721)
DEBUG:numba.core.byteflow:stack ['$6load_deref.1']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=721)
DEBUG:numba.core.byteflow:stack ['$6load_deref.1', '$iterable8.2']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=GET_ITER(arg=None, lineno=721)
DEBUG:numba.core.byteflow:stack ['$10call_function.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$12get_iter.4',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi14.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=14 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=14, inst=FOR_ITER(arg=12, lineno=721)
DEBUG:numba.core.byteflow:stack ['$phi14.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=28 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=724)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=724)
DEBUG:numba.core.byteflow:stack ['$acc28.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=16 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=3, lineno=721)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=723)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=723)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$acc18.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_ADD(arg=None, lineno=723)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$acc18.2', '$x20.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=2, lineno=723)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_add.4']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=JUMP_ABSOLUTE(arg=14, lineno=723)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=28 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi14.0': {('$12get_iter.4', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.4'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$start2.0'}), (4, {'value': '$start2.0'}), (6, {'res': '$6load_deref.1'}), (8, {'res': '$iterable8.2'}), (10, {'func': '$6load_deref.1', 'args': ['$iterable8.2'], 'res': '$10call_function.3'}), (12, {'value': '$10call_function.3', 'res': '$12get_iter.4'})), outgoing_phis={'$phi14.0': '$12get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.4',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 16: ('$phi14.0', '$14for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$acc18.2'}), (20, {'res': '$x20.3'}), (22, {'lhs': '$acc18.2', 'rhs': '$x20.3', 'res': '$22binary_add.4'}), (24, {'value': '$22binary_add.4'}), (26, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi16.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$acc28.0'}), (30, {'retval': '$acc28.0', 'castval': '$30return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    iterable = arg(0, name=iterable)         ['iterable']
    start = arg(1, name=start)               ['start']
    acc = start                              ['acc', 'start']
    $6load_deref.1 = freevar(iterator: <built-in function iter>) ['$6load_deref.1']
    $10call_function.3 = call $6load_deref.1(iterable, func=$6load_deref.1, args=[Var(iterable, builtins.py:719)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.3', '$6load_deref.1', 'iterable']
    $12get_iter.4 = getiter(value=$10call_function.3) ['$10call_function.3', '$12get_iter.4']
    $phi14.0 = $12get_iter.4                 ['$12get_iter.4', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 28             ['$14for_iter.3']
label 16:
    x = $phi16.1                             ['$phi16.1', 'x']
    $22binary_add.4 = acc + x                ['$22binary_add.4', 'acc', 'x']
    acc = $22binary_add.4                    ['$22binary_add.4', 'acc']
    jump 14                                  []
label 28:
    $30return_value.1 = cast(value=acc)      ['$30return_value.1', 'acc']
    return $30return_value.1                 ['$30return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f07620223a0>
DEBUG:numba.core.ssa:on stmt: iterable = arg(0, name=iterable)
DEBUG:numba.core.ssa:on stmt: start = arg(1, name=start)
DEBUG:numba.core.ssa:on stmt: acc = start
DEBUG:numba.core.ssa:on stmt: $6load_deref.1 = freevar(iterator: <built-in function iter>)
DEBUG:numba.core.ssa:on stmt: $10call_function.3 = call $6load_deref.1(iterable, func=$6load_deref.1, args=[Var(iterable, builtins.py:719)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12get_iter.4 = getiter(value=$10call_function.3)
DEBUG:numba.core.ssa:on stmt: $phi14.0 = $12get_iter.4
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f07620223a0>
DEBUG:numba.core.ssa:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
DEBUG:numba.core.ssa:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi16.1 = $14for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $14for_iter.3, 16, 28
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f07620223a0>
DEBUG:numba.core.ssa:on stmt: x = $phi16.1
DEBUG:numba.core.ssa:on stmt: $22binary_add.4 = acc + x
DEBUG:numba.core.ssa:on stmt: acc = $22binary_add.4
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f07620223a0>
DEBUG:numba.core.ssa:on stmt: $30return_value.1 = cast(value=acc)
DEBUG:numba.core.ssa:on stmt: return $30return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_function.3': [(<numba.core.ir.Assign object at 0x7f075e357a60>,
                                     0)],
             '$12get_iter.4': [(<numba.core.ir.Assign object at 0x7f075e357b80>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x7f075e357e50>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x7f075e357f70>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x7f07304800d0>,
                                14)],
             '$22binary_add.4': [(<numba.core.ir.Assign object at 0x7f0730480790>,
                                  16)],
             '$30return_value.1': [(<numba.core.ir.Assign object at 0x7f0730480b80>,
                                    28)],
             '$6load_deref.1': [(<numba.core.ir.Assign object at 0x7f075e357760>,
                                 0)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x7f075e357460>, 0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x7f075e357d90>,
                           14)],
             'acc': [(<numba.core.ir.Assign object at 0x7f075e3575e0>, 0),
                     (<numba.core.ir.Assign object at 0x7f0730480850>, 16)],
             'iterable': [(<numba.core.ir.Assign object at 0x7f075e357280>, 0)],
             'start': [(<numba.core.ir.Assign object at 0x7f075e3573a0>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x7f07304803a0>, 16)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f076223cee0>
DEBUG:numba.core.ssa:Fix SSA violator on var acc
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e357160>
DEBUG:numba.core.ssa:on stmt: iterable = arg(0, name=iterable)
DEBUG:numba.core.ssa:on stmt: start = arg(1, name=start)
DEBUG:numba.core.ssa:on stmt: acc = start
DEBUG:numba.core.ssa:first assign: acc
DEBUG:numba.core.ssa:replaced with: acc = start
DEBUG:numba.core.ssa:on stmt: $6load_deref.1 = freevar(iterator: <built-in function iter>)
DEBUG:numba.core.ssa:on stmt: $10call_function.3 = call $6load_deref.1(iterable, func=$6load_deref.1, args=[Var(iterable, builtins.py:719)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12get_iter.4 = getiter(value=$10call_function.3)
DEBUG:numba.core.ssa:on stmt: $phi14.0 = $12get_iter.4
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e357160>
DEBUG:numba.core.ssa:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
DEBUG:numba.core.ssa:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi16.1 = $14for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $14for_iter.3, 16, 28
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e357160>
DEBUG:numba.core.ssa:on stmt: x = $phi16.1
DEBUG:numba.core.ssa:on stmt: $22binary_add.4 = acc + x
DEBUG:numba.core.ssa:on stmt: acc = $22binary_add.4
DEBUG:numba.core.ssa:replaced with: acc.1 = $22binary_add.4
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e357160>
DEBUG:numba.core.ssa:on stmt: $30return_value.1 = cast(value=acc)
DEBUG:numba.core.ssa:on stmt: return $30return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f075e357100>],
             16: [<numba.core.ir.Assign object at 0x7f07620225e0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f075e357160>
DEBUG:numba.core.ssa:on stmt: iterable = arg(0, name=iterable)
DEBUG:numba.core.ssa:on stmt: start = arg(1, name=start)
DEBUG:numba.core.ssa:on stmt: acc = start
DEBUG:numba.core.ssa:on stmt: $6load_deref.1 = freevar(iterator: <built-in function iter>)
DEBUG:numba.core.ssa:on stmt: $10call_function.3 = call $6load_deref.1(iterable, func=$6load_deref.1, args=[Var(iterable, builtins.py:719)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12get_iter.4 = getiter(value=$10call_function.3)
DEBUG:numba.core.ssa:on stmt: $phi14.0 = $12get_iter.4
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f075e357160>
DEBUG:numba.core.ssa:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
DEBUG:numba.core.ssa:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi16.1 = $14for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $14for_iter.3, 16, 28
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f075e357160>
DEBUG:numba.core.ssa:on stmt: x = $phi16.1
DEBUG:numba.core.ssa:on stmt: $22binary_add.4 = acc + x
DEBUG:numba.core.ssa:find_def var='acc' stmt=$22binary_add.4 = acc + x
DEBUG:numba.core.ssa:find_def_from_top label 16
DEBUG:numba.core.ssa:idom 14 from label 16
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:insert phi node acc.2 = phi(incoming_values=[], incoming_blocks=[]) at 14
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def acc = start
DEBUG:numba.core.ssa:find_def_from_bottom label 16
DEBUG:numba.core.ssa:incoming_def acc.1 = $22binary_add.4
DEBUG:numba.core.ssa:replaced with: $22binary_add.4 = acc.2 + x
DEBUG:numba.core.ssa:on stmt: acc.1 = $22binary_add.4
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f075e357160>
DEBUG:numba.core.ssa:on stmt: $30return_value.1 = cast(value=acc)
DEBUG:numba.core.ssa:find_def var='acc' stmt=$30return_value.1 = cast(value=acc)
DEBUG:numba.core.ssa:find_def_from_top label 28
DEBUG:numba.core.ssa:idom 14 from label 28
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:replaced with: $30return_value.1 = cast(value=acc.2)
DEBUG:numba.core.ssa:on stmt: return $30return_value.1
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=5442)
           2	LOAD_GLOBAL(arg=0, lineno=5443)
           4	LOAD_FAST(arg=0, lineno=5443)
           6	LOAD_FAST(arg=1, lineno=5443)
           8	CALL_FUNCTION(arg=2, lineno=5443)
          10	RETURN_VALUE(arg=None, lineno=5443)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=5442)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=5443)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=5443)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=5443)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$object4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=5443)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$object4.1', '$dtype6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=5443)
DEBUG:numba.core.byteflow:stack ['$8call_function.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$object4.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$object4.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    object = arg(0, name=object)             ['object']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(np_array: <intrinsic np_array>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(object, dtype, func=$2load_global.0, args=[Var(object, arrayobj.py:5442), Var(dtype, arrayobj.py:5442)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'object']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f07304924f0>
DEBUG:numba.core.ssa:on stmt: object = arg(0, name=object)
DEBUG:numba.core.ssa:on stmt: dtype = arg(1, name=dtype)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np_array: <intrinsic np_array>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $2load_global.0(object, dtype, func=$2load_global.0, args=[Var(object, arrayobj.py:5442), Var(dtype, arrayobj.py:5442)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG:numba.core.ssa:on stmt: return $10return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [(<numba.core.ir.Assign object at 0x7f0761fa0490>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7f0761f8ef10>,
                                  0)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x7f0761fa0370>,
                                    0)],
             'dtype': [(<numba.core.ir.Assign object at 0x7f0761f8e6d0>, 0)],
             'object': [(<numba.core.ir.Assign object at 0x7f0761f8e370>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f07304924f0>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=4264)
           2	LOAD_FAST(arg=0, lineno=4267)
           4	LOAD_METHOD(arg=0, lineno=4267)
           6	LOAD_FAST(arg=1, lineno=4267)
           8	LOAD_FAST(arg=2, lineno=4267)
          10	CALL_METHOD(arg=2, lineno=4267)
          12	RETURN_VALUE(arg=None, lineno=4267)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=4264)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4267)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=4267)
DEBUG:numba.core.byteflow:stack ['$arrtype2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4267)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=4267)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$size6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=4267)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$size6.2', '$align8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4267)
DEBUG:numba.core.byteflow:stack ['$10call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:4264), Var(align, arrayobj.py:4264)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f073046f2e0>
DEBUG:numba.core.ssa:on stmt: arrtype = arg(0, name=arrtype)
DEBUG:numba.core.ssa:on stmt: size = arg(1, name=size)
DEBUG:numba.core.ssa:on stmt: align = arg(2, name=align)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
DEBUG:numba.core.ssa:on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:4264), Var(align, arrayobj.py:4264)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG:numba.core.ssa:on stmt: return $12return_value.5
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_method.4': [(<numba.core.ir.Assign object at 0x7f073046fb50>,
                                   0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x7f073046fc10>,
                                    0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x7f073046f5e0>,
                                  0)],
             'align': [(<numba.core.ir.Assign object at 0x7f073049ca00>, 0)],
             'arrtype': [(<numba.core.ir.Assign object at 0x7f073049cb20>, 0)],
             'size': [(<numba.core.ir.Assign object at 0x7f073049c3d0>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f073046f2e0>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=4259)
           2	LOAD_GLOBAL(arg=0, lineno=4260)
           4	LOAD_FAST(arg=1, lineno=4260)
           6	LOAD_FAST(arg=2, lineno=4260)
           8	CALL_FUNCTION(arg=2, lineno=4260)
          10	RETURN_VALUE(arg=None, lineno=4260)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=4259)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4260)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=4260)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=4260)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$allocsize4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=4260)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=4260)
DEBUG:numba.core.byteflow:stack ['$8call_function.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:4259), Var(align, arrayobj.py:4259)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0730492d90>
DEBUG:numba.core.ssa:on stmt: cls = arg(0, name=cls)
DEBUG:numba.core.ssa:on stmt: allocsize = arg(1, name=allocsize)
DEBUG:numba.core.ssa:on stmt: align = arg(2, name=align)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:4259), Var(align, arrayobj.py:4259)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG:numba.core.ssa:on stmt: return $10return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [(<numba.core.ir.Assign object at 0x7f0761f3f5b0>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7f0761f3f070>,
                                  0)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x7f0761f3f490>,
                                    0)],
             'align': [(<numba.core.ir.Assign object at 0x7f0761fbceb0>, 0)],
             'allocsize': [(<numba.core.ir.Assign object at 0x7f0761fbc880>,
                            0)],
             'cls': [(<numba.core.ir.Assign object at 0x7f07304991c0>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f0730492d90>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=1, lineno=1)
           4	LOAD_FAST(arg=0, lineno=1)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	BINARY_POWER(arg=None, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1)
DEBUG:numba.core.byteflow:stack ['$ptx_12.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$ptx_12.0', '$_8load_deref_3_14.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_subtract.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=BINARY_POWER(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_subtract.2', '$const8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$10binary_power.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ptx_12.0'}), (4, {'res': '$_8load_deref_3_14.1'}), (6, {'lhs': '$ptx_12.0', 'rhs': '$_8load_deref_3_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10binary_power.4'}), (12, {'retval': '$10binary_power.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _8load_deref_3_1 = arg(0, name=_8load_deref_3_1) ['_8load_deref_3_1']
    ptx_1 = arg(1, name=ptx_1)               ['ptx_1']
    $6binary_subtract.2 = ptx_1 - _8load_deref_3_1 ['$6binary_subtract.2', '_8load_deref_3_1', 'ptx_1']
    $const8.3 = const(int, 2)                ['$const8.3']
    $10binary_power.4 = $6binary_subtract.2 ** $const8.3 ['$10binary_power.4', '$6binary_subtract.2', '$const8.3']
    $12return_value.5 = cast(value=$10binary_power.4) ['$10binary_power.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8ca60>
DEBUG:numba.core.ssa:on stmt: _8load_deref_3_1 = arg(0, name=_8load_deref_3_1)
DEBUG:numba.core.ssa:on stmt: ptx_1 = arg(1, name=ptx_1)
DEBUG:numba.core.ssa:on stmt: $6binary_subtract.2 = ptx_1 - _8load_deref_3_1
DEBUG:numba.core.ssa:on stmt: $const8.3 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $10binary_power.4 = $6binary_subtract.2 ** $const8.3
DEBUG:numba.core.ssa:on stmt: $12return_value.5 = cast(value=$10binary_power.4)
DEBUG:numba.core.ssa:on stmt: return $12return_value.5
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10binary_power.4': [(<numba.core.ir.Assign object at 0x7f0761e93040>,
                                    0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x7f0761e93190>,
                                    0)],
             '$6binary_subtract.2': [(<numba.core.ir.Assign object at 0x7f0761e8fd00>,
                                      0)],
             '$const8.3': [(<numba.core.ir.Assign object at 0x7f0761e8fe50>,
                            0)],
             '_8load_deref_3_1': [(<numba.core.ir.Assign object at 0x7f0761e8f190>,
                                   0)],
             'ptx_1': [(<numba.core.ir.Assign object at 0x7f0761e8f070>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f0761e8ca60>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	LOAD_DEREF(arg=1, lineno=216)
           4	LOAD_CONST(arg=1, lineno=216)
           6	CALL_FUNCTION(arg=1, lineno=216)
           8	STORE_FAST(arg=2, lineno=216)
          10	LOAD_DEREF(arg=1, lineno=217)
          12	LOAD_FAST(arg=0, lineno=217)
          14	CALL_FUNCTION(arg=1, lineno=217)
          16	STORE_FAST(arg=0, lineno=217)
          18	LOAD_FAST(arg=1, lineno=218)
          20	LOAD_CONST(arg=2, lineno=218)
          22	COMPARE_OP(arg=0, lineno=218)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=218)
          26	LOAD_CONST(arg=3, lineno=219)
          28	STORE_FAST(arg=3, lineno=219)
          30	LOAD_FAST(arg=1, lineno=220)
          32	UNARY_NEGATIVE(arg=None, lineno=220)
          34	STORE_FAST(arg=4, lineno=220)
          36	LOAD_FAST(arg=4, lineno=221)
          38	LOAD_CONST(arg=2, lineno=221)
          40	COMPARE_OP(arg=0, lineno=221)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=221)
          44	LOAD_GLOBAL(arg=0, lineno=222)
          46	RAISE_VARARGS(arg=1, lineno=222)
>         48	LOAD_DEREF(arg=0, lineno=223)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=223)
          52	LOAD_FAST(arg=0, lineno=224)
          54	LOAD_CONST(arg=2, lineno=224)
          56	COMPARE_OP(arg=2, lineno=224)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=224)
          60	LOAD_DEREF(arg=2, lineno=225)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=225)
          64	LOAD_DEREF(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=1, lineno=228)
          70	LOAD_CONST(arg=4, lineno=228)
          72	CALL_FUNCTION(arg=1, lineno=228)
          74	RAISE_VARARGS(arg=1, lineno=228)
>         76	LOAD_FAST(arg=0, lineno=229)
          78	LOAD_CONST(arg=1, lineno=229)
          80	COMPARE_OP(arg=3, lineno=229)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          84	LOAD_FAST(arg=0, lineno=229)
          86	LOAD_CONST(arg=5, lineno=229)
          88	COMPARE_OP(arg=3, lineno=229)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          92	LOAD_CONST(arg=2, lineno=230)
          94	RETURN_VALUE(arg=None, lineno=230)
          96	JUMP_FORWARD(arg=8, lineno=230)
>         98	LOAD_CONST(arg=6, lineno=232)
         100	STORE_FAST(arg=3, lineno=232)
         102	LOAD_FAST(arg=1, lineno=233)
         104	STORE_FAST(arg=4, lineno=233)
>        106	LOAD_FAST(arg=4, lineno=234)
         108	LOAD_CONST(arg=7, lineno=234)
         110	COMPARE_OP(arg=4, lineno=234)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=234)
         114	LOAD_GLOBAL(arg=2, lineno=236)
         116	LOAD_METHOD(arg=3, lineno=236)
         118	LOAD_FAST(arg=0, lineno=236)
         120	LOAD_GLOBAL(arg=4, lineno=236)
         122	LOAD_FAST(arg=1, lineno=236)
         124	CALL_FUNCTION(arg=1, lineno=236)
         126	CALL_METHOD(arg=2, lineno=236)
         128	RETURN_VALUE(arg=None, lineno=236)
>        130	LOAD_FAST(arg=4, lineno=237)
         132	LOAD_CONST(arg=2, lineno=237)
         134	COMPARE_OP(arg=3, lineno=237)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=237)
         138	LOAD_FAST(arg=4, lineno=238)
         140	LOAD_CONST(arg=1, lineno=238)
         142	BINARY_AND(arg=None, lineno=238)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=238)
         146	LOAD_FAST(arg=2, lineno=239)
         148	LOAD_FAST(arg=0, lineno=239)
         150	INPLACE_MULTIPLY(arg=None, lineno=239)
         152	STORE_FAST(arg=2, lineno=239)
>        154	LOAD_FAST(arg=4, lineno=240)
         156	LOAD_CONST(arg=1, lineno=240)
         158	INPLACE_RSHIFT(arg=None, lineno=240)
         160	STORE_FAST(arg=4, lineno=240)
         162	LOAD_FAST(arg=0, lineno=241)
         164	LOAD_FAST(arg=0, lineno=241)
         166	INPLACE_MULTIPLY(arg=None, lineno=241)
         168	STORE_FAST(arg=0, lineno=241)
         170	JUMP_ABSOLUTE(arg=130, lineno=241)
>        172	LOAD_FAST(arg=3, lineno=243)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=243)
         176	LOAD_CONST(arg=8, lineno=243)
         178	LOAD_FAST(arg=2, lineno=243)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=243)
         182	RETURN_VALUE(arg=None, lineno=243)
>        184	LOAD_FAST(arg=2, lineno=243)
         186	RETURN_VALUE(arg=None, lineno=243)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=214)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
DEBUG:numba.core.byteflow:stack ['$6call_function.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
DEBUG:numba.core.byteflow:stack ['$10load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG:numba.core.byteflow:stack ['$10load_deref.3', '$a12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
DEBUG:numba.core.byteflow:stack ['$14call_function.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
DEBUG:numba.core.byteflow:stack ['$b18.6']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
DEBUG:numba.core.byteflow:stack ['$b18.6', '$const20.7']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=218)
DEBUG:numba.core.byteflow:stack ['$22compare_op.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=26 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
DEBUG:numba.core.byteflow:stack ['$const26.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
DEBUG:numba.core.byteflow:stack ['$b30.1']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
DEBUG:numba.core.byteflow:stack ['$32unary_negative.2']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
DEBUG:numba.core.byteflow:stack ['$exp36.3']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
DEBUG:numba.core.byteflow:stack ['$exp36.3', '$const38.4']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=221)
DEBUG:numba.core.byteflow:stack ['$40compare_op.5']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=98 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
DEBUG:numba.core.byteflow:stack ['$const98.0']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
DEBUG:numba.core.byteflow:stack ['$b102.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=44 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
DEBUG:numba.core.byteflow:stack ['$44load_global.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=48 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=223)
DEBUG:numba.core.byteflow:stack ['$48load_deref.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=106 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
DEBUG:numba.core.byteflow:stack ['$exp106.0']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
DEBUG:numba.core.byteflow:stack ['$exp106.0', '$const108.1']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=234)
DEBUG:numba.core.byteflow:stack ['$110compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=52 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
DEBUG:numba.core.byteflow:stack ['$a52.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
DEBUG:numba.core.byteflow:stack ['$a52.0', '$const54.1']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=224)
DEBUG:numba.core.byteflow:stack ['$56compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=114 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
DEBUG:numba.core.byteflow:stack ['$114load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
DEBUG:numba.core.byteflow:stack ['$116load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
DEBUG:numba.core.byteflow:stack ['$126call_method.6']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=130 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=237)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=237)
DEBUG:numba.core.byteflow:stack ['$exp130.0']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=237)
DEBUG:numba.core.byteflow:stack ['$exp130.0', '$const132.1']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=237)
DEBUG:numba.core.byteflow:stack ['$134compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=60 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=225)
DEBUG:numba.core.byteflow:stack ['$60load_deref.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=76 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
DEBUG:numba.core.byteflow:stack ['$a76.0']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
DEBUG:numba.core.byteflow:stack ['$a76.0', '$const78.1']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
DEBUG:numba.core.byteflow:stack ['$80compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=138 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=238)
DEBUG:numba.core.byteflow:stack ['$exp138.0']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=BINARY_AND(arg=None, lineno=238)
DEBUG:numba.core.byteflow:stack ['$exp138.0', '$const140.1']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=238)
DEBUG:numba.core.byteflow:stack ['$142binary_and.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=172 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=243)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=243)
DEBUG:numba.core.byteflow:stack ['$invert172.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=64 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
DEBUG:numba.core.byteflow:stack ['$64load_deref.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=68 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
DEBUG:numba.core.byteflow:stack ['$68load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
DEBUG:numba.core.byteflow:stack ['$68load_global.0', '$const70.1']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
DEBUG:numba.core.byteflow:stack ['$72call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=84 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
DEBUG:numba.core.byteflow:stack ['$a84.0']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
DEBUG:numba.core.byteflow:stack ['$a84.0', '$const86.1']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
DEBUG:numba.core.byteflow:stack ['$88compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=146 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=239)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=239)
DEBUG:numba.core.byteflow:stack ['$r146.0']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
DEBUG:numba.core.byteflow:stack ['$r146.0', '$a148.1']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=STORE_FAST(arg=2, lineno=239)
DEBUG:numba.core.byteflow:stack ['$150inplace_multiply.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=154 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=240)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=240)
DEBUG:numba.core.byteflow:stack ['$exp154.0']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=240)
DEBUG:numba.core.byteflow:stack ['$exp154.0', '$const156.1']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=STORE_FAST(arg=4, lineno=240)
DEBUG:numba.core.byteflow:stack ['$158inplace_rshift.2']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=241)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
DEBUG:numba.core.byteflow:stack ['$a162.3']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
DEBUG:numba.core.byteflow:stack ['$a162.3', '$a164.4']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=STORE_FAST(arg=0, lineno=241)
DEBUG:numba.core.byteflow:stack ['$166inplace_multiply.5']
DEBUG:numba.core.byteflow:dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=241)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=176 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=243)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=243)
DEBUG:numba.core.byteflow:stack ['$const176.0']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
DEBUG:numba.core.byteflow:stack ['$const176.0', '$r178.1']
DEBUG:numba.core.byteflow:dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=243)
DEBUG:numba.core.byteflow:stack ['$180binary_true_divide.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=184 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=243)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=243)
DEBUG:numba.core.byteflow:stack ['$r184.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=92 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
DEBUG:numba.core.byteflow:stack ['$const92.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block analysis pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block analysis pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block analysis pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block analysis pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block analysis pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block analysis pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block analysis pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block analysis pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block analysis pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block analysis pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block analysis pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block analysis pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761e8f730>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [(<numba.core.ir.Assign object at 0x7f0761e9af40>,
                                  0)],
             '$110compare_op.2': [(<numba.core.ir.Assign object at 0x7f0761eb9250>,
                                   106)],
             '$112pred': [(<numba.core.ir.Assign object at 0x7f0761eb94c0>,
                           106)],
             '$114load_global.0': [(<numba.core.ir.Assign object at 0x7f0761eb9700>,
                                    114)],
             '$116load_method.1': [(<numba.core.ir.Assign object at 0x7f0761eb9880>,
                                    114)],
             '$120load_global.3': [(<numba.core.ir.Assign object at 0x7f0761eb9b20>,
                                    114)],
             '$124call_function.5': [(<numba.core.ir.Assign object at 0x7f0761eb9e20>,
                                      114)],
             '$126call_method.6': [(<numba.core.ir.Assign object at 0x7f0761eb9fd0>,
                                    114)],
             '$128return_value.7': [(<numba.core.ir.Assign object at 0x7f0761ebb100>,
                                     114)],
             '$134compare_op.2': [(<numba.core.ir.Assign object at 0x7f0761ebb5b0>,
                                   130)],
             '$136pred': [(<numba.core.ir.Assign object at 0x7f0761ebb820>,
                           130)],
             '$142binary_and.2': [(<numba.core.ir.Assign object at 0x7f0761ebbd30>,
                                   138)],
             '$144pred': [(<numba.core.ir.Assign object at 0x7f0761ebbfa0>,
                           138)],
             '$150inplace_multiply.2': [(<numba.core.ir.Assign object at 0x7f0761ebd490>,
                                         146)],
             '$158inplace_rshift.2': [(<numba.core.ir.Assign object at 0x7f0761ebd9d0>,
                                       154)],
             '$166inplace_multiply.5': [(<numba.core.ir.Assign object at 0x7f0761ebde50>,
                                         154)],
             '$174pred': [(<numba.core.ir.Assign object at 0x7f0761ec0340>,
                           172)],
             '$180binary_true_divide.2': [(<numba.core.ir.Assign object at 0x7f0761ec0850>,
                                           176)],
             '$182return_value.3': [(<numba.core.ir.Assign object at 0x7f0761ec09a0>,
                                     176)],
             '$186return_value.1': [(<numba.core.ir.Assign object at 0x7f0761ec0d00>,
                                     184)],
             '$22compare_op.8': [(<numba.core.ir.Assign object at 0x7f0761eb0790>,
                                  0)],
             '$24pred': [(<numba.core.ir.Assign object at 0x7f0761eb0a00>, 0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x7f0761e9a5b0>,
                                 0)],
             '$40compare_op.5': [(<numba.core.ir.Assign object at 0x7f0761eb1490>,
                                  26)],
             '$42pred': [(<numba.core.ir.Assign object at 0x7f0761eb1700>, 26)],
             '$44load_global.0': [(<numba.core.ir.Assign object at 0x7f0761eb1820>,
                                   44)],
             '$48load_deref.0': [(<numba.core.ir.Assign object at 0x7f0761eb1b20>,
                                  48)],
             '$50pred': [(<numba.core.ir.Assign object at 0x7f0761eb1dc0>, 48)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x7f0761eb90a0>,
                              106)],
             '$const132.1': [(<numba.core.ir.Assign object at 0x7f0761ebb400>,
                              130)],
             '$const140.1': [(<numba.core.ir.Assign object at 0x7f0761ebbb80>,
                              138)],
             '$const156.1': [(<numba.core.ir.Assign object at 0x7f0761ebd820>,
                              154)],
             '$const176.0': [(<numba.core.ir.Assign object at 0x7f0761ec0580>,
                              176)],
             '$const20.7': [(<numba.core.ir.Assign object at 0x7f0761eb05e0>,
                             0)],
             '$const38.4': [(<numba.core.ir.Assign object at 0x7f0761eb12e0>,
                             26)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7f0761e9ab20>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x7f0761e9a9d0>, 0)],
             'a.1': [(<numba.core.ir.Assign object at 0x7f0761eb0280>, 0),
                     (<numba.core.ir.Assign object at 0x7f0761ebdf10>, 154)],
             'b': [(<numba.core.ir.Assign object at 0x7f0761e9a670>, 0)],
             'bool112': [(<numba.core.ir.Assign object at 0x7f0761eb93a0>,
                          106)],
             'bool136': [(<numba.core.ir.Assign object at 0x7f0761ebb700>,
                          130)],
             'bool144': [(<numba.core.ir.Assign object at 0x7f0761ebbe80>,
                          138)],
             'bool174': [(<numba.core.ir.Assign object at 0x7f0761ec0220>,
                          172)],
             'bool24': [(<numba.core.ir.Assign object at 0x7f0761eb08e0>, 0)],
             'bool42': [(<numba.core.ir.Assign object at 0x7f0761eb15e0>, 26)],
             'bool50': [(<numba.core.ir.Assign object at 0x7f0761eb1ca0>, 48)],
             'exp': [(<numba.core.ir.Assign object at 0x7f0761eb0ee0>, 26),
                     (<numba.core.ir.Assign object at 0x7f0761eb7df0>, 98),
                     (<numba.core.ir.Assign object at 0x7f0761ebda90>, 154)],
             'invert': [(<numba.core.ir.Assign object at 0x7f0761eb0b20>, 26),
                        (<numba.core.ir.Assign object at 0x7f0761eb7b20>, 98)],
             'r': [(<numba.core.ir.Assign object at 0x7f0761e9ad00>, 0),
                   (<numba.core.ir.Assign object at 0x7f0761ebd550>, 146)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f0761e8caf0>
DEBUG:numba.core.ssa:Fix SSA violator on var r
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:first assign: r
DEBUG:numba.core.ssa:replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r = $150inplace_multiply.2
DEBUG:numba.core.ssa:replaced with: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0761e8cdc0>],
             146: [<numba.core.ir.Assign object at 0x7f0761ec0eb0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 146
DEBUG:numba.core.ssa:idom 138 from label 146
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:find_def_from_top label 130
DEBUG:numba.core.ssa:insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:idom 0 from label 106
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_bottom label 154
DEBUG:numba.core.ssa:find_def_from_top label 154
DEBUG:numba.core.ssa:insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[106])
DEBUG:numba.core.ssa:find_def_from_bottom label 146
DEBUG:numba.core.ssa:incoming_def r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG:numba.core.ssa:find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG:numba.core.ssa:find_def_from_top label 176
DEBUG:numba.core.ssa:idom 172 from label 176
DEBUG:numba.core.ssa:find_def_from_bottom label 172
DEBUG:numba.core.ssa:find_def_from_top label 172
DEBUG:numba.core.ssa:idom 130 from label 172
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
DEBUG:numba.core.ssa:find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG:numba.core.ssa:find_def_from_top label 184
DEBUG:numba.core.ssa:idom 172 from label 184
DEBUG:numba.core.ssa:find_def_from_bottom label 172
DEBUG:numba.core.ssa:find_def_from_top label 172
DEBUG:numba.core.ssa:idom 130 from label 172
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var a.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:first assign: a.1
DEBUG:numba.core.ssa:replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:replaced with: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0761ec0460>],
             154: [<numba.core.ir.Assign object at 0x7f0761e8cb80>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 114
DEBUG:numba.core.ssa:idom 106 from label 114
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:idom 0 from label 106
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 146
DEBUG:numba.core.ssa:idom 138 from label 146
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:find_def_from_top label 130
DEBUG:numba.core.ssa:insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:idom 0 from label 106
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_bottom label 154
DEBUG:numba.core.ssa:incoming_def a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 154
DEBUG:numba.core.ssa:idom 138 from label 154
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e8cdf0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var invert
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:first assign: invert
DEBUG:numba.core.ssa:replaced with: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:replaced with: invert.1 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f0761ec0fd0>],
             98: [<numba.core.ir.Assign object at 0x7f0761e8cc40>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: invert.1 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 172
DEBUG:numba.core.ssa:idom 130 from label 172
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:find_def_from_top label 130
DEBUG:numba.core.ssa:idom 106 from label 130
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG:numba.core.ssa:find_def_from_bottom label 48
DEBUG:numba.core.ssa:find_def_from_top label 48
DEBUG:numba.core.ssa:idom 26 from label 48
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:incoming_def invert = const(bool, True)
DEBUG:numba.core.ssa:find_def_from_bottom label 98
DEBUG:numba.core.ssa:incoming_def invert.1 = const(bool, False)
DEBUG:numba.core.ssa:replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761ec0e50>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var exp
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:first assign: exp
DEBUG:numba.core.ssa:replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: invert.1 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:replaced with: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:replaced with: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f075e39ed60>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f075e39e910>],
             98: [<numba.core.ir.Assign object at 0x7f0761e8c910>],
             154: [<numba.core.ir.Assign object at 0x7f075e3a5100>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: invert.1 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG:numba.core.ssa:find_def_from_bottom label 48
DEBUG:numba.core.ssa:find_def_from_top label 48
DEBUG:numba.core.ssa:idom 26 from label 48
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:find_def_from_bottom label 98
DEBUG:numba.core.ssa:incoming_def exp.1 = b
DEBUG:numba.core.ssa:replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:find_def_from_top label 130
DEBUG:numba.core.ssa:insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:find_def_from_bottom label 154
DEBUG:numba.core.ssa:incoming_def exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 154
DEBUG:numba.core.ssa:idom 138 from label 154
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e9a430>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=332)
           2	LOAD_FAST(arg=0, lineno=347)
           4	LOAD_FAST(arg=2, lineno=347)
           6	COMPARE_OP(arg=4, lineno=347)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=347)
          10	LOAD_CONST(arg=1, lineno=350)
          12	RETURN_VALUE(arg=None, lineno=350)
>         14	LOAD_CONST(arg=1, lineno=352)
          16	STORE_FAST(arg=4, lineno=352)
          18	LOAD_FAST(arg=2, lineno=353)
          20	LOAD_FAST(arg=0, lineno=353)
          22	BINARY_SUBTRACT(arg=None, lineno=353)
          24	STORE_FAST(arg=5, lineno=353)
>         26	LOAD_FAST(arg=4, lineno=354)
          28	LOAD_FAST(arg=0, lineno=354)
          30	COMPARE_OP(arg=0, lineno=354)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=354)
          34	LOAD_FAST(arg=1, lineno=355)
          36	LOAD_FAST(arg=4, lineno=355)
          38	BINARY_SUBSCR(arg=None, lineno=355)
          40	STORE_FAST(arg=6, lineno=355)
          42	LOAD_FAST(arg=3, lineno=356)
          44	LOAD_FAST(arg=5, lineno=356)
          46	BINARY_SUBSCR(arg=None, lineno=356)
          48	STORE_FAST(arg=7, lineno=356)
          50	LOAD_FAST(arg=7, lineno=359)
          52	LOAD_CONST(arg=2, lineno=359)
          54	COMPARE_OP(arg=3, lineno=359)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=359)
          58	LOAD_FAST(arg=6, lineno=363)
          60	LOAD_FAST(arg=7, lineno=363)
          62	COMPARE_OP(arg=3, lineno=363)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=363)
          66	LOAD_FAST(arg=6, lineno=363)
          68	LOAD_CONST(arg=2, lineno=363)
          70	COMPARE_OP(arg=3, lineno=363)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=363)
          74	LOAD_FAST(arg=5, lineno=364)
          76	LOAD_CONST(arg=2, lineno=364)
          78	BINARY_ADD(arg=None, lineno=364)
          80	UNARY_NEGATIVE(arg=None, lineno=364)
          82	RETURN_VALUE(arg=None, lineno=364)
          84	JUMP_FORWARD(arg=16, lineno=364)
>         86	LOAD_FAST(arg=6, lineno=365)
          88	LOAD_CONST(arg=2, lineno=365)
          90	COMPARE_OP(arg=3, lineno=365)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=365)
          94	LOAD_FAST(arg=6, lineno=367)
          96	LOAD_FAST(arg=3, lineno=367)
          98	LOAD_FAST(arg=5, lineno=367)
         100	STORE_SUBSCR(arg=None, lineno=367)
>        102	LOAD_FAST(arg=4, lineno=368)
         104	LOAD_CONST(arg=2, lineno=368)
         106	INPLACE_ADD(arg=None, lineno=368)
         108	STORE_FAST(arg=4, lineno=368)
         110	LOAD_FAST(arg=5, lineno=369)
         112	LOAD_CONST(arg=2, lineno=369)
         114	INPLACE_ADD(arg=None, lineno=369)
         116	STORE_FAST(arg=5, lineno=369)
         118	JUMP_ABSOLUTE(arg=26, lineno=369)
>        120	LOAD_FAST(arg=5, lineno=370)
         122	RETURN_VALUE(arg=None, lineno=370)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=332)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=347)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=347)
DEBUG:numba.core.byteflow:stack ['$src_ndim2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=347)
DEBUG:numba.core.byteflow:stack ['$src_ndim2.0', '$dest_ndim4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=347)
DEBUG:numba.core.byteflow:stack ['$6compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=10 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=350)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=350)
DEBUG:numba.core.byteflow:stack ['$const10.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=14 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=352)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=4, lineno=352)
DEBUG:numba.core.byteflow:stack ['$const14.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=353)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=353)
DEBUG:numba.core.byteflow:stack ['$dest_ndim18.1']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=353)
DEBUG:numba.core.byteflow:stack ['$dest_ndim18.1', '$src_ndim20.2']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=5, lineno=353)
DEBUG:numba.core.byteflow:stack ['$22binary_subtract.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=26 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=354)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=354)
DEBUG:numba.core.byteflow:stack ['$src_index26.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=354)
DEBUG:numba.core.byteflow:stack ['$src_index26.0', '$src_ndim28.1']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=354)
DEBUG:numba.core.byteflow:stack ['$30compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=34 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=355)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=355)
DEBUG:numba.core.byteflow:stack ['$src_shape34.0']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=355)
DEBUG:numba.core.byteflow:stack ['$src_shape34.0', '$src_index36.1']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=STORE_FAST(arg=6, lineno=355)
DEBUG:numba.core.byteflow:stack ['$38binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=356)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=356)
DEBUG:numba.core.byteflow:stack ['$dest_shape42.3']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=356)
DEBUG:numba.core.byteflow:stack ['$dest_shape42.3', '$dest_index44.4']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=7, lineno=356)
DEBUG:numba.core.byteflow:stack ['$46binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=359)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=359)
DEBUG:numba.core.byteflow:stack ['$dest_dim_size50.6']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=359)
DEBUG:numba.core.byteflow:stack ['$dest_dim_size50.6', '$const52.7']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=359)
DEBUG:numba.core.byteflow:stack ['$54compare_op.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=120 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=370)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=370)
DEBUG:numba.core.byteflow:stack ['$dest_index120.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=58 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=363)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=363)
DEBUG:numba.core.byteflow:stack ['$src_dim_size58.0']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=363)
DEBUG:numba.core.byteflow:stack ['$src_dim_size58.0', '$dest_dim_size60.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=363)
DEBUG:numba.core.byteflow:stack ['$62compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=86 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=365)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=365)
DEBUG:numba.core.byteflow:stack ['$src_dim_size86.0']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=365)
DEBUG:numba.core.byteflow:stack ['$src_dim_size86.0', '$const88.1']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=365)
DEBUG:numba.core.byteflow:stack ['$90compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=66 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=363)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=363)
DEBUG:numba.core.byteflow:stack ['$src_dim_size66.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=363)
DEBUG:numba.core.byteflow:stack ['$src_dim_size66.0', '$const68.1']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=363)
DEBUG:numba.core.byteflow:stack ['$70compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=102 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=368)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=368)
DEBUG:numba.core.byteflow:stack ['$src_index102.0']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=368)
DEBUG:numba.core.byteflow:stack ['$src_index102.0', '$const104.1']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=STORE_FAST(arg=4, lineno=368)
DEBUG:numba.core.byteflow:stack ['$106inplace_add.2']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=369)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=369)
DEBUG:numba.core.byteflow:stack ['$dest_index110.3']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=369)
DEBUG:numba.core.byteflow:stack ['$dest_index110.3', '$const112.4']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=STORE_FAST(arg=5, lineno=369)
DEBUG:numba.core.byteflow:stack ['$114inplace_add.5']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=369)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=94 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=367)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=367)
DEBUG:numba.core.byteflow:stack ['$src_dim_size94.0']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=367)
DEBUG:numba.core.byteflow:stack ['$src_dim_size94.0', '$dest_shape96.1']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=367)
DEBUG:numba.core.byteflow:stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=74 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=364)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=364)
DEBUG:numba.core.byteflow:stack ['$dest_index74.0']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=364)
DEBUG:numba.core.byteflow:stack ['$dest_index74.0', '$const76.1']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=364)
DEBUG:numba.core.byteflow:stack ['$78binary_add.2']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=364)
DEBUG:numba.core.byteflow:stack ['$80unary_negative.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:347),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:354),), kws=(), vararg=None, varkwarg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:359),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:363),), kws=(), vararg=None, varkwarg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:363),), kws=(), vararg=None, varkwarg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:365),), kws=(), vararg=None, varkwarg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bdf70>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:347),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bdf70>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bdf70>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bdf70>
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:354),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bdf70>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:359),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bdf70>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:363),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bdf70>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:363),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bdf70>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block analysis pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bdf70>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bdf70>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bdf70>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block analysis pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bdf70>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [(<numba.core.ir.Assign object at 0x7f075e3bbcd0>,
                                    102)],
             '$114inplace_add.5': [(<numba.core.ir.Assign object at 0x7f075e3bd1f0>,
                                    102)],
             '$122return_value.1': [(<numba.core.ir.Assign object at 0x7f075e3bd5e0>,
                                     120)],
             '$12return_value.1': [(<numba.core.ir.Assign object at 0x7f0761ed6a90>,
                                    10)],
             '$30compare_op.2': [(<numba.core.ir.Assign object at 0x7f075e3a2700>,
                                  26)],
             '$32pred': [(<numba.core.ir.Assign object at 0x7f075e3a2970>, 26)],
             '$54compare_op.8': [(<numba.core.ir.Assign object at 0x7f075e3a6820>,
                                  34)],
             '$56pred': [(<numba.core.ir.Assign object at 0x7f075e3a6a90>, 34)],
             '$62compare_op.2': [(<numba.core.ir.Assign object at 0x7f075e3a6d00>,
                                  58)],
             '$64pred': [(<numba.core.ir.Assign object at 0x7f075e3a6f70>, 58)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x7f0761ecc400>,
                                 0)],
             '$70compare_op.2': [(<numba.core.ir.Assign object at 0x7f075e3b3460>,
                                  66)],
             '$72pred': [(<numba.core.ir.Assign object at 0x7f075e3b36d0>, 66)],
             '$78binary_add.2': [(<numba.core.ir.Assign object at 0x7f075e3b3be0>,
                                  74)],
             '$80unary_negative.3': [(<numba.core.ir.Assign object at 0x7f0761e8f760>,
                                      74)],
             '$82return_value.4': [(<numba.core.ir.Assign object at 0x7f0761f436a0>,
                                    74)],
             '$8pred': [(<numba.core.ir.Assign object at 0x7f0761edd2b0>, 0)],
             '$90compare_op.2': [(<numba.core.ir.Assign object at 0x7f075e3bb130>,
                                  86)],
             '$92pred': [(<numba.core.ir.Assign object at 0x7f075e3bb3a0>, 86)],
             '$const10.0': [(<numba.core.ir.Assign object at 0x7f0761ed69a0>,
                             10)],
             '$const104.1': [(<numba.core.ir.Assign object at 0x7f075e3bbb20>,
                              102)],
             '$const112.4': [(<numba.core.ir.Assign object at 0x7f075e3bd040>,
                              102)],
             '$const52.7': [(<numba.core.ir.Assign object at 0x7f075e3a6670>,
                             34)],
             '$const68.1': [(<numba.core.ir.Assign object at 0x7f075e3b32b0>,
                             66)],
             '$const76.1': [(<numba.core.ir.Assign object at 0x7f075e3b3a30>,
                             74)],
             '$const88.1': [(<numba.core.ir.Assign object at 0x7f075e3b3f40>,
                             86)],
             'bool32': [(<numba.core.ir.Assign object at 0x7f075e3a2850>, 26)],
             'bool56': [(<numba.core.ir.Assign object at 0x7f075e3a6970>, 34)],
             'bool64': [(<numba.core.ir.Assign object at 0x7f075e3a6e50>, 58)],
             'bool72': [(<numba.core.ir.Assign object at 0x7f075e3b35b0>, 66)],
             'bool8': [(<numba.core.ir.Assign object at 0x7f0761f4a4f0>, 0)],
             'bool92': [(<numba.core.ir.Assign object at 0x7f075e3bb280>, 86)],
             'dest_dim_size': [(<numba.core.ir.Assign object at 0x7f075e3a62e0>,
                                34)],
             'dest_index': [(<numba.core.ir.Assign object at 0x7f075e3a2280>,
                             14),
                            (<numba.core.ir.Assign object at 0x7f075e3bd2b0>,
                             102)],
             'dest_ndim': [(<numba.core.ir.Assign object at 0x7f0761ebda60>,
                            0)],
             'dest_shape': [(<numba.core.ir.Assign object at 0x7f075e39e580>,
                             0)],
             'src_dim_size': [(<numba.core.ir.Assign object at 0x7f075e3a2dc0>,
                               34)],
             'src_index': [(<numba.core.ir.Assign object at 0x7f0761ed6d30>,
                            14),
                           (<numba.core.ir.Assign object at 0x7f075e3bbd90>,
                            102)],
             'src_ndim': [(<numba.core.ir.Assign object at 0x7f0761eb55e0>, 0)],
             'src_shape': [(<numba.core.ir.Assign object at 0x7f0761e8cfa0>,
                            0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f0761e93f70>
DEBUG:numba.core.ssa:Fix SSA violator on var src_index
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:347),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:first assign: src_index
DEBUG:numba.core.ssa:replaced with: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:354),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:359),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:363),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:363),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index = $106inplace_add.2
DEBUG:numba.core.ssa:replaced with: src_index.1 = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f0761e937f0>],
             102: [<numba.core.ir.Assign object at 0x7f075e3bdd60>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:347),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:find_def_from_top label 26
DEBUG:numba.core.ssa:insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG:numba.core.ssa:find_def_from_bottom label 102
DEBUG:numba.core.ssa:incoming_def src_index.1 = $106inplace_add.2
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:incoming_def src_index = const(int, 0)
DEBUG:numba.core.ssa:replaced with: $30compare_op.2 = src_index.2 < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:354),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:359),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:363),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:363),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 102
DEBUG:numba.core.ssa:idom 34 from label 102
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index.1 = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var dest_index
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761eb34c0>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:347),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761eb34c0>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761eb34c0>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:first assign: dest_index
DEBUG:numba.core.ssa:replaced with: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761eb34c0>
DEBUG:numba.core.ssa:on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:368), Var(src_index, npyimpl.py:352)], incoming_blocks=[102, 14])
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index.2 < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:354),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761eb34c0>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:359),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761eb34c0>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:363),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761eb34c0>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:363),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761eb34c0>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761eb34c0>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761eb34c0>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761eb34c0>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index.1 = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index = $114inplace_add.5
DEBUG:numba.core.ssa:replaced with: dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f0761eb34c0>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f0761eb36d0>],
             102: [<numba.core.ir.Assign object at 0x7f075e3c0340>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:347),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:368), Var(src_index, npyimpl.py:352)], incoming_blocks=[102, 14])
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index.2 < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:354),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:find_def_from_top label 26
DEBUG:numba.core.ssa:insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG:numba.core.ssa:find_def_from_bottom label 102
DEBUG:numba.core.ssa:incoming_def dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:incoming_def dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:359),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:363),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:363),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:find_def_from_top label 74
DEBUG:numba.core.ssa:idom 66 from label 74
DEBUG:numba.core.ssa:find_def_from_bottom label 66
DEBUG:numba.core.ssa:find_def_from_top label 66
DEBUG:numba.core.ssa:idom 58 from label 66
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 34 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:find_def_from_top label 94
DEBUG:numba.core.ssa:idom 86 from label 94
DEBUG:numba.core.ssa:find_def_from_bottom label 86
DEBUG:numba.core.ssa:find_def_from_top label 86
DEBUG:numba.core.ssa:idom 34 from label 86
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: dest_shape[dest_index.2] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index.1 = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 102
DEBUG:numba.core.ssa:idom 34 from label 102
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f0761e93f10>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:find_def_from_top label 120
DEBUG:numba.core.ssa:idom 26 from label 120
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: $122return_value.1 = cast(value=dest_index.2)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_FAST(arg=1, lineno=2)
           8	BUILD_TUPLE(arg=1, lineno=2)
          10	LOAD_GLOBAL(arg=1, lineno=2)
          12	LOAD_ATTR(arg=2, lineno=2)
          14	CALL_FUNCTION(arg=3, lineno=2)
          16	STORE_FAST(arg=0, lineno=2)
          18	LOAD_GLOBAL(arg=0, lineno=3)
          20	LOAD_FAST(arg=3, lineno=3)
          22	LOAD_CONST(arg=1, lineno=3)
          24	LOAD_GLOBAL(arg=1, lineno=3)
          26	LOAD_ATTR(arg=2, lineno=3)
          28	CALL_FUNCTION(arg=3, lineno=3)
          30	STORE_FAST(arg=4, lineno=3)
          32	LOAD_CONST(arg=2, lineno=4)
          34	STORE_FAST(arg=5, lineno=4)
          36	LOAD_GLOBAL(arg=3, lineno=5)
          38	LOAD_FAST(arg=0, lineno=5)
          40	BUILD_LIST(arg=1, lineno=5)
          42	LOAD_FAST(arg=5, lineno=5)
          44	LIST_EXTEND(arg=1, lineno=5)
          46	LIST_TO_TUPLE(arg=None, lineno=5)
          48	CALL_FUNCTION_EX(arg=0, lineno=5)
          50	STORE_FAST(arg=6, lineno=5)
          52	LOAD_GLOBAL(arg=4, lineno=6)
          54	LOAD_CONST(arg=3, lineno=6)
          56	CALL_FUNCTION(arg=1, lineno=6)
          58	GET_ITER(arg=None, lineno=6)
>         60	FOR_ITER(arg=20, lineno=6)
          62	STORE_FAST(arg=7, lineno=6)
          64	LOAD_FAST(arg=6, lineno=7)
          66	LOAD_FAST(arg=7, lineno=7)
          68	BUILD_TUPLE(arg=1, lineno=7)
          70	BINARY_SUBSCR(arg=None, lineno=7)
          72	LOAD_FAST(arg=4, lineno=7)
          74	LOAD_FAST(arg=7, lineno=7)
          76	BUILD_TUPLE(arg=1, lineno=7)
          78	STORE_SUBSCR(arg=None, lineno=7)
          80	JUMP_ABSOLUTE(arg=60, lineno=7)
>         82	LOAD_CONST(arg=0, lineno=7)
          84	RETURN_VALUE(arg=None, lineno=7)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=BUILD_TUPLE(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$sdim6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3', '$10load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=3, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3', '$12load_attr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack ['$14call_function.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_ATTR(arg=2, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9', '$24load_global.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9', '$26load_attr.11']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=4, lineno=3)
DEBUG:numba.core.byteflow:stack ['$28call_function.12']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=5, lineno=4)
DEBUG:numba.core.byteflow:stack ['$const32.13']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_GLOBAL(arg=3, lineno=5)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BUILD_LIST(arg=1, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$ptx38.15']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=5, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LIST_EXTEND(arg=1, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16', '$params42.17']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LIST_TO_TUPLE(arg=None, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=CALL_FUNCTION_EX(arg=0, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$46list_to_tuple.20']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=6, lineno=5)
DEBUG:numba.core.byteflow:stack ['$48call_function_ex.21']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_GLOBAL(arg=4, lineno=6)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=6)
DEBUG:numba.core.byteflow:stack ['$52load_global.22']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=6)
DEBUG:numba.core.byteflow:stack ['$52load_global.22', '$const54.23']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=GET_ITER(arg=None, lineno=6)
DEBUG:numba.core.byteflow:stack ['$56call_function.24']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi60.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=60 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=60, inst=FOR_ITER(arg=20, lineno=6)
DEBUG:numba.core.byteflow:stack ['$phi60.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=82 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_CONST(arg=0, lineno=7)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$const82.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=62 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=62, inst=STORE_FAST(arg=7, lineno=6)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=6, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=7, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=1, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2', '$i066.3']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2', '$68build_tuple.4']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=7, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=BUILD_TUPLE(arg=1, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6', '$i074.7']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=STORE_SUBSCR(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6', '$76build_tuple.8']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=JUMP_ABSOLUTE(arg=60, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=82 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$ptx4.1'}), (6, {'res': '$sdim6.2'}), (8, {'items': ['$sdim6.2'], 'res': '$8build_tuple.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$2load_global.0', 'args': ['$ptx4.1', '$8build_tuple.3', '$12load_attr.5'], 'res': '$14call_function.6'}), (16, {'value': '$14call_function.6'}), (18, {'res': '$18load_global.7'}), (20, {'res': '$out_20.8'}), (22, {'res': '$const22.9'}), (24, {'res': '$24load_global.10'}), (26, {'item': '$24load_global.10', 'res': '$26load_attr.11'}), (28, {'func': '$18load_global.7', 'args': ['$out_20.8', '$const22.9', '$26load_attr.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12'}), (32, {'res': '$const32.13'}), (34, {'value': '$const32.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$ptx38.15'}), (40, {'items': ['$ptx38.15'], 'res': '$40build_list.16'}), (42, {'res': '$params42.17'}), (44, {'target': '$40build_list.16', 'value': '$params42.17', 'extendvar': '$44list_extend.18', 'res': '$44list_extend.19'}), (46, {'const_list': '$40build_list.16', 'res': '$46list_to_tuple.20'}), (48, {'func': '$36load_global.14', 'vararg': '$46list_to_tuple.20', 'varkwarg': None, 'res': '$48call_function_ex.21'}), (50, {'value': '$48call_function_ex.21'}), (52, {'res': '$52load_global.22'}), (54, {'res': '$const54.23'}), (56, {'func': '$52load_global.22', 'args': ['$const54.23'], 'res': '$56call_function.24'}), (58, {'value': '$56call_function.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$ret64.2'}), (66, {'res': '$i066.3'}), (68, {'items': ['$i066.3'], 'res': '$68build_tuple.4'}), (70, {'index': '$68build_tuple.4', 'target': '$ret64.2', 'res': '$70binary_subscr.5'}), (72, {'res': '$out72.6'}), (74, {'res': '$i074.7'}), (76, {'items': ['$i074.7'], 'res': '$76build_tuple.8'}), (78, {'target': '$out72.6', 'index': '$76build_tuple.8', 'value': '$70binary_subscr.5'}), (80, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$const82.0'}), (84, {'retval': '$const82.0', 'castval': '$84return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptx = arg(0, name=ptx)                   ['ptx']
    sdim = arg(1, name=sdim)                 ['sdim']
    data = arg(2, name=data)                 ['data']
    out_ = arg(3, name=out_)                 ['out_']
    $2load_global.0 = global(farray: <function farray at 0x7f077493f0d0>) ['$2load_global.0']
    $8build_tuple.3 = build_tuple(items=[Var(sdim, <string>:1)]) ['$8build_tuple.3', 'sdim']
    $10load_global.4 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=float64) ['$10load_global.4', '$12load_attr.5']
    ptx.1 = call $2load_global.0(ptx, $8build_tuple.3, $12load_attr.5, func=$2load_global.0, args=[Var(ptx, <string>:1), Var($8build_tuple.3, <string>:2), Var($12load_attr.5, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_attr.5', '$2load_global.0', '$8build_tuple.3', 'ptx', 'ptx.1']
    $18load_global.7 = global(farray: <function farray at 0x7f077493f0d0>) ['$18load_global.7']
    $const_3 = const(int, 3)                 ['$const_3']
    $const22.9 = build_tuple(items=[Var($const_3, <string>:3)]) ['$const22.9', '$const_3']
    $24load_global.10 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$24load_global.10']
    $26load_attr.11 = getattr(value=$24load_global.10, attr=float64) ['$24load_global.10', '$26load_attr.11']
    out = call $18load_global.7(out_, $const22.9, $26load_attr.11, func=$18load_global.7, args=[Var(out_, <string>:1), Var($const22.9, <string>:3), Var($26load_attr.11, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_global.7', '$26load_attr.11', '$const22.9', 'out', 'out_']
    params = build_tuple(items=[])           ['params']
    $36load_global.14 = global(inner_func: CPUDispatcher(<function VolumeForceCoefficient3D.<locals>.coeff at 0x7f07620305e0>)) ['$36load_global.14']
    $40build_list.16 = build_list(items=[Var(ptx.1, <string>:2)]) ['$40build_list.16', 'ptx.1']
    $44list_extend.18 = getattr(value=$40build_list.16, attr=extend) ['$40build_list.16', '$44list_extend.18']
    $44list_extend.19 = call $44list_extend.18(params, func=$44list_extend.18, args=(Var(params, <string>:4),), kws=(), vararg=None, varkwarg=None, target=None) ['$44list_extend.18', '$44list_extend.19', 'params']
    $46list_to_tuple.20 = list_to_tuple(info=('$40build_list.16',)) ['$46list_to_tuple.20']
    ret = call $36load_global.14(*$46list_to_tuple.20, func=$36load_global.14, args=[], kws=[], vararg=$46list_to_tuple.20, varkwarg=None, target=None) ['$36load_global.14', '$46list_to_tuple.20', 'ret']
    $52load_global.22 = global(range: <class 'range'>) ['$52load_global.22']
    $const54.23 = const(int, 3)              ['$const54.23']
    $56call_function.24 = call $52load_global.22($const54.23, func=$52load_global.22, args=[Var($const54.23, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_global.22', '$56call_function.24', '$const54.23']
    $58get_iter.25 = getiter(value=$56call_function.24) ['$56call_function.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 82             ['$60for_iter.3']
label 62:
    i0 = $phi62.1                            ['$phi62.1', 'i0']
    $68build_tuple.4 = build_tuple(items=[Var(i0, <string>:6)]) ['$68build_tuple.4', 'i0']
    $70binary_subscr.5 = getitem(value=ret, index=$68build_tuple.4, fn=<built-in function getitem>) ['$68build_tuple.4', '$70binary_subscr.5', 'ret']
    $76build_tuple.8 = build_tuple(items=[Var(i0, <string>:6)]) ['$76build_tuple.8', 'i0']
    out[$76build_tuple.8] = $70binary_subscr.5 ['$70binary_subscr.5', '$76build_tuple.8', 'out']
    jump 60                                  []
label 82:
    $const82.0 = const(NoneType, None)       ['$const82.0']
    $84return_value.1 = cast(value=$const82.0) ['$84return_value.1', '$const82.0']
    return $84return_value.1                 ['$84return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0762089160>
DEBUG:numba.core.ssa:on stmt: ptx = arg(0, name=ptx)
DEBUG:numba.core.ssa:on stmt: sdim = arg(1, name=sdim)
DEBUG:numba.core.ssa:on stmt: data = arg(2, name=data)
DEBUG:numba.core.ssa:on stmt: out_ = arg(3, name=out_)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(farray: <function farray at 0x7f077493f0d0>)
DEBUG:numba.core.ssa:on stmt: $8build_tuple.3 = build_tuple(items=[Var(sdim, <string>:1)])
DEBUG:numba.core.ssa:on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=float64)
DEBUG:numba.core.ssa:on stmt: ptx.1 = call $2load_global.0(ptx, $8build_tuple.3, $12load_attr.5, func=$2load_global.0, args=[Var(ptx, <string>:1), Var($8build_tuple.3, <string>:2), Var($12load_attr.5, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $18load_global.7 = global(farray: <function farray at 0x7f077493f0d0>)
DEBUG:numba.core.ssa:on stmt: $const_3 = const(int, 3)
DEBUG:numba.core.ssa:on stmt: $const22.9 = build_tuple(items=[Var($const_3, <string>:3)])
DEBUG:numba.core.ssa:on stmt: $24load_global.10 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_attr.11 = getattr(value=$24load_global.10, attr=float64)
DEBUG:numba.core.ssa:on stmt: out = call $18load_global.7(out_, $const22.9, $26load_attr.11, func=$18load_global.7, args=[Var(out_, <string>:1), Var($const22.9, <string>:3), Var($26load_attr.11, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: params = build_tuple(items=[])
DEBUG:numba.core.ssa:on stmt: $36load_global.14 = global(inner_func: CPUDispatcher(<function VolumeForceCoefficient3D.<locals>.coeff at 0x7f07620305e0>))
DEBUG:numba.core.ssa:on stmt: $40build_list.16 = build_tuple(items=[Var(ptx.1, <string>:2)])
DEBUG:numba.core.ssa:on stmt: $_list_extend_gv_tuple = global(tuple: <class 'tuple'>)
DEBUG:numba.core.ssa:on stmt: $44list_extend.18_var_params = call $_list_extend_gv_tuple(params, func=$_list_extend_gv_tuple, args=(Var(params, <string>:4),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $44list_extend.19 = $40build_list.16 + $44list_extend.18_var_params
DEBUG:numba.core.ssa:on stmt: $46list_to_tuple.20 = $44list_extend.19
DEBUG:numba.core.ssa:on stmt: ret = call $36load_global.14(*$46list_to_tuple.20, func=$36load_global.14, args=[], kws=[], vararg=$46list_to_tuple.20, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $52load_global.22 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $const54.23 = const(int, 3)
DEBUG:numba.core.ssa:on stmt: $56call_function.24 = call $52load_global.22($const54.23, func=$52load_global.22, args=[Var($const54.23, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58get_iter.25 = getiter(value=$56call_function.24)
DEBUG:numba.core.ssa:on stmt: $phi60.0 = $58get_iter.25
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0762089160>
DEBUG:numba.core.ssa:on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG:numba.core.ssa:on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi62.1 = $60for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $60for_iter.3, 62, 82
DEBUG:numba.core.ssa:==== SSA block analysis pass on 62
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0762089160>
DEBUG:numba.core.ssa:on stmt: i0 = $phi62.1
DEBUG:numba.core.ssa:on stmt: $68build_tuple.4 = build_tuple(items=[Var(i0, <string>:6)])
DEBUG:numba.core.ssa:on stmt: $70binary_subscr.5 = getitem(value=ret, index=$68build_tuple.4, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $76build_tuple.8 = build_tuple(items=[Var(i0, <string>:6)])
DEBUG:numba.core.ssa:on stmt: out[$76build_tuple.8] = $70binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0762089160>
DEBUG:numba.core.ssa:on stmt: $const82.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $84return_value.1 = cast(value=$const82.0)
DEBUG:numba.core.ssa:on stmt: return $84return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.4': [(<numba.core.ir.Assign object at 0x7f075c129700>,
                                   0)],
             '$12load_attr.5': [(<numba.core.ir.Assign object at 0x7f075c129880>,
                                 0)],
             '$18load_global.7': [(<numba.core.ir.Assign object at 0x7f075c129ca0>,
                                   0)],
             '$24load_global.10': [(<numba.core.ir.Assign object at 0x7f075c130220>,
                                    0)],
             '$26load_attr.11': [(<numba.core.ir.Assign object at 0x7f075c1303a0>,
                                  0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7f075c1291c0>,
                                  0)],
             '$36load_global.14': [(<numba.core.ir.Assign object at 0x7f0762063c40>,
                                    0)],
             '$40build_list.16': [(<numba.core.ir.Assign object at 0x7f075c134640>,
                                   0)],
             '$44list_extend.18_var_params': [(<numba.core.ir.Assign object at 0x7f075c1348b0>,
                                               0)],
             '$44list_extend.19': [(<numba.core.ir.Assign object at 0x7f075c134970>,
                                    0)],
             '$46list_to_tuple.20': [(<numba.core.ir.Assign object at 0x7f075c134610>,
                                      0)],
             '$52load_global.22': [(<numba.core.ir.Assign object at 0x7f075c130d00>,
                                    0)],
             '$56call_function.24': [(<numba.core.ir.Assign object at 0x7f075c1320a0>,
                                      0)],
             '$58get_iter.25': [(<numba.core.ir.Assign object at 0x7f075c1321c0>,
                                 0)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x7f07620891f0>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x7f075c132310>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x7f075c132430>,
                                60)],
             '$68build_tuple.4': [(<numba.core.ir.Assign object at 0x7f075c132af0>,
                                   62)],
             '$70binary_subscr.5': [(<numba.core.ir.Assign object at 0x7f075c132c70>,
                                     62)],
             '$76build_tuple.8': [(<numba.core.ir.Assign object at 0x7f075c134070>,
                                   62)],
             '$84return_value.1': [(<numba.core.ir.Assign object at 0x7f075c134400>,
                                    82)],
             '$8build_tuple.3': [(<numba.core.ir.Assign object at 0x7f075c1295b0>,
                                  0)],
             '$_list_extend_gv_tuple': [(<numba.core.ir.Assign object at 0x7f075c134760>,
                                         0)],
             '$const22.9': [(<numba.core.ir.Assign object at 0x7f075c1300a0>,
                             0)],
             '$const54.23': [(<numba.core.ir.Assign object at 0x7f075c130e80>,
                              0)],
             '$const82.0': [(<numba.core.ir.Assign object at 0x7f075c134280>,
                             82)],
             '$const_3': [(<numba.core.ir.Assign object at 0x7f075c129f70>, 0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x7f075c129370>, 0)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x7f076206cca0>,
                           60)],
             'data': [(<numba.core.ir.Assign object at 0x7f0762076af0>, 0)],
             'i0': [(<numba.core.ir.Assign object at 0x7f075c132700>, 62)],
             'out': [(<numba.core.ir.Assign object at 0x7f075c130580>, 0)],
             'out_': [(<numba.core.ir.Assign object at 0x7f075c129040>, 0)],
             'params': [(<numba.core.ir.Assign object at 0x7f07620399a0>, 0)],
             'ptx': [(<numba.core.ir.Assign object at 0x7f0762076610>, 0)],
             'ptx.1': [(<numba.core.ir.Assign object at 0x7f075c129a60>, 0)],
             'ret': [(<numba.core.ir.Assign object at 0x7f075c130a90>, 0)],
             'sdim': [(<numba.core.ir.Assign object at 0x7f07620760a0>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f0762089160>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=5163)
           2	LOAD_DEREF(arg=0, lineno=5164)
           4	LOAD_FAST(arg=0, lineno=5164)
           6	LOAD_FAST(arg=1, lineno=5164)
           8	CALL_FUNCTION(arg=2, lineno=5164)
          10	RETURN_VALUE(arg=None, lineno=5164)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=5163)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=5164)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=5164)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=5164)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0', '$ptr4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=5164)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0', '$ptr4.1', '$shape6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=5164)
DEBUG:numba.core.byteflow:stack ['$8call_function.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$ptr4.1'}), (6, {'res': '$shape6.2'}), (8, {'func': '$2load_deref.0', 'args': ['$ptr4.1', '$shape6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptr = arg(0, name=ptr)                   ['ptr']
    shape = arg(1, name=shape)               ['shape']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_deref.0 = freevar(intrinsic_cfarray: <intrinsic intrinsic_cfarray>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(ptr, shape, func=$2load_deref.0, args=[Var(ptr, arrayobj.py:5163), Var(shape, arrayobj.py:5163)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$8call_function.3', 'ptr', 'shape']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c147790>
DEBUG:numba.core.ssa:on stmt: ptr = arg(0, name=ptr)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: dtype = arg(2, name=dtype)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(intrinsic_cfarray: <intrinsic intrinsic_cfarray>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $2load_deref.0(ptr, shape, func=$2load_deref.0, args=[Var(ptr, arrayobj.py:5163), Var(shape, arrayobj.py:5163)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG:numba.core.ssa:on stmt: return $10return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [(<numba.core.ir.Assign object at 0x7f075c14f940>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x7f075c14f400>,
                                 0)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x7f075c14f820>,
                                    0)],
             'dtype': [(<numba.core.ir.Assign object at 0x7f075c14f280>, 0)],
             'ptr': [(<numba.core.ir.Assign object at 0x7f075c147c10>, 0)],
             'shape': [(<numba.core.ir.Assign object at 0x7f075c1475e0>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f075c147790>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=5163)
           2	LOAD_DEREF(arg=0, lineno=5164)
           4	LOAD_FAST(arg=0, lineno=5164)
           6	LOAD_FAST(arg=1, lineno=5164)
           8	CALL_FUNCTION(arg=2, lineno=5164)
          10	RETURN_VALUE(arg=None, lineno=5164)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=5163)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=5164)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=5164)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=5164)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0', '$ptr4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=5164)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0', '$ptr4.1', '$shape6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=5164)
DEBUG:numba.core.byteflow:stack ['$8call_function.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$ptr4.1'}), (6, {'res': '$shape6.2'}), (8, {'func': '$2load_deref.0', 'args': ['$ptr4.1', '$shape6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptr = arg(0, name=ptr)                   ['ptr']
    shape = arg(1, name=shape)               ['shape']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_deref.0 = freevar(intrinsic_cfarray: <intrinsic intrinsic_cfarray>) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(ptr, shape, func=$2load_deref.0, args=[Var(ptr, arrayobj.py:5163), Var(shape, arrayobj.py:5163)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$8call_function.3', 'ptr', 'shape']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c1a7d00>
DEBUG:numba.core.ssa:on stmt: ptr = arg(0, name=ptr)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: dtype = arg(2, name=dtype)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(intrinsic_cfarray: <intrinsic intrinsic_cfarray>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $2load_deref.0(ptr, shape, func=$2load_deref.0, args=[Var(ptr, arrayobj.py:5163), Var(shape, arrayobj.py:5163)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG:numba.core.ssa:on stmt: return $10return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [(<numba.core.ir.Assign object at 0x7f0761f4b910>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x7f0761f4b760>,
                                 0)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x7f0761f4b9a0>,
                                    0)],
             'dtype': [(<numba.core.ir.Assign object at 0x7f0761f4bb20>, 0)],
             'ptr': [(<numba.core.ir.Assign object at 0x7f075c1a73a0>, 0)],
             'shape': [(<numba.core.ir.Assign object at 0x7f0761f4b4c0>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f075c1a7d00>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=174)
           2	LOAD_FAST(arg=0, lineno=176)
           4	LOAD_CONST(arg=1, lineno=176)
           6	BINARY_SUBSCR(arg=None, lineno=176)
           8	LOAD_DEREF(arg=2, lineno=176)
          10	COMPARE_OP(arg=4, lineno=176)
          12	POP_JUMP_IF_FALSE(arg=66, lineno=176)
          14	LOAD_FAST(arg=0, lineno=176)
          16	LOAD_CONST(arg=1, lineno=176)
          18	BINARY_SUBSCR(arg=None, lineno=176)
          20	LOAD_DEREF(arg=1, lineno=176)
          22	COMPARE_OP(arg=0, lineno=176)
          24	POP_JUMP_IF_FALSE(arg=66, lineno=176)
          26	LOAD_FAST(arg=0, lineno=176)
          28	LOAD_CONST(arg=2, lineno=176)
          30	BINARY_SUBSCR(arg=None, lineno=176)
          32	LOAD_DEREF(arg=3, lineno=176)
          34	COMPARE_OP(arg=4, lineno=176)
          36	POP_JUMP_IF_FALSE(arg=66, lineno=176)
          38	LOAD_GLOBAL(arg=0, lineno=177)
          40	LOAD_METHOD(arg=1, lineno=177)
          42	LOAD_DEREF(arg=0, lineno=177)
          44	LOAD_CONST(arg=1, lineno=177)
          46	BINARY_SUBSCR(arg=None, lineno=177)
          48	LOAD_DEREF(arg=0, lineno=177)
          50	LOAD_CONST(arg=3, lineno=177)
          52	BINARY_SUBSCR(arg=None, lineno=177)
          54	LOAD_DEREF(arg=0, lineno=177)
          56	LOAD_CONST(arg=2, lineno=177)
          58	BINARY_SUBSCR(arg=None, lineno=177)
          60	BUILD_TUPLE(arg=3, lineno=177)
          62	CALL_METHOD(arg=1, lineno=177)
          64	RETURN_VALUE(arg=None, lineno=177)
>         66	LOAD_GLOBAL(arg=0, lineno=179)
          68	LOAD_METHOD(arg=1, lineno=179)
          70	LOAD_CONST(arg=4, lineno=179)
          72	CALL_METHOD(arg=1, lineno=179)
          74	RETURN_VALUE(arg=None, lineno=179)
          76	LOAD_CONST(arg=0, lineno=179)
          78	RETURN_VALUE(arg=None, lineno=179)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=174)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=176)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_DEREF(arg=2, lineno=176)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=COMPARE_OP(arg=4, lineno=176)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2', '$8load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=POP_JUMP_IF_FALSE(arg=66, lineno=176)
DEBUG:numba.core.byteflow:stack ['$10compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=14 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=176)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx14.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx14.0', '$const16.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_DEREF(arg=1, lineno=176)
DEBUG:numba.core.byteflow:stack ['$18binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=176)
DEBUG:numba.core.byteflow:stack ['$18binary_subscr.2', '$20load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=66, lineno=176)
DEBUG:numba.core.byteflow:stack ['$22compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=66 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_GLOBAL(arg=0, lineno=179)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_METHOD(arg=1, lineno=179)
DEBUG:numba.core.byteflow:stack ['$66load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=179)
DEBUG:numba.core.byteflow:stack ['$68load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=CALL_METHOD(arg=1, lineno=179)
DEBUG:numba.core.byteflow:stack ['$68load_method.1', '$const70.2']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=179)
DEBUG:numba.core.byteflow:stack ['$72call_method.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=26 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=176)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx26.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx26.0', '$const28.1']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_DEREF(arg=3, lineno=176)
DEBUG:numba.core.byteflow:stack ['$30binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=COMPARE_OP(arg=4, lineno=176)
DEBUG:numba.core.byteflow:stack ['$30binary_subscr.2', '$32load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=POP_JUMP_IF_FALSE(arg=66, lineno=176)
DEBUG:numba.core.byteflow:stack ['$34compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=38 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=38 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_GLOBAL(arg=0, lineno=177)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_METHOD(arg=1, lineno=177)
DEBUG:numba.core.byteflow:stack ['$38load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_DEREF(arg=0, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$42load_deref.2']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$42load_deref.2', '$const44.3']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$48load_deref.5']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=BINARY_SUBSCR(arg=None, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$48load_deref.5', '$const50.6']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_DEREF(arg=0, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$52binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$52binary_subscr.7', '$54load_deref.8']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$52binary_subscr.7', '$54load_deref.8', '$const56.9']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BUILD_TUPLE(arg=3, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$52binary_subscr.7', '$58binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=CALL_METHOD(arg=1, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$60build_tuple.11']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=177)
DEBUG:numba.core.byteflow:stack ['$62call_method.12']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ptx2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$ptx2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$8load_deref.3'}), (10, {'lhs': '$6binary_subscr.2', 'rhs': '$8load_deref.3', 'res': '$10compare_op.4'}), (12, {'pred': '$10compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: (), 66: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$ptx14.0'}), (16, {'res': '$const16.1'}), (18, {'index': '$const16.1', 'target': '$ptx14.0', 'res': '$18binary_subscr.2'}), (20, {'res': '$20load_deref.3'}), (22, {'lhs': '$18binary_subscr.2', 'rhs': '$20load_deref.3', 'res': '$22compare_op.4'}), (24, {'pred': '$22compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 66: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$ptx26.0'}), (28, {'res': '$const28.1'}), (30, {'index': '$const28.1', 'target': '$ptx26.0', 'res': '$30binary_subscr.2'}), (32, {'res': '$32load_deref.3'}), (34, {'lhs': '$30binary_subscr.2', 'rhs': '$32load_deref.3', 'res': '$34compare_op.4'}), (36, {'pred': '$34compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 66: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$38load_global.0'}), (40, {'item': '$38load_global.0', 'res': '$40load_method.1'}), (42, {'res': '$42load_deref.2'}), (44, {'res': '$const44.3'}), (46, {'index': '$const44.3', 'target': '$42load_deref.2', 'res': '$46binary_subscr.4'}), (48, {'res': '$48load_deref.5'}), (50, {'res': '$const50.6'}), (52, {'index': '$const50.6', 'target': '$48load_deref.5', 'res': '$52binary_subscr.7'}), (54, {'res': '$54load_deref.8'}), (56, {'res': '$const56.9'}), (58, {'index': '$const56.9', 'target': '$54load_deref.8', 'res': '$58binary_subscr.10'}), (60, {'items': ['$46binary_subscr.4', '$52binary_subscr.7', '$58binary_subscr.10'], 'res': '$60build_tuple.11'}), (62, {'func': '$40load_method.1', 'args': ['$60build_tuple.11'], 'res': '$62call_method.12'}), (64, {'retval': '$62call_method.12', 'castval': '$64return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$66load_global.0'}), (68, {'item': '$66load_global.0', 'res': '$68load_method.1'}), (70, {'res': '$const70.2'}), (72, {'func': '$68load_method.1', 'args': ['$const70.2'], 'res': '$72call_method.3'}), (74, {'retval': '$72call_method.3', 'castval': '$74return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptx = arg(0, name=ptx)                   ['ptx']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=ptx, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'ptx']
    $8load_deref.3 = freevar(xmin: 1.9)      ['$8load_deref.3']
    $10compare_op.4 = $6binary_subscr.2 > $8load_deref.3 ['$10compare_op.4', '$6binary_subscr.2', '$8load_deref.3']
    bool12 = global(bool: <class 'bool'>)    ['bool12']
    $12pred = call bool12($10compare_op.4, func=bool12, args=(Var($10compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None) ['$10compare_op.4', '$12pred', 'bool12']
    branch $12pred, 14, 66                   ['$12pred']
label 14:
    $const16.1 = const(int, 0)               ['$const16.1']
    $18binary_subscr.2 = getitem(value=ptx, index=$const16.1, fn=<built-in function getitem>) ['$18binary_subscr.2', '$const16.1', 'ptx']
    $20load_deref.3 = freevar(xmax: 2.0)     ['$20load_deref.3']
    $22compare_op.4 = $18binary_subscr.2 < $20load_deref.3 ['$18binary_subscr.2', '$20load_deref.3', '$22compare_op.4']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.4, func=bool24, args=(Var($22compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.4', '$24pred', 'bool24']
    branch $24pred, 26, 66                   ['$24pred']
label 26:
    $const28.1 = const(int, 2)               ['$const28.1']
    $30binary_subscr.2 = getitem(value=ptx, index=$const28.1, fn=<built-in function getitem>) ['$30binary_subscr.2', '$const28.1', 'ptx']
    $32load_deref.3 = freevar(zmin: 0.0)     ['$32load_deref.3']
    $34compare_op.4 = $30binary_subscr.2 > $32load_deref.3 ['$30binary_subscr.2', '$32load_deref.3', '$34compare_op.4']
    bool36 = global(bool: <class 'bool'>)    ['bool36']
    $36pred = call bool36($34compare_op.4, func=bool36, args=(Var($34compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None) ['$34compare_op.4', '$36pred', 'bool36']
    branch $36pred, 38, 66                   ['$36pred']
label 38:
    $38load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$38load_global.0']
    $40load_method.1 = getattr(value=$38load_global.0, attr=array) ['$38load_global.0', '$40load_method.1']
    $42load_deref.2 = freevar(force: [100.   0.   0.]) ['$42load_deref.2']
    $const44.3 = const(int, 0)               ['$const44.3']
    $46binary_subscr.4 = getitem(value=$42load_deref.2, index=$const44.3, fn=<built-in function getitem>) ['$42load_deref.2', '$46binary_subscr.4', '$const44.3']
    $48load_deref.5 = freevar(force: [100.   0.   0.]) ['$48load_deref.5']
    $const50.6 = const(int, 1)               ['$const50.6']
    $52binary_subscr.7 = getitem(value=$48load_deref.5, index=$const50.6, fn=<built-in function getitem>) ['$48load_deref.5', '$52binary_subscr.7', '$const50.6']
    $54load_deref.8 = freevar(force: [100.   0.   0.]) ['$54load_deref.8']
    $const56.9 = const(int, 2)               ['$const56.9']
    $58binary_subscr.10 = getitem(value=$54load_deref.8, index=$const56.9, fn=<built-in function getitem>) ['$54load_deref.8', '$58binary_subscr.10', '$const56.9']
    $60build_tuple.11 = build_tuple(items=[Var($46binary_subscr.4, MFEMLinearElasticity.py:177), Var($52binary_subscr.7, MFEMLinearElasticity.py:177), Var($58binary_subscr.10, MFEMLinearElasticity.py:177)]) ['$46binary_subscr.4', '$52binary_subscr.7', '$58binary_subscr.10', '$60build_tuple.11']
    $62call_method.12 = call $40load_method.1($60build_tuple.11, func=$40load_method.1, args=[Var($60build_tuple.11, MFEMLinearElasticity.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$40load_method.1', '$60build_tuple.11', '$62call_method.12']
    $64return_value.13 = cast(value=$62call_method.12) ['$62call_method.12', '$64return_value.13']
    return $64return_value.13                ['$64return_value.13']
label 66:
    $66load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$66load_global.0']
    $68load_method.1 = getattr(value=$66load_global.0, attr=array) ['$66load_global.0', '$68load_method.1']
    $const_0.0 = const(float, 0.0)           ['$const_0.0']
    $const_0.0.1 = const(float, 0.0)         ['$const_0.0.1']
    $const_0.0.2 = const(float, 0.0)         ['$const_0.0.2']
    $const70.2 = build_tuple(items=[Var($const_0.0, MFEMLinearElasticity.py:179), Var($const_0.0.1, MFEMLinearElasticity.py:179), Var($const_0.0.2, MFEMLinearElasticity.py:179)]) ['$const70.2', '$const_0.0', '$const_0.0.1', '$const_0.0.2']
    $72call_method.3 = call $68load_method.1($const70.2, func=$68load_method.1, args=[Var($const70.2, MFEMLinearElasticity.py:179)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_method.1', '$72call_method.3', '$const70.2']
    $74return_value.4 = cast(value=$72call_method.3) ['$72call_method.3', '$74return_value.4']
    return $74return_value.4                 ['$74return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0f3880>
DEBUG:numba.core.ssa:on stmt: ptx = arg(0, name=ptx)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $6binary_subscr.2 = static_getitem(value=ptx, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $8load_deref.3 = freevar(xmin: 1.9)
DEBUG:numba.core.ssa:on stmt: $10compare_op.4 = $6binary_subscr.2 > $8load_deref.3
DEBUG:numba.core.ssa:on stmt: bool12 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $12pred = call bool12($10compare_op.4, func=bool12, args=(Var($10compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $12pred, 14, 66
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0f3880>
DEBUG:numba.core.ssa:on stmt: $const16.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $18binary_subscr.2 = static_getitem(value=ptx, index=0, index_var=$const16.1, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20load_deref.3 = freevar(xmax: 2.0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.4 = $18binary_subscr.2 < $20load_deref.3
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.4, func=bool24, args=(Var($22compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 66
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0f3880>
DEBUG:numba.core.ssa:on stmt: $const28.1 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $30binary_subscr.2 = static_getitem(value=ptx, index=2, index_var=$const28.1, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $32load_deref.3 = freevar(zmin: 0.0)
DEBUG:numba.core.ssa:on stmt: $34compare_op.4 = $30binary_subscr.2 > $32load_deref.3
DEBUG:numba.core.ssa:on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $36pred = call bool36($34compare_op.4, func=bool36, args=(Var($34compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $36pred, 38, 66
DEBUG:numba.core.ssa:==== SSA block analysis pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0f3880>
DEBUG:numba.core.ssa:on stmt: $38load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $40load_method.1 = getattr(value=$38load_global.0, attr=array)
DEBUG:numba.core.ssa:on stmt: $42load_deref.2 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const44.3 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $46binary_subscr.4 = static_getitem(value=$42load_deref.2, index=0, index_var=$const44.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $48load_deref.5 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const50.6 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $52binary_subscr.7 = static_getitem(value=$48load_deref.5, index=1, index_var=$const50.6, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $54load_deref.8 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const56.9 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $58binary_subscr.10 = static_getitem(value=$54load_deref.8, index=2, index_var=$const56.9, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $60build_tuple.11 = build_tuple(items=[Var($46binary_subscr.4, MFEMLinearElasticity.py:177), Var($52binary_subscr.7, MFEMLinearElasticity.py:177), Var($58binary_subscr.10, MFEMLinearElasticity.py:177)])
DEBUG:numba.core.ssa:on stmt: $62call_method.12 = call $40load_method.1($60build_tuple.11, func=$40load_method.1, args=[Var($60build_tuple.11, MFEMLinearElasticity.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64return_value.13 = cast(value=$62call_method.12)
DEBUG:numba.core.ssa:on stmt: return $64return_value.13
DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0f3880>
DEBUG:numba.core.ssa:on stmt: $66load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $68load_method.1 = getattr(value=$66load_global.0, attr=array)
DEBUG:numba.core.ssa:on stmt: $const_0.0 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const_0.0.1 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const_0.0.2 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const70.2 = build_tuple(items=[Var($const_0.0, MFEMLinearElasticity.py:179), Var($const_0.0.1, MFEMLinearElasticity.py:179), Var($const_0.0.2, MFEMLinearElasticity.py:179)])
DEBUG:numba.core.ssa:on stmt: $72call_method.3 = call $68load_method.1($const70.2, func=$68load_method.1, args=[Var($const70.2, MFEMLinearElasticity.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $74return_value.4 = cast(value=$72call_method.3)
DEBUG:numba.core.ssa:on stmt: return $74return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [(<numba.core.ir.Assign object at 0x7f0762039d30>,
                                  0)],
             '$12pred': [(<numba.core.ir.Assign object at 0x7f0730480820>, 0)],
             '$18binary_subscr.2': [(<numba.core.ir.Assign object at 0x7f075c0f38e0>,
                                     14)],
             '$20load_deref.3': [(<numba.core.ir.Assign object at 0x7f075c129640>,
                                  14)],
             '$22compare_op.4': [(<numba.core.ir.Assign object at 0x7f075c1297f0>,
                                  14)],
             '$24pred': [(<numba.core.ir.Assign object at 0x7f075c129b20>, 14)],
             '$30binary_subscr.2': [(<numba.core.ir.Assign object at 0x7f075c0f3040>,
                                     26)],
             '$32load_deref.3': [(<numba.core.ir.Assign object at 0x7f075c134130>,
                                  26)],
             '$34compare_op.4': [(<numba.core.ir.Assign object at 0x7f075c134670>,
                                  26)],
             '$36pred': [(<numba.core.ir.Assign object at 0x7f076206ce20>, 26)],
             '$38load_global.0': [(<numba.core.ir.Assign object at 0x7f076206c0d0>,
                                   38)],
             '$40load_method.1': [(<numba.core.ir.Assign object at 0x7f076206c850>,
                                   38)],
             '$42load_deref.2': [(<numba.core.ir.Assign object at 0x7f076206cc40>,
                                  38)],
             '$46binary_subscr.4': [(<numba.core.ir.Assign object at 0x7f075c0f3280>,
                                     38)],
             '$48load_deref.5': [(<numba.core.ir.Assign object at 0x7f076206e940>,
                                  38)],
             '$52binary_subscr.7': [(<numba.core.ir.Assign object at 0x7f075c0f3100>,
                                     38)],
             '$54load_deref.8': [(<numba.core.ir.Assign object at 0x7f075c05faf0>,
                                  38)],
             '$58binary_subscr.10': [(<numba.core.ir.Assign object at 0x7f075c0f3a30>,
                                      38)],
             '$60build_tuple.11': [(<numba.core.ir.Assign object at 0x7f075c05fd00>,
                                    38)],
             '$62call_method.12': [(<numba.core.ir.Assign object at 0x7f075c05f280>,
                                    38)],
             '$64return_value.13': [(<numba.core.ir.Assign object at 0x7f075c05f370>,
                                     38)],
             '$66load_global.0': [(<numba.core.ir.Assign object at 0x7f075c05fb80>,
                                   66)],
             '$68load_method.1': [(<numba.core.ir.Assign object at 0x7f075c05f640>,
                                   66)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7f075c0f35e0>,
                                    0)],
             '$72call_method.3': [(<numba.core.ir.Assign object at 0x7f075c152ee0>,
                                   66)],
             '$74return_value.4': [(<numba.core.ir.Assign object at 0x7f075c0f3520>,
                                    66)],
             '$8load_deref.3': [(<numba.core.ir.Assign object at 0x7f075c130e80>,
                                 0)],
             '$const16.1': [(<numba.core.ir.Assign object at 0x7f0761fa05b0>,
                             14)],
             '$const28.1': [(<numba.core.ir.Assign object at 0x7f075c1c9b80>,
                             26)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7f075c130220>,
                            0)],
             '$const44.3': [(<numba.core.ir.Assign object at 0x7f075c1c2160>,
                             38)],
             '$const50.6': [(<numba.core.ir.Assign object at 0x7f076206e0d0>,
                             38)],
             '$const56.9': [(<numba.core.ir.Assign object at 0x7f075c05feb0>,
                             38)],
             '$const70.2': [(<numba.core.ir.Assign object at 0x7f0762063ee0>,
                             66)],
             '$const_0.0': [(<numba.core.ir.Assign object at 0x7f075c05f1f0>,
                             66)],
             '$const_0.0.1': [(<numba.core.ir.Assign object at 0x7f075c05f190>,
                               66)],
             '$const_0.0.2': [(<numba.core.ir.Assign object at 0x7f0762063970>,
                               66)],
             'bool12': [(<numba.core.ir.Assign object at 0x7f0762039790>, 0)],
             'bool24': [(<numba.core.ir.Assign object at 0x7f075c129c70>, 14)],
             'bool36': [(<numba.core.ir.Assign object at 0x7f075c134970>, 26)],
             'ptx': [(<numba.core.ir.Assign object at 0x7f0762063a30>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f075c0f3880>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_FAST(arg=1, lineno=2)
           8	BUILD_TUPLE(arg=1, lineno=2)
          10	LOAD_GLOBAL(arg=1, lineno=2)
          12	LOAD_ATTR(arg=2, lineno=2)
          14	CALL_FUNCTION(arg=3, lineno=2)
          16	STORE_FAST(arg=0, lineno=2)
          18	LOAD_GLOBAL(arg=0, lineno=3)
          20	LOAD_FAST(arg=3, lineno=3)
          22	LOAD_CONST(arg=1, lineno=3)
          24	LOAD_GLOBAL(arg=1, lineno=3)
          26	LOAD_ATTR(arg=2, lineno=3)
          28	CALL_FUNCTION(arg=3, lineno=3)
          30	STORE_FAST(arg=4, lineno=3)
          32	LOAD_CONST(arg=2, lineno=4)
          34	STORE_FAST(arg=5, lineno=4)
          36	LOAD_GLOBAL(arg=3, lineno=5)
          38	LOAD_FAST(arg=0, lineno=5)
          40	BUILD_LIST(arg=1, lineno=5)
          42	LOAD_FAST(arg=5, lineno=5)
          44	LIST_EXTEND(arg=1, lineno=5)
          46	LIST_TO_TUPLE(arg=None, lineno=5)
          48	CALL_FUNCTION_EX(arg=0, lineno=5)
          50	STORE_FAST(arg=6, lineno=5)
          52	LOAD_GLOBAL(arg=4, lineno=6)
          54	LOAD_CONST(arg=3, lineno=6)
          56	CALL_FUNCTION(arg=1, lineno=6)
          58	GET_ITER(arg=None, lineno=6)
>         60	FOR_ITER(arg=20, lineno=6)
          62	STORE_FAST(arg=7, lineno=6)
          64	LOAD_FAST(arg=6, lineno=7)
          66	LOAD_FAST(arg=7, lineno=7)
          68	BUILD_TUPLE(arg=1, lineno=7)
          70	BINARY_SUBSCR(arg=None, lineno=7)
          72	LOAD_FAST(arg=4, lineno=7)
          74	LOAD_FAST(arg=7, lineno=7)
          76	BUILD_TUPLE(arg=1, lineno=7)
          78	STORE_SUBSCR(arg=None, lineno=7)
          80	JUMP_ABSOLUTE(arg=60, lineno=7)
>         82	LOAD_CONST(arg=0, lineno=7)
          84	RETURN_VALUE(arg=None, lineno=7)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=BUILD_TUPLE(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$sdim6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3', '$10load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=3, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3', '$12load_attr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack ['$14call_function.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_ATTR(arg=2, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9', '$24load_global.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9', '$26load_attr.11']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=4, lineno=3)
DEBUG:numba.core.byteflow:stack ['$28call_function.12']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=5, lineno=4)
DEBUG:numba.core.byteflow:stack ['$const32.13']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_GLOBAL(arg=3, lineno=5)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BUILD_LIST(arg=1, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$ptx38.15']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=5, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LIST_EXTEND(arg=1, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16', '$params42.17']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LIST_TO_TUPLE(arg=None, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=CALL_FUNCTION_EX(arg=0, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$46list_to_tuple.20']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=6, lineno=5)
DEBUG:numba.core.byteflow:stack ['$48call_function_ex.21']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_GLOBAL(arg=4, lineno=6)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=6)
DEBUG:numba.core.byteflow:stack ['$52load_global.22']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=6)
DEBUG:numba.core.byteflow:stack ['$52load_global.22', '$const54.23']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=GET_ITER(arg=None, lineno=6)
DEBUG:numba.core.byteflow:stack ['$56call_function.24']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi60.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=60 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=60, inst=FOR_ITER(arg=20, lineno=6)
DEBUG:numba.core.byteflow:stack ['$phi60.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=82 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_CONST(arg=0, lineno=7)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$const82.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=62 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=62, inst=STORE_FAST(arg=7, lineno=6)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=6, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=7, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=1, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2', '$i066.3']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2', '$68build_tuple.4']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=7, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=BUILD_TUPLE(arg=1, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6', '$i074.7']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=STORE_SUBSCR(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6', '$76build_tuple.8']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=JUMP_ABSOLUTE(arg=60, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=82 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$ptx4.1'}), (6, {'res': '$sdim6.2'}), (8, {'items': ['$sdim6.2'], 'res': '$8build_tuple.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$2load_global.0', 'args': ['$ptx4.1', '$8build_tuple.3', '$12load_attr.5'], 'res': '$14call_function.6'}), (16, {'value': '$14call_function.6'}), (18, {'res': '$18load_global.7'}), (20, {'res': '$out_20.8'}), (22, {'res': '$const22.9'}), (24, {'res': '$24load_global.10'}), (26, {'item': '$24load_global.10', 'res': '$26load_attr.11'}), (28, {'func': '$18load_global.7', 'args': ['$out_20.8', '$const22.9', '$26load_attr.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12'}), (32, {'res': '$const32.13'}), (34, {'value': '$const32.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$ptx38.15'}), (40, {'items': ['$ptx38.15'], 'res': '$40build_list.16'}), (42, {'res': '$params42.17'}), (44, {'target': '$40build_list.16', 'value': '$params42.17', 'extendvar': '$44list_extend.18', 'res': '$44list_extend.19'}), (46, {'const_list': '$40build_list.16', 'res': '$46list_to_tuple.20'}), (48, {'func': '$36load_global.14', 'vararg': '$46list_to_tuple.20', 'varkwarg': None, 'res': '$48call_function_ex.21'}), (50, {'value': '$48call_function_ex.21'}), (52, {'res': '$52load_global.22'}), (54, {'res': '$const54.23'}), (56, {'func': '$52load_global.22', 'args': ['$const54.23'], 'res': '$56call_function.24'}), (58, {'value': '$56call_function.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$ret64.2'}), (66, {'res': '$i066.3'}), (68, {'items': ['$i066.3'], 'res': '$68build_tuple.4'}), (70, {'index': '$68build_tuple.4', 'target': '$ret64.2', 'res': '$70binary_subscr.5'}), (72, {'res': '$out72.6'}), (74, {'res': '$i074.7'}), (76, {'items': ['$i074.7'], 'res': '$76build_tuple.8'}), (78, {'target': '$out72.6', 'index': '$76build_tuple.8', 'value': '$70binary_subscr.5'}), (80, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$const82.0'}), (84, {'retval': '$const82.0', 'castval': '$84return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptx = arg(0, name=ptx)                   ['ptx']
    sdim = arg(1, name=sdim)                 ['sdim']
    data = arg(2, name=data)                 ['data']
    out_ = arg(3, name=out_)                 ['out_']
    $2load_global.0 = global(farray: <function farray at 0x7f077493f0d0>) ['$2load_global.0']
    $8build_tuple.3 = build_tuple(items=[Var(sdim, <string>:1)]) ['$8build_tuple.3', 'sdim']
    $10load_global.4 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=float64) ['$10load_global.4', '$12load_attr.5']
    ptx.1 = call $2load_global.0(ptx, $8build_tuple.3, $12load_attr.5, func=$2load_global.0, args=[Var(ptx, <string>:1), Var($8build_tuple.3, <string>:2), Var($12load_attr.5, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_attr.5', '$2load_global.0', '$8build_tuple.3', 'ptx', 'ptx.1']
    $18load_global.7 = global(farray: <function farray at 0x7f077493f0d0>) ['$18load_global.7']
    $const_3 = const(int, 3)                 ['$const_3']
    $const22.9 = build_tuple(items=[Var($const_3, <string>:3)]) ['$const22.9', '$const_3']
    $24load_global.10 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$24load_global.10']
    $26load_attr.11 = getattr(value=$24load_global.10, attr=float64) ['$24load_global.10', '$26load_attr.11']
    out = call $18load_global.7(out_, $const22.9, $26load_attr.11, func=$18load_global.7, args=[Var(out_, <string>:1), Var($const22.9, <string>:3), Var($26load_attr.11, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_global.7', '$26load_attr.11', '$const22.9', 'out', 'out_']
    params = build_tuple(items=[])           ['params']
    $36load_global.14 = global(inner_func: CPUDispatcher(<function SurfaceForceCoefficient3D.<locals>.coeff at 0x7f07620300d0>)) ['$36load_global.14']
    $40build_list.16 = build_list(items=[Var(ptx.1, <string>:2)]) ['$40build_list.16', 'ptx.1']
    $44list_extend.18 = getattr(value=$40build_list.16, attr=extend) ['$40build_list.16', '$44list_extend.18']
    $44list_extend.19 = call $44list_extend.18(params, func=$44list_extend.18, args=(Var(params, <string>:4),), kws=(), vararg=None, varkwarg=None, target=None) ['$44list_extend.18', '$44list_extend.19', 'params']
    $46list_to_tuple.20 = list_to_tuple(info=('$40build_list.16',)) ['$46list_to_tuple.20']
    ret = call $36load_global.14(*$46list_to_tuple.20, func=$36load_global.14, args=[], kws=[], vararg=$46list_to_tuple.20, varkwarg=None, target=None) ['$36load_global.14', '$46list_to_tuple.20', 'ret']
    $52load_global.22 = global(range: <class 'range'>) ['$52load_global.22']
    $const54.23 = const(int, 3)              ['$const54.23']
    $56call_function.24 = call $52load_global.22($const54.23, func=$52load_global.22, args=[Var($const54.23, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_global.22', '$56call_function.24', '$const54.23']
    $58get_iter.25 = getiter(value=$56call_function.24) ['$56call_function.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 82             ['$60for_iter.3']
label 62:
    i0 = $phi62.1                            ['$phi62.1', 'i0']
    $68build_tuple.4 = build_tuple(items=[Var(i0, <string>:6)]) ['$68build_tuple.4', 'i0']
    $70binary_subscr.5 = getitem(value=ret, index=$68build_tuple.4, fn=<built-in function getitem>) ['$68build_tuple.4', '$70binary_subscr.5', 'ret']
    $76build_tuple.8 = build_tuple(items=[Var(i0, <string>:6)]) ['$76build_tuple.8', 'i0']
    out[$76build_tuple.8] = $70binary_subscr.5 ['$70binary_subscr.5', '$76build_tuple.8', 'out']
    jump 60                                  []
label 82:
    $const82.0 = const(NoneType, None)       ['$const82.0']
    $84return_value.1 = cast(value=$const82.0) ['$84return_value.1', '$const82.0']
    return $84return_value.1                 ['$84return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0762071df0>
DEBUG:numba.core.ssa:on stmt: ptx = arg(0, name=ptx)
DEBUG:numba.core.ssa:on stmt: sdim = arg(1, name=sdim)
DEBUG:numba.core.ssa:on stmt: data = arg(2, name=data)
DEBUG:numba.core.ssa:on stmt: out_ = arg(3, name=out_)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(farray: <function farray at 0x7f077493f0d0>)
DEBUG:numba.core.ssa:on stmt: $8build_tuple.3 = build_tuple(items=[Var(sdim, <string>:1)])
DEBUG:numba.core.ssa:on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=float64)
DEBUG:numba.core.ssa:on stmt: ptx.1 = call $2load_global.0(ptx, $8build_tuple.3, $12load_attr.5, func=$2load_global.0, args=[Var(ptx, <string>:1), Var($8build_tuple.3, <string>:2), Var($12load_attr.5, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $18load_global.7 = global(farray: <function farray at 0x7f077493f0d0>)
DEBUG:numba.core.ssa:on stmt: $const_3 = const(int, 3)
DEBUG:numba.core.ssa:on stmt: $const22.9 = build_tuple(items=[Var($const_3, <string>:3)])
DEBUG:numba.core.ssa:on stmt: $24load_global.10 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_attr.11 = getattr(value=$24load_global.10, attr=float64)
DEBUG:numba.core.ssa:on stmt: out = call $18load_global.7(out_, $const22.9, $26load_attr.11, func=$18load_global.7, args=[Var(out_, <string>:1), Var($const22.9, <string>:3), Var($26load_attr.11, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: params = build_tuple(items=[])
DEBUG:numba.core.ssa:on stmt: $36load_global.14 = global(inner_func: CPUDispatcher(<function SurfaceForceCoefficient3D.<locals>.coeff at 0x7f07620300d0>))
DEBUG:numba.core.ssa:on stmt: $40build_list.16 = build_tuple(items=[Var(ptx.1, <string>:2)])
DEBUG:numba.core.ssa:on stmt: $_list_extend_gv_tuple = global(tuple: <class 'tuple'>)
DEBUG:numba.core.ssa:on stmt: $44list_extend.18_var_params = call $_list_extend_gv_tuple(params, func=$_list_extend_gv_tuple, args=(Var(params, <string>:4),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $44list_extend.19 = $40build_list.16 + $44list_extend.18_var_params
DEBUG:numba.core.ssa:on stmt: $46list_to_tuple.20 = $44list_extend.19
DEBUG:numba.core.ssa:on stmt: ret = call $36load_global.14(*$46list_to_tuple.20, func=$36load_global.14, args=[], kws=[], vararg=$46list_to_tuple.20, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $52load_global.22 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $const54.23 = const(int, 3)
DEBUG:numba.core.ssa:on stmt: $56call_function.24 = call $52load_global.22($const54.23, func=$52load_global.22, args=[Var($const54.23, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58get_iter.25 = getiter(value=$56call_function.24)
DEBUG:numba.core.ssa:on stmt: $phi60.0 = $58get_iter.25
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0762071df0>
DEBUG:numba.core.ssa:on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG:numba.core.ssa:on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi62.1 = $60for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $60for_iter.3, 62, 82
DEBUG:numba.core.ssa:==== SSA block analysis pass on 62
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0762071df0>
DEBUG:numba.core.ssa:on stmt: i0 = $phi62.1
DEBUG:numba.core.ssa:on stmt: $68build_tuple.4 = build_tuple(items=[Var(i0, <string>:6)])
DEBUG:numba.core.ssa:on stmt: $70binary_subscr.5 = getitem(value=ret, index=$68build_tuple.4, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $76build_tuple.8 = build_tuple(items=[Var(i0, <string>:6)])
DEBUG:numba.core.ssa:on stmt: out[$76build_tuple.8] = $70binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0762071df0>
DEBUG:numba.core.ssa:on stmt: $const82.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $84return_value.1 = cast(value=$const82.0)
DEBUG:numba.core.ssa:on stmt: return $84return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.4': [(<numba.core.ir.Assign object at 0x7f075c08adc0>,
                                   0)],
             '$12load_attr.5': [(<numba.core.ir.Assign object at 0x7f075c08aac0>,
                                 0)],
             '$18load_global.7': [(<numba.core.ir.Assign object at 0x7f075c06cee0>,
                                   0)],
             '$24load_global.10': [(<numba.core.ir.Assign object at 0x7f075c06c7f0>,
                                    0)],
             '$26load_attr.11': [(<numba.core.ir.Assign object at 0x7f075c06ca30>,
                                  0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7f075c08a4c0>,
                                  0)],
             '$36load_global.14': [(<numba.core.ir.Assign object at 0x7f075c06c040>,
                                    0)],
             '$40build_list.16': [(<numba.core.ir.Assign object at 0x7f075c1a78e0>,
                                   0)],
             '$44list_extend.18_var_params': [(<numba.core.ir.Assign object at 0x7f075c1a72e0>,
                                               0)],
             '$44list_extend.19': [(<numba.core.ir.Assign object at 0x7f075c1a7490>,
                                    0)],
             '$46list_to_tuple.20': [(<numba.core.ir.Assign object at 0x7f075c1a7310>,
                                      0)],
             '$52load_global.22': [(<numba.core.ir.Assign object at 0x7f075c059be0>,
                                    0)],
             '$56call_function.24': [(<numba.core.ir.Assign object at 0x7f0761edddf0>,
                                      0)],
             '$58get_iter.25': [(<numba.core.ir.Assign object at 0x7f0761eddcd0>,
                                 0)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x7f075c05f6d0>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x7f0761edd1f0>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x7f0761edd910>,
                                60)],
             '$68build_tuple.4': [(<numba.core.ir.Assign object at 0x7f075c1c42e0>,
                                   62)],
             '$70binary_subscr.5': [(<numba.core.ir.Assign object at 0x7f075c132f10>,
                                     62)],
             '$76build_tuple.8': [(<numba.core.ir.Assign object at 0x7f075c132400>,
                                   62)],
             '$84return_value.1': [(<numba.core.ir.Assign object at 0x7f075c1a7bb0>,
                                    82)],
             '$8build_tuple.3': [(<numba.core.ir.Assign object at 0x7f075c08abb0>,
                                  0)],
             '$_list_extend_gv_tuple': [(<numba.core.ir.Assign object at 0x7f075c1a7c70>,
                                         0)],
             '$const22.9': [(<numba.core.ir.Assign object at 0x7f075c06ce80>,
                             0)],
             '$const54.23': [(<numba.core.ir.Assign object at 0x7f075c0590d0>,
                              0)],
             '$const82.0': [(<numba.core.ir.Assign object at 0x7f075c132520>,
                             82)],
             '$const_3': [(<numba.core.ir.Assign object at 0x7f075c06cf40>, 0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x7f075c08a310>, 0)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x7f075c059b80>,
                           60)],
             'data': [(<numba.core.ir.Assign object at 0x7f075c08a7c0>, 0)],
             'i0': [(<numba.core.ir.Assign object at 0x7f076206e430>, 62)],
             'out': [(<numba.core.ir.Assign object at 0x7f075c06ccd0>, 0)],
             'out_': [(<numba.core.ir.Assign object at 0x7f075c08a5e0>, 0)],
             'params': [(<numba.core.ir.Assign object at 0x7f075c06c4f0>, 0)],
             'ptx': [(<numba.core.ir.Assign object at 0x7f075c08a940>, 0)],
             'ptx.1': [(<numba.core.ir.Assign object at 0x7f075c08ab20>, 0)],
             'ret': [(<numba.core.ir.Assign object at 0x7f075c0596a0>, 0)],
             'sdim': [(<numba.core.ir.Assign object at 0x7f075c08a670>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f0762071df0>
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning const_vertices
DEBUG:gustaf:<Faces> returning const_elements
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning const_vertices
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning show_options
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:optimization.opti:Vol: 0.8286, dVol: [-2.78651358e-03  1.34787609e-02 -9.98783485e-03  4.28348824e-02
 -1.18431872e-02  2.44208546e-02 -9.82807394e-03  4.29136362e-02
 -2.90648404e-03  1.37091487e-02 -4.73124564e-03  3.15079131e-02
 -5.09496283e-03  1.02201520e-01 -2.13045501e-02  5.54485895e-02
 -4.50480070e-03  1.02674693e-01 -4.42015514e-03  3.36274096e-02
 -1.41489874e-03  1.28726582e-02 -1.13933593e-03  3.92038764e-02
 -6.92339561e-03  2.25806428e-02 -9.37521639e-04  3.93036281e-02
 -1.53195308e-03  1.31523934e-02 -1.36681329e-02  1.39202665e-02
 -5.44172831e-02  4.75203094e-02 -3.02242462e-02  2.54952977e-02
 -5.38305839e-02  4.72246864e-02 -1.46860259e-02  1.24380140e-02
 -2.49233592e-02  2.50702646e-02 -1.17090992e-01  9.02783327e-02
 -6.77617932e-02  4.93358722e-02 -1.17017314e-01  9.06319813e-02
 -2.55735418e-02  2.60121845e-02 -8.37930793e-03  1.14638895e-02
 -4.83151427e-02  3.53510214e-02 -2.65622821e-02  2.40682970e-02
 -4.84759576e-02  3.52740203e-02 -9.44291570e-03  1.00220294e-02
 -1.43472959e-03  7.88286434e-03 -2.50436264e-05  2.49386759e-02
 -5.01326445e-03  1.47817461e-02 -7.43701056e-05  2.49639018e-02
 -1.91520484e-03  7.65417607e-03 -3.73779175e-03  1.68891414e-02
  2.08671483e-03  6.00521184e-02 -1.10904015e-02  3.13461293e-02
  1.99356828e-03  6.03478973e-02 -4.16427795e-03  1.76527434e-02
 -1.44820002e-03  7.65500878e-03  4.04159937e-04  2.47270995e-02
 -5.01432936e-03  1.47017948e-02  3.22750266e-04  2.47644938e-02
 -1.78284935e-03  7.36756441e-03]
DEBUG:optimization.opti:Compliance: 0.72209, dCompliance: [ 9.47261190e-07 -5.35042168e-06 -7.46315441e-07 -1.94413478e-05
 -6.16905270e-07 -3.77731011e-06  3.96356734e-07 -2.76827860e-07
  1.41245745e-09 -4.32117160e-08  7.03674981e-07 -1.11561426e-05
 -9.48200060e-06 -4.65419384e-05 -1.72802032e-06 -9.70418340e-06
  8.35717912e-07 -6.29856094e-07 -4.61319578e-09 -1.04943336e-07
 -3.16745264e-08 -4.42150266e-06 -4.82344829e-06 -1.77235766e-05
 -8.25934488e-07 -3.75405202e-06  2.95159821e-07 -2.30898461e-07
 -3.95436896e-09 -3.81176239e-08  4.79876733e-06 -4.09074549e-06
  9.44407968e-06 -1.49563261e-05  2.12093075e-06 -2.56735391e-06
  1.37783591e-06 -9.93332153e-07  2.40189770e-07 -2.51814143e-07
  7.07058115e-06 -7.04900917e-06  2.58070316e-05 -2.66150629e-05
  4.94493472e-06 -6.26892148e-06  3.05920761e-06 -1.99327881e-06
  4.05730529e-07 -5.64026998e-07  1.96824058e-06 -2.67761018e-06
  9.52883702e-06 -9.42254397e-06  1.82369028e-06 -2.43618416e-06
  1.26169647e-06 -8.15954808e-07  2.08030667e-07 -2.58007652e-07
  3.26155187e-08 -1.21204338e-06 -3.50718390e-07 -4.76957215e-06
  6.20894815e-07 -1.65915657e-06 -1.78255566e-07 -1.25120755e-06
  1.64489390e-07 -2.39306336e-07  9.74606905e-08 -2.42885410e-06
 -7.25473157e-07 -1.12065502e-05  1.64499251e-06 -3.74919050e-06
  4.76213793e-08 -1.91537579e-06  3.57701976e-07 -6.21104160e-07
  4.18003739e-08 -1.05144521e-06 -1.46333970e-07 -4.37386258e-06
  7.38118911e-07 -1.48282844e-06  1.15134069e-07 -8.34849332e-07
  2.32576175e-07 -3.33956938e-07]
INFO:optimization.opti:Finished iteration 1 with compliance 0.7220878868138644 and volume 0.8285994515852999
DEBUG:optimization.opti:Saving simulation results to optimization_runs/opti_double_lattice/simulation_1
INFO:optimization.MMA:It.:    1 | Obj.: 1.000e+00 | Constr.:  3.286e-01 | ch.: 1.000e+00 | C: 7.221e-01
DEBUG:optimization.opti:Computing Solution
DEBUG:optimization.opti:Generating Geometry
DEBUG:deep_sdf.mesh:Querying 18081 DeepSDF points
DEBUG:deep_sdf.mesh:sampling takes: 0.001142
DEBUG:root:torch.cuda.memory_allocated:  35.82MiB | torch.cuda.memory_reserved:  90.00MiB
DEBUG:deep_sdf.mesh:Computing DeepSDF derivatives
DEBUG:deep_sdf.mesh:sampling takes: 0.000540
DEBUG:deep_sdf.mesh:sampling takes: 0.000674
DEBUG:deep_sdf.mesh:sampling takes: 0.000416
DEBUG:deep_sdf.mesh:sampling takes: 0.000386
DEBUG:deep_sdf.mesh:sampling takes: 0.000382
DEBUG:deep_sdf.mesh:sampling takes: 0.000391
DEBUG:deep_sdf.mesh:sampling takes: 0.000381
DEBUG:deep_sdf.mesh:sampling takes: 0.000376
DEBUG:deep_sdf.mesh:sampling takes: 0.000386
DEBUG:deep_sdf.mesh:sampling takes: 0.000382
DEBUG:deep_sdf.mesh:sampling takes: 0.000386
DEBUG:deep_sdf.mesh:sampling takes: 0.000381
DEBUG:deep_sdf.mesh:sampling takes: 0.000372
DEBUG:deep_sdf.mesh:sampling takes: 0.000379
DEBUG:deep_sdf.mesh:sampling takes: 0.000439
DEBUG:deep_sdf.mesh:sampling takes: 0.000379
DEBUG:deep_sdf.mesh:sampling takes: 0.000378
DEBUG:deep_sdf.mesh:sampling takes: 0.000382
DEBUG:deep_sdf.mesh:sampling takes: 0.000389
DEBUG:deep_sdf.mesh:sampling takes: 0.000379
DEBUG:deep_sdf.mesh:sampling takes: 0.000378
DEBUG:deep_sdf.mesh:sampling takes: 0.000381
DEBUG:deep_sdf.mesh:sampling takes: 0.000392
DEBUG:deep_sdf.mesh:sampling takes: 0.000372
DEBUG:deep_sdf.mesh:sampling takes: 0.000374
DEBUG:deep_sdf.mesh:sampling takes: 0.000381
DEBUG:deep_sdf.mesh:sampling takes: 0.000383
DEBUG:deep_sdf.mesh:sampling takes: 0.000303
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000298
DEBUG:deep_sdf.mesh:sampling takes: 0.000299
DEBUG:deep_sdf.mesh:sampling takes: 0.000305
DEBUG:deep_sdf.mesh:sampling takes: 0.000308
DEBUG:deep_sdf.mesh:sampling takes: 0.000303
DEBUG:deep_sdf.mesh:sampling takes: 0.000308
DEBUG:deep_sdf.mesh:sampling takes: 0.000310
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000314
DEBUG:deep_sdf.mesh:sampling takes: 0.000317
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000314
DEBUG:deep_sdf.mesh:sampling takes: 0.000303
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000311
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000305
DEBUG:deep_sdf.mesh:sampling takes: 0.000319
DEBUG:deep_sdf.mesh:sampling takes: 0.000311
DEBUG:deep_sdf.mesh:sampling takes: 0.000308
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000312
DEBUG:deep_sdf.mesh:sampling takes: 0.000334
DEBUG:deep_sdf.mesh:sampling takes: 0.000316
DEBUG:deep_sdf.mesh:sampling takes: 0.000314
DEBUG:deep_sdf.mesh:sampling takes: 0.000301
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000311
DEBUG:deep_sdf.mesh:sampling takes: 0.000313
DEBUG:deep_sdf.mesh:sampling takes: 0.000316
DEBUG:deep_sdf.mesh:sampling takes: 0.000303
DEBUG:deep_sdf.mesh:sampling takes: 0.000308
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000301
DEBUG:deep_sdf.mesh:sampling takes: 0.000318
DEBUG:deep_sdf.mesh:sampling takes: 0.000323
DEBUG:deep_sdf.mesh:sampling takes: 0.000303
DEBUG:deep_sdf.mesh:sampling takes: 0.000305
DEBUG:deep_sdf.mesh:sampling takes: 0.000301
DEBUG:deep_sdf.mesh:sampling takes: 0.000305
DEBUG:deep_sdf.mesh:sampling takes: 0.000319
DEBUG:deep_sdf.mesh:sampling takes: 0.000312
DEBUG:deep_sdf.mesh:sampling takes: 0.000312
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000312
DEBUG:deep_sdf.mesh:sampling takes: 0.000314
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000303
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000310
DEBUG:deep_sdf.mesh:sampling takes: 0.000313
DEBUG:deep_sdf.mesh:sampling takes: 0.000307
DEBUG:deep_sdf.mesh:sampling takes: 0.000298
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:root:torch.cuda.memory_allocated:  48.73MiB | torch.cuda.memory_reserved:  70.00MiB
DEBUG:deep_sdf.mesh:Time for computing derivatives: 0.5889317989349365
DEBUG:gustaf:<Faces> setting vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> setting faces
DEBUG:analysis.geometry:Tetrahedralizing surface mesh
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Volumes> setting vertices
DEBUG:gustaf:<Volumes> returning vertex_data
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:optimization.opti:Writing surface mesh to simulation/tmp9o14vsar/simulation_2/surf2.inp
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning vertex_data
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Faces> setting vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> setting faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:analysis.geometry:Exporting mesh with 29553 elements, 9397 vertices, 844 boundaries with marker 1, 1796 boundaries with marker 2, and 15048 boundaries with marker 3.
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=163)
           2	LOAD_GLOBAL(arg=0, lineno=165)
           4	LOAD_GLOBAL(arg=1, lineno=165)
           6	LOAD_FAST(arg=0, lineno=165)
           8	LOAD_DEREF(arg=0, lineno=165)
          10	BINARY_SUBTRACT(arg=None, lineno=165)
          12	LOAD_CONST(arg=1, lineno=165)
          14	BINARY_POWER(arg=None, lineno=165)
          16	CALL_FUNCTION(arg=1, lineno=165)
          18	CALL_FUNCTION(arg=1, lineno=165)
          20	STORE_FAST(arg=1, lineno=165)
          22	LOAD_FAST(arg=1, lineno=166)
          24	LOAD_DEREF(arg=2, lineno=166)
          26	COMPARE_OP(arg=0, lineno=166)
          28	POP_JUMP_IF_FALSE(arg=58, lineno=166)
          30	LOAD_GLOBAL(arg=2, lineno=167)
          32	LOAD_METHOD(arg=3, lineno=167)
          34	LOAD_DEREF(arg=1, lineno=167)
          36	LOAD_CONST(arg=2, lineno=167)
          38	BINARY_SUBSCR(arg=None, lineno=167)
          40	LOAD_DEREF(arg=1, lineno=167)
          42	LOAD_CONST(arg=3, lineno=167)
          44	BINARY_SUBSCR(arg=None, lineno=167)
          46	LOAD_DEREF(arg=1, lineno=167)
          48	LOAD_CONST(arg=1, lineno=167)
          50	BINARY_SUBSCR(arg=None, lineno=167)
          52	BUILD_TUPLE(arg=3, lineno=167)
          54	CALL_METHOD(arg=1, lineno=167)
          56	RETURN_VALUE(arg=None, lineno=167)
>         58	LOAD_GLOBAL(arg=2, lineno=169)
          60	LOAD_METHOD(arg=3, lineno=169)
          62	LOAD_CONST(arg=4, lineno=169)
          64	CALL_METHOD(arg=1, lineno=169)
          66	RETURN_VALUE(arg=None, lineno=169)
          68	LOAD_CONST(arg=0, lineno=169)
          70	RETURN_VALUE(arg=None, lineno=169)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=163)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=165)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$ptx6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$ptx6.2', '$8load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$10binary_subtract.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=BINARY_POWER(arg=None, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$10binary_subtract.4', '$const12.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$14binary_power.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$16call_function.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=STORE_FAST(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$18call_function.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=166)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_DEREF(arg=2, lineno=166)
DEBUG:numba.core.byteflow:stack ['$cr22.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=COMPARE_OP(arg=0, lineno=166)
DEBUG:numba.core.byteflow:stack ['$cr22.9', '$24load_deref.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=58, lineno=166)
DEBUG:numba.core.byteflow:stack ['$26compare_op.11']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=30 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=167)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_METHOD(arg=3, lineno=167)
DEBUG:numba.core.byteflow:stack ['$30load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_DEREF(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$34load_deref.2']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$34load_deref.2', '$const36.3']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_DEREF(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_CONST(arg=3, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$40load_deref.5']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$40load_deref.5', '$const42.6']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_DEREF(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$44binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_CONST(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$44binary_subscr.7', '$46load_deref.8']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$44binary_subscr.7', '$46load_deref.8', '$const48.9']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=BUILD_TUPLE(arg=3, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$44binary_subscr.7', '$50binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=CALL_METHOD(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$52build_tuple.11']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=167)
DEBUG:numba.core.byteflow:stack ['$54call_method.12']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=58 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_GLOBAL(arg=2, lineno=169)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_METHOD(arg=3, lineno=169)
DEBUG:numba.core.byteflow:stack ['$58load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_CONST(arg=4, lineno=169)
DEBUG:numba.core.byteflow:stack ['$60load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=169)
DEBUG:numba.core.byteflow:stack ['$60load_method.1', '$const62.2']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=169)
DEBUG:numba.core.byteflow:stack ['$64call_method.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$ptx6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'lhs': '$ptx6.2', 'rhs': '$8load_deref.3', 'res': '$10binary_subtract.4'}), (12, {'res': '$const12.5'}), (14, {'lhs': '$10binary_subtract.4', 'rhs': '$const12.5', 'res': '$14binary_power.6'}), (16, {'func': '$4load_global.1', 'args': ['$14binary_power.6'], 'res': '$16call_function.7'}), (18, {'func': '$2load_global.0', 'args': ['$16call_function.7'], 'res': '$18call_function.8'}), (20, {'value': '$18call_function.8'}), (22, {'res': '$cr22.9'}), (24, {'res': '$24load_deref.10'}), (26, {'lhs': '$cr22.9', 'rhs': '$24load_deref.10', 'res': '$26compare_op.11'}), (28, {'pred': '$26compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 58: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.0'}), (32, {'item': '$30load_global.0', 'res': '$32load_method.1'}), (34, {'res': '$34load_deref.2'}), (36, {'res': '$const36.3'}), (38, {'index': '$const36.3', 'target': '$34load_deref.2', 'res': '$38binary_subscr.4'}), (40, {'res': '$40load_deref.5'}), (42, {'res': '$const42.6'}), (44, {'index': '$const42.6', 'target': '$40load_deref.5', 'res': '$44binary_subscr.7'}), (46, {'res': '$46load_deref.8'}), (48, {'res': '$const48.9'}), (50, {'index': '$const48.9', 'target': '$46load_deref.8', 'res': '$50binary_subscr.10'}), (52, {'items': ['$38binary_subscr.4', '$44binary_subscr.7', '$50binary_subscr.10'], 'res': '$52build_tuple.11'}), (54, {'func': '$32load_method.1', 'args': ['$52build_tuple.11'], 'res': '$54call_method.12'}), (56, {'retval': '$54call_method.12', 'castval': '$56return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$58load_global.0'}), (60, {'item': '$58load_global.0', 'res': '$60load_method.1'}), (62, {'res': '$const62.2'}), (64, {'func': '$60load_method.1', 'args': ['$const62.2'], 'res': '$64call_method.3'}), (66, {'retval': '$64call_method.3', 'castval': '$66return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptx = arg(0, name=ptx)                   ['ptx']
    $2load_global.0 = global(sqrt: <ufunc 'sqrt'>) ['$2load_global.0']
    $4load_global.1 = global(sum: <built-in function sum>) ['$4load_global.1']
    $8load_deref.3 = freevar(center: [2.  0.5 0.5]) ['$8load_deref.3']
    $10binary_subtract.4 = ptx - $8load_deref.3 ['$10binary_subtract.4', '$8load_deref.3', 'ptx']
    $const12.5 = const(int, 2)               ['$const12.5']
    $14binary_power.6 = $10binary_subtract.4 ** $const12.5 ['$10binary_subtract.4', '$14binary_power.6', '$const12.5']
    $16call_function.7 = call $4load_global.1($14binary_power.6, func=$4load_global.1, args=[Var($14binary_power.6, MFEMLinearElasticity.py:165)], kws=(), vararg=None, varkwarg=None, target=None) ['$14binary_power.6', '$16call_function.7', '$4load_global.1']
    cr = call $2load_global.0($16call_function.7, func=$2load_global.0, args=[Var($16call_function.7, MFEMLinearElasticity.py:165)], kws=(), vararg=None, varkwarg=None, target=None) ['$16call_function.7', '$2load_global.0', 'cr']
    $24load_deref.10 = freevar(r: 0.1)       ['$24load_deref.10']
    $26compare_op.11 = cr < $24load_deref.10 ['$24load_deref.10', '$26compare_op.11', 'cr']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.11, func=bool28, args=(Var($26compare_op.11, MFEMLinearElasticity.py:166),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.11', '$28pred', 'bool28']
    branch $28pred, 30, 58                   ['$28pred']
label 30:
    $30load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$30load_global.0']
    $32load_method.1 = getattr(value=$30load_global.0, attr=array) ['$30load_global.0', '$32load_method.1']
    $34load_deref.2 = freevar(force: [100.   0.   0.]) ['$34load_deref.2']
    $const36.3 = const(int, 0)               ['$const36.3']
    $38binary_subscr.4 = getitem(value=$34load_deref.2, index=$const36.3, fn=<built-in function getitem>) ['$34load_deref.2', '$38binary_subscr.4', '$const36.3']
    $40load_deref.5 = freevar(force: [100.   0.   0.]) ['$40load_deref.5']
    $const42.6 = const(int, 1)               ['$const42.6']
    $44binary_subscr.7 = getitem(value=$40load_deref.5, index=$const42.6, fn=<built-in function getitem>) ['$40load_deref.5', '$44binary_subscr.7', '$const42.6']
    $46load_deref.8 = freevar(force: [100.   0.   0.]) ['$46load_deref.8']
    $const48.9 = const(int, 2)               ['$const48.9']
    $50binary_subscr.10 = getitem(value=$46load_deref.8, index=$const48.9, fn=<built-in function getitem>) ['$46load_deref.8', '$50binary_subscr.10', '$const48.9']
    $52build_tuple.11 = build_tuple(items=[Var($38binary_subscr.4, MFEMLinearElasticity.py:167), Var($44binary_subscr.7, MFEMLinearElasticity.py:167), Var($50binary_subscr.10, MFEMLinearElasticity.py:167)]) ['$38binary_subscr.4', '$44binary_subscr.7', '$50binary_subscr.10', '$52build_tuple.11']
    $54call_method.12 = call $32load_method.1($52build_tuple.11, func=$32load_method.1, args=[Var($52build_tuple.11, MFEMLinearElasticity.py:167)], kws=(), vararg=None, varkwarg=None, target=None) ['$32load_method.1', '$52build_tuple.11', '$54call_method.12']
    $56return_value.13 = cast(value=$54call_method.12) ['$54call_method.12', '$56return_value.13']
    return $56return_value.13                ['$56return_value.13']
label 58:
    $58load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$58load_global.0']
    $60load_method.1 = getattr(value=$58load_global.0, attr=array) ['$58load_global.0', '$60load_method.1']
    $const_0.0 = const(float, 0.0)           ['$const_0.0']
    $const_0.0.1 = const(float, 0.0)         ['$const_0.0.1']
    $const_0.0.2 = const(float, 0.0)         ['$const_0.0.2']
    $const62.2 = build_tuple(items=[Var($const_0.0, MFEMLinearElasticity.py:169), Var($const_0.0.1, MFEMLinearElasticity.py:169), Var($const_0.0.2, MFEMLinearElasticity.py:169)]) ['$const62.2', '$const_0.0', '$const_0.0.1', '$const_0.0.2']
    $64call_method.3 = call $60load_method.1($const62.2, func=$60load_method.1, args=[Var($const62.2, MFEMLinearElasticity.py:169)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.1', '$64call_method.3', '$const62.2']
    $66return_value.4 = cast(value=$64call_method.3) ['$64call_method.3', '$66return_value.4']
    return $66return_value.4                 ['$66return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0ece20>
DEBUG:numba.core.ssa:on stmt: ptx = arg(0, name=ptx)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(sqrt: <ufunc 'sqrt'>)
DEBUG:numba.core.ssa:on stmt: $4load_global.1 = global(sum: <built-in function sum>)
DEBUG:numba.core.ssa:on stmt: $8load_deref.3 = freevar(center: [2.  0.5 0.5])
DEBUG:numba.core.ssa:on stmt: $10binary_subtract.4 = ptx - $8load_deref.3
DEBUG:numba.core.ssa:on stmt: $const12.5 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $14binary_power.6 = $10binary_subtract.4 ** $const12.5
DEBUG:numba.core.ssa:on stmt: $16call_function.7 = call $4load_global.1($14binary_power.6, func=$4load_global.1, args=[Var($14binary_power.6, MFEMLinearElasticity.py:165)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: cr = call $2load_global.0($16call_function.7, func=$2load_global.0, args=[Var($16call_function.7, MFEMLinearElasticity.py:165)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $24load_deref.10 = freevar(r: 0.1)
DEBUG:numba.core.ssa:on stmt: $26compare_op.11 = cr < $24load_deref.10
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28($26compare_op.11, func=bool28, args=(Var($26compare_op.11, MFEMLinearElasticity.py:166),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 58
DEBUG:numba.core.ssa:==== SSA block analysis pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0ece20>
DEBUG:numba.core.ssa:on stmt: $30load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $32load_method.1 = getattr(value=$30load_global.0, attr=array)
DEBUG:numba.core.ssa:on stmt: $34load_deref.2 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const36.3 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $38binary_subscr.4 = static_getitem(value=$34load_deref.2, index=0, index_var=$const36.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $40load_deref.5 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const42.6 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $44binary_subscr.7 = static_getitem(value=$40load_deref.5, index=1, index_var=$const42.6, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $46load_deref.8 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const48.9 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $50binary_subscr.10 = static_getitem(value=$46load_deref.8, index=2, index_var=$const48.9, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $52build_tuple.11 = build_tuple(items=[Var($38binary_subscr.4, MFEMLinearElasticity.py:167), Var($44binary_subscr.7, MFEMLinearElasticity.py:167), Var($50binary_subscr.10, MFEMLinearElasticity.py:167)])
DEBUG:numba.core.ssa:on stmt: $54call_method.12 = call $32load_method.1($52build_tuple.11, func=$32load_method.1, args=[Var($52build_tuple.11, MFEMLinearElasticity.py:167)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $56return_value.13 = cast(value=$54call_method.12)
DEBUG:numba.core.ssa:on stmt: return $56return_value.13
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0ece20>
DEBUG:numba.core.ssa:on stmt: $58load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $60load_method.1 = getattr(value=$58load_global.0, attr=array)
DEBUG:numba.core.ssa:on stmt: $const_0.0 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const_0.0.1 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const_0.0.2 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const62.2 = build_tuple(items=[Var($const_0.0, MFEMLinearElasticity.py:169), Var($const_0.0.1, MFEMLinearElasticity.py:169), Var($const_0.0.2, MFEMLinearElasticity.py:169)])
DEBUG:numba.core.ssa:on stmt: $64call_method.3 = call $60load_method.1($const62.2, func=$60load_method.1, args=[Var($const62.2, MFEMLinearElasticity.py:169)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $66return_value.4 = cast(value=$64call_method.3)
DEBUG:numba.core.ssa:on stmt: return $66return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [(<numba.core.ir.Assign object at 0x7f075c0fd3d0>,
                                       0)],
             '$14binary_power.6': [(<numba.core.ir.Assign object at 0x7f075c0fd940>,
                                    0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x7f075c0fdc70>,
                                     0)],
             '$24load_deref.10': [(<numba.core.ir.Assign object at 0x7f075c0fdf10>,
                                   0)],
             '$26compare_op.11': [(<numba.core.ir.Assign object at 0x7f075c0fdfa0>,
                                   0)],
             '$28pred': [(<numba.core.ir.Assign object at 0x7f0761e8c250>, 0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7f075c10cdc0>,
                                  0)],
             '$30load_global.0': [(<numba.core.ir.Assign object at 0x7f075c0e4e50>,
                                   30)],
             '$32load_method.1': [(<numba.core.ir.Assign object at 0x7f075c0f3760>,
                                   30)],
             '$34load_deref.2': [(<numba.core.ir.Assign object at 0x7f075c0f3ac0>,
                                  30)],
             '$38binary_subscr.4': [(<numba.core.ir.Assign object at 0x7f0762071460>,
                                     30)],
             '$40load_deref.5': [(<numba.core.ir.Assign object at 0x7f07620e7ca0>,
                                  30)],
             '$44binary_subscr.7': [(<numba.core.ir.Assign object at 0x7f07620712e0>,
                                     30)],
             '$46load_deref.8': [(<numba.core.ir.Assign object at 0x7f075c059c40>,
                                  30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x7f075c10c040>,
                                  0)],
             '$50binary_subscr.10': [(<numba.core.ir.Assign object at 0x7f0762071fa0>,
                                      30)],
             '$52build_tuple.11': [(<numba.core.ir.Assign object at 0x7f075c1472b0>,
                                    30)],
             '$54call_method.12': [(<numba.core.ir.Assign object at 0x7f075c0ec460>,
                                    30)],
             '$56return_value.13': [(<numba.core.ir.Assign object at 0x7f075c0ec9d0>,
                                     30)],
             '$58load_global.0': [(<numba.core.ir.Assign object at 0x7f075c10c1f0>,
                                   58)],
             '$60load_method.1': [(<numba.core.ir.Assign object at 0x7f075c10c850>,
                                   58)],
             '$64call_method.3': [(<numba.core.ir.Assign object at 0x7f075c1b0580>,
                                   58)],
             '$66return_value.4': [(<numba.core.ir.Assign object at 0x7f075c0ec820>,
                                    58)],
             '$8load_deref.3': [(<numba.core.ir.Assign object at 0x7f075c10cc10>,
                                 0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7f075c0fd610>,
                             0)],
             '$const36.3': [(<numba.core.ir.Assign object at 0x7f075c0f3c40>,
                             30)],
             '$const42.6': [(<numba.core.ir.Assign object at 0x7f07620e71c0>,
                             30)],
             '$const48.9': [(<numba.core.ir.Assign object at 0x7f075c08af40>,
                             30)],
             '$const62.2': [(<numba.core.ir.Assign object at 0x7f075c1b0250>,
                             58)],
             '$const_0.0': [(<numba.core.ir.Assign object at 0x7f075c10c730>,
                             58)],
             '$const_0.0.1': [(<numba.core.ir.Assign object at 0x7f075c1b0fd0>,
                               58)],
             '$const_0.0.2': [(<numba.core.ir.Assign object at 0x7f075c1b0670>,
                               58)],
             'bool28': [(<numba.core.ir.Assign object at 0x7f075c0fd550>, 0)],
             'cr': [(<numba.core.ir.Assign object at 0x7f075c0fda30>, 0)],
             'ptx': [(<numba.core.ir.Assign object at 0x7f075c10c130>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f076206e910>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=1, lineno=1)
           4	LOAD_FAST(arg=0, lineno=1)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	BINARY_POWER(arg=None, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1)
DEBUG:numba.core.byteflow:stack ['$ptx_12.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$ptx_12.0', '$_8load_deref_3_14.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_subtract.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=BINARY_POWER(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_subtract.2', '$const8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$10binary_power.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ptx_12.0'}), (4, {'res': '$_8load_deref_3_14.1'}), (6, {'lhs': '$ptx_12.0', 'rhs': '$_8load_deref_3_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10binary_power.4'}), (12, {'retval': '$10binary_power.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _8load_deref_3_1 = arg(0, name=_8load_deref_3_1) ['_8load_deref_3_1']
    ptx_1 = arg(1, name=ptx_1)               ['ptx_1']
    $6binary_subtract.2 = ptx_1 - _8load_deref_3_1 ['$6binary_subtract.2', '_8load_deref_3_1', 'ptx_1']
    $const8.3 = const(int, 2)                ['$const8.3']
    $10binary_power.4 = $6binary_subtract.2 ** $const8.3 ['$10binary_power.4', '$6binary_subtract.2', '$const8.3']
    $12return_value.5 = cast(value=$10binary_power.4) ['$10binary_power.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c132250>
DEBUG:numba.core.ssa:on stmt: _8load_deref_3_1 = arg(0, name=_8load_deref_3_1)
DEBUG:numba.core.ssa:on stmt: ptx_1 = arg(1, name=ptx_1)
DEBUG:numba.core.ssa:on stmt: $6binary_subtract.2 = ptx_1 - _8load_deref_3_1
DEBUG:numba.core.ssa:on stmt: $const8.3 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $10binary_power.4 = $6binary_subtract.2 ** $const8.3
DEBUG:numba.core.ssa:on stmt: $12return_value.5 = cast(value=$10binary_power.4)
DEBUG:numba.core.ssa:on stmt: return $12return_value.5
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10binary_power.4': [(<numba.core.ir.Assign object at 0x7f0761f4bc10>,
                                    0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x7f0761f4b4f0>,
                                    0)],
             '$6binary_subtract.2': [(<numba.core.ir.Assign object at 0x7f075c134370>,
                                      0)],
             '$const8.3': [(<numba.core.ir.Assign object at 0x7f0761f4bd00>,
                            0)],
             '_8load_deref_3_1': [(<numba.core.ir.Assign object at 0x7f075c134e50>,
                                   0)],
             'ptx_1': [(<numba.core.ir.Assign object at 0x7f075c134eb0>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f075c132250>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_FAST(arg=1, lineno=2)
           8	BUILD_TUPLE(arg=1, lineno=2)
          10	LOAD_GLOBAL(arg=1, lineno=2)
          12	LOAD_ATTR(arg=2, lineno=2)
          14	CALL_FUNCTION(arg=3, lineno=2)
          16	STORE_FAST(arg=0, lineno=2)
          18	LOAD_GLOBAL(arg=0, lineno=3)
          20	LOAD_FAST(arg=3, lineno=3)
          22	LOAD_CONST(arg=1, lineno=3)
          24	LOAD_GLOBAL(arg=1, lineno=3)
          26	LOAD_ATTR(arg=2, lineno=3)
          28	CALL_FUNCTION(arg=3, lineno=3)
          30	STORE_FAST(arg=4, lineno=3)
          32	LOAD_CONST(arg=2, lineno=4)
          34	STORE_FAST(arg=5, lineno=4)
          36	LOAD_GLOBAL(arg=3, lineno=5)
          38	LOAD_FAST(arg=0, lineno=5)
          40	BUILD_LIST(arg=1, lineno=5)
          42	LOAD_FAST(arg=5, lineno=5)
          44	LIST_EXTEND(arg=1, lineno=5)
          46	LIST_TO_TUPLE(arg=None, lineno=5)
          48	CALL_FUNCTION_EX(arg=0, lineno=5)
          50	STORE_FAST(arg=6, lineno=5)
          52	LOAD_GLOBAL(arg=4, lineno=6)
          54	LOAD_CONST(arg=3, lineno=6)
          56	CALL_FUNCTION(arg=1, lineno=6)
          58	GET_ITER(arg=None, lineno=6)
>         60	FOR_ITER(arg=20, lineno=6)
          62	STORE_FAST(arg=7, lineno=6)
          64	LOAD_FAST(arg=6, lineno=7)
          66	LOAD_FAST(arg=7, lineno=7)
          68	BUILD_TUPLE(arg=1, lineno=7)
          70	BINARY_SUBSCR(arg=None, lineno=7)
          72	LOAD_FAST(arg=4, lineno=7)
          74	LOAD_FAST(arg=7, lineno=7)
          76	BUILD_TUPLE(arg=1, lineno=7)
          78	STORE_SUBSCR(arg=None, lineno=7)
          80	JUMP_ABSOLUTE(arg=60, lineno=7)
>         82	LOAD_CONST(arg=0, lineno=7)
          84	RETURN_VALUE(arg=None, lineno=7)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=BUILD_TUPLE(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$sdim6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3', '$10load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=3, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3', '$12load_attr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack ['$14call_function.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_ATTR(arg=2, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9', '$24load_global.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9', '$26load_attr.11']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=4, lineno=3)
DEBUG:numba.core.byteflow:stack ['$28call_function.12']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=5, lineno=4)
DEBUG:numba.core.byteflow:stack ['$const32.13']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_GLOBAL(arg=3, lineno=5)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BUILD_LIST(arg=1, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$ptx38.15']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=5, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LIST_EXTEND(arg=1, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16', '$params42.17']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LIST_TO_TUPLE(arg=None, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=CALL_FUNCTION_EX(arg=0, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$46list_to_tuple.20']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=6, lineno=5)
DEBUG:numba.core.byteflow:stack ['$48call_function_ex.21']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_GLOBAL(arg=4, lineno=6)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=6)
DEBUG:numba.core.byteflow:stack ['$52load_global.22']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=6)
DEBUG:numba.core.byteflow:stack ['$52load_global.22', '$const54.23']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=GET_ITER(arg=None, lineno=6)
DEBUG:numba.core.byteflow:stack ['$56call_function.24']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi60.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=60 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=60, inst=FOR_ITER(arg=20, lineno=6)
DEBUG:numba.core.byteflow:stack ['$phi60.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=82 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_CONST(arg=0, lineno=7)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$const82.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=62 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=62, inst=STORE_FAST(arg=7, lineno=6)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=6, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=7, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=1, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2', '$i066.3']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2', '$68build_tuple.4']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=7, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=BUILD_TUPLE(arg=1, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6', '$i074.7']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=STORE_SUBSCR(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6', '$76build_tuple.8']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=JUMP_ABSOLUTE(arg=60, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=82 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$ptx4.1'}), (6, {'res': '$sdim6.2'}), (8, {'items': ['$sdim6.2'], 'res': '$8build_tuple.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$2load_global.0', 'args': ['$ptx4.1', '$8build_tuple.3', '$12load_attr.5'], 'res': '$14call_function.6'}), (16, {'value': '$14call_function.6'}), (18, {'res': '$18load_global.7'}), (20, {'res': '$out_20.8'}), (22, {'res': '$const22.9'}), (24, {'res': '$24load_global.10'}), (26, {'item': '$24load_global.10', 'res': '$26load_attr.11'}), (28, {'func': '$18load_global.7', 'args': ['$out_20.8', '$const22.9', '$26load_attr.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12'}), (32, {'res': '$const32.13'}), (34, {'value': '$const32.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$ptx38.15'}), (40, {'items': ['$ptx38.15'], 'res': '$40build_list.16'}), (42, {'res': '$params42.17'}), (44, {'target': '$40build_list.16', 'value': '$params42.17', 'extendvar': '$44list_extend.18', 'res': '$44list_extend.19'}), (46, {'const_list': '$40build_list.16', 'res': '$46list_to_tuple.20'}), (48, {'func': '$36load_global.14', 'vararg': '$46list_to_tuple.20', 'varkwarg': None, 'res': '$48call_function_ex.21'}), (50, {'value': '$48call_function_ex.21'}), (52, {'res': '$52load_global.22'}), (54, {'res': '$const54.23'}), (56, {'func': '$52load_global.22', 'args': ['$const54.23'], 'res': '$56call_function.24'}), (58, {'value': '$56call_function.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$ret64.2'}), (66, {'res': '$i066.3'}), (68, {'items': ['$i066.3'], 'res': '$68build_tuple.4'}), (70, {'index': '$68build_tuple.4', 'target': '$ret64.2', 'res': '$70binary_subscr.5'}), (72, {'res': '$out72.6'}), (74, {'res': '$i074.7'}), (76, {'items': ['$i074.7'], 'res': '$76build_tuple.8'}), (78, {'target': '$out72.6', 'index': '$76build_tuple.8', 'value': '$70binary_subscr.5'}), (80, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$const82.0'}), (84, {'retval': '$const82.0', 'castval': '$84return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptx = arg(0, name=ptx)                   ['ptx']
    sdim = arg(1, name=sdim)                 ['sdim']
    data = arg(2, name=data)                 ['data']
    out_ = arg(3, name=out_)                 ['out_']
    $2load_global.0 = global(farray: <function farray at 0x7f077493f0d0>) ['$2load_global.0']
    $8build_tuple.3 = build_tuple(items=[Var(sdim, <string>:1)]) ['$8build_tuple.3', 'sdim']
    $10load_global.4 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=float64) ['$10load_global.4', '$12load_attr.5']
    ptx.1 = call $2load_global.0(ptx, $8build_tuple.3, $12load_attr.5, func=$2load_global.0, args=[Var(ptx, <string>:1), Var($8build_tuple.3, <string>:2), Var($12load_attr.5, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_attr.5', '$2load_global.0', '$8build_tuple.3', 'ptx', 'ptx.1']
    $18load_global.7 = global(farray: <function farray at 0x7f077493f0d0>) ['$18load_global.7']
    $const_3 = const(int, 3)                 ['$const_3']
    $const22.9 = build_tuple(items=[Var($const_3, <string>:3)]) ['$const22.9', '$const_3']
    $24load_global.10 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$24load_global.10']
    $26load_attr.11 = getattr(value=$24load_global.10, attr=float64) ['$24load_global.10', '$26load_attr.11']
    out = call $18load_global.7(out_, $const22.9, $26load_attr.11, func=$18load_global.7, args=[Var(out_, <string>:1), Var($const22.9, <string>:3), Var($26load_attr.11, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_global.7', '$26load_attr.11', '$const22.9', 'out', 'out_']
    params = build_tuple(items=[])           ['params']
    $36load_global.14 = global(inner_func: CPUDispatcher(<function VolumeForceCoefficient3D.<locals>.coeff at 0x7f075c1bf1f0>)) ['$36load_global.14']
    $40build_list.16 = build_list(items=[Var(ptx.1, <string>:2)]) ['$40build_list.16', 'ptx.1']
    $44list_extend.18 = getattr(value=$40build_list.16, attr=extend) ['$40build_list.16', '$44list_extend.18']
    $44list_extend.19 = call $44list_extend.18(params, func=$44list_extend.18, args=(Var(params, <string>:4),), kws=(), vararg=None, varkwarg=None, target=None) ['$44list_extend.18', '$44list_extend.19', 'params']
    $46list_to_tuple.20 = list_to_tuple(info=('$40build_list.16',)) ['$46list_to_tuple.20']
    ret = call $36load_global.14(*$46list_to_tuple.20, func=$36load_global.14, args=[], kws=[], vararg=$46list_to_tuple.20, varkwarg=None, target=None) ['$36load_global.14', '$46list_to_tuple.20', 'ret']
    $52load_global.22 = global(range: <class 'range'>) ['$52load_global.22']
    $const54.23 = const(int, 3)              ['$const54.23']
    $56call_function.24 = call $52load_global.22($const54.23, func=$52load_global.22, args=[Var($const54.23, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_global.22', '$56call_function.24', '$const54.23']
    $58get_iter.25 = getiter(value=$56call_function.24) ['$56call_function.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 82             ['$60for_iter.3']
label 62:
    i0 = $phi62.1                            ['$phi62.1', 'i0']
    $68build_tuple.4 = build_tuple(items=[Var(i0, <string>:6)]) ['$68build_tuple.4', 'i0']
    $70binary_subscr.5 = getitem(value=ret, index=$68build_tuple.4, fn=<built-in function getitem>) ['$68build_tuple.4', '$70binary_subscr.5', 'ret']
    $76build_tuple.8 = build_tuple(items=[Var(i0, <string>:6)]) ['$76build_tuple.8', 'i0']
    out[$76build_tuple.8] = $70binary_subscr.5 ['$70binary_subscr.5', '$76build_tuple.8', 'out']
    jump 60                                  []
label 82:
    $const82.0 = const(NoneType, None)       ['$const82.0']
    $84return_value.1 = cast(value=$const82.0) ['$84return_value.1', '$const82.0']
    return $84return_value.1                 ['$84return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761f48160>
DEBUG:numba.core.ssa:on stmt: ptx = arg(0, name=ptx)
DEBUG:numba.core.ssa:on stmt: sdim = arg(1, name=sdim)
DEBUG:numba.core.ssa:on stmt: data = arg(2, name=data)
DEBUG:numba.core.ssa:on stmt: out_ = arg(3, name=out_)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(farray: <function farray at 0x7f077493f0d0>)
DEBUG:numba.core.ssa:on stmt: $8build_tuple.3 = build_tuple(items=[Var(sdim, <string>:1)])
DEBUG:numba.core.ssa:on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=float64)
DEBUG:numba.core.ssa:on stmt: ptx.1 = call $2load_global.0(ptx, $8build_tuple.3, $12load_attr.5, func=$2load_global.0, args=[Var(ptx, <string>:1), Var($8build_tuple.3, <string>:2), Var($12load_attr.5, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $18load_global.7 = global(farray: <function farray at 0x7f077493f0d0>)
DEBUG:numba.core.ssa:on stmt: $const_3 = const(int, 3)
DEBUG:numba.core.ssa:on stmt: $const22.9 = build_tuple(items=[Var($const_3, <string>:3)])
DEBUG:numba.core.ssa:on stmt: $24load_global.10 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_attr.11 = getattr(value=$24load_global.10, attr=float64)
DEBUG:numba.core.ssa:on stmt: out = call $18load_global.7(out_, $const22.9, $26load_attr.11, func=$18load_global.7, args=[Var(out_, <string>:1), Var($const22.9, <string>:3), Var($26load_attr.11, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: params = build_tuple(items=[])
DEBUG:numba.core.ssa:on stmt: $36load_global.14 = global(inner_func: CPUDispatcher(<function VolumeForceCoefficient3D.<locals>.coeff at 0x7f075c1bf1f0>))
DEBUG:numba.core.ssa:on stmt: $40build_list.16 = build_tuple(items=[Var(ptx.1, <string>:2)])
DEBUG:numba.core.ssa:on stmt: $_list_extend_gv_tuple = global(tuple: <class 'tuple'>)
DEBUG:numba.core.ssa:on stmt: $44list_extend.18_var_params = call $_list_extend_gv_tuple(params, func=$_list_extend_gv_tuple, args=(Var(params, <string>:4),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $44list_extend.19 = $40build_list.16 + $44list_extend.18_var_params
DEBUG:numba.core.ssa:on stmt: $46list_to_tuple.20 = $44list_extend.19
DEBUG:numba.core.ssa:on stmt: ret = call $36load_global.14(*$46list_to_tuple.20, func=$36load_global.14, args=[], kws=[], vararg=$46list_to_tuple.20, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $52load_global.22 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $const54.23 = const(int, 3)
DEBUG:numba.core.ssa:on stmt: $56call_function.24 = call $52load_global.22($const54.23, func=$52load_global.22, args=[Var($const54.23, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58get_iter.25 = getiter(value=$56call_function.24)
DEBUG:numba.core.ssa:on stmt: $phi60.0 = $58get_iter.25
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761f48160>
DEBUG:numba.core.ssa:on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG:numba.core.ssa:on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi62.1 = $60for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $60for_iter.3, 62, 82
DEBUG:numba.core.ssa:==== SSA block analysis pass on 62
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761f48160>
DEBUG:numba.core.ssa:on stmt: i0 = $phi62.1
DEBUG:numba.core.ssa:on stmt: $68build_tuple.4 = build_tuple(items=[Var(i0, <string>:6)])
DEBUG:numba.core.ssa:on stmt: $70binary_subscr.5 = getitem(value=ret, index=$68build_tuple.4, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $76build_tuple.8 = build_tuple(items=[Var(i0, <string>:6)])
DEBUG:numba.core.ssa:on stmt: out[$76build_tuple.8] = $70binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761f48160>
DEBUG:numba.core.ssa:on stmt: $const82.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $84return_value.1 = cast(value=$const82.0)
DEBUG:numba.core.ssa:on stmt: return $84return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.4': [(<numba.core.ir.Assign object at 0x7f0762076a30>,
                                   0)],
             '$12load_attr.5': [(<numba.core.ir.Assign object at 0x7f0762009ca0>,
                                 0)],
             '$18load_global.7': [(<numba.core.ir.Assign object at 0x7f0762009fa0>,
                                   0)],
             '$24load_global.10': [(<numba.core.ir.Assign object at 0x7f07303bc520>,
                                    0)],
             '$26load_attr.11': [(<numba.core.ir.Assign object at 0x7f07303bc6a0>,
                                  0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7f075c1b0370>,
                                  0)],
             '$36load_global.14': [(<numba.core.ir.Assign object at 0x7f07303bcd60>,
                                    0)],
             '$40build_list.16': [(<numba.core.ir.Assign object at 0x7f07303c22e0>,
                                   0)],
             '$44list_extend.18_var_params': [(<numba.core.ir.Assign object at 0x7f07303c2550>,
                                               0)],
             '$44list_extend.19': [(<numba.core.ir.Assign object at 0x7f07303c2610>,
                                    0)],
             '$46list_to_tuple.20': [(<numba.core.ir.Assign object at 0x7f07303c22b0>,
                                      0)],
             '$52load_global.22': [(<numba.core.ir.Assign object at 0x7f07303be9a0>,
                                    0)],
             '$56call_function.24': [(<numba.core.ir.Assign object at 0x7f07303bed00>,
                                      0)],
             '$58get_iter.25': [(<numba.core.ir.Assign object at 0x7f07303bee20>,
                                 0)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x7f07303be820>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x7f07303bef70>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x7f07303c00d0>,
                                60)],
             '$68build_tuple.4': [(<numba.core.ir.Assign object at 0x7f07303c0790>,
                                   62)],
             '$70binary_subscr.5': [(<numba.core.ir.Assign object at 0x7f07303c0910>,
                                     62)],
             '$76build_tuple.8': [(<numba.core.ir.Assign object at 0x7f07303c0cd0>,
                                   62)],
             '$84return_value.1': [(<numba.core.ir.Assign object at 0x7f07303c20a0>,
                                    82)],
             '$8build_tuple.3': [(<numba.core.ir.Assign object at 0x7f0762089eb0>,
                                  0)],
             '$_list_extend_gv_tuple': [(<numba.core.ir.Assign object at 0x7f07303c2400>,
                                         0)],
             '$const22.9': [(<numba.core.ir.Assign object at 0x7f07303bc3a0>,
                             0)],
             '$const54.23': [(<numba.core.ir.Assign object at 0x7f07303beb20>,
                              0)],
             '$const82.0': [(<numba.core.ir.Assign object at 0x7f07303c0ee0>,
                             82)],
             '$const_3': [(<numba.core.ir.Assign object at 0x7f07303bc2b0>, 0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x7f075c1b0d90>, 0)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x7f075c0a6820>,
                           60)],
             'data': [(<numba.core.ir.Assign object at 0x7f075c10ce80>, 0)],
             'i0': [(<numba.core.ir.Assign object at 0x7f07303c03a0>, 62)],
             'out': [(<numba.core.ir.Assign object at 0x7f07303bc880>, 0)],
             'out_': [(<numba.core.ir.Assign object at 0x7f075c1b0460>, 0)],
             'params': [(<numba.core.ir.Assign object at 0x7f07303bcac0>, 0)],
             'ptx': [(<numba.core.ir.Assign object at 0x7f075c0a6ee0>, 0)],
             'ptx.1': [(<numba.core.ir.Assign object at 0x7f0762009d60>, 0)],
             'ret': [(<numba.core.ir.Assign object at 0x7f07303be730>, 0)],
             'sdim': [(<numba.core.ir.Assign object at 0x7f075c10c670>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f0761f48160>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=174)
           2	LOAD_FAST(arg=0, lineno=176)
           4	LOAD_CONST(arg=1, lineno=176)
           6	BINARY_SUBSCR(arg=None, lineno=176)
           8	LOAD_DEREF(arg=2, lineno=176)
          10	COMPARE_OP(arg=4, lineno=176)
          12	POP_JUMP_IF_FALSE(arg=66, lineno=176)
          14	LOAD_FAST(arg=0, lineno=176)
          16	LOAD_CONST(arg=1, lineno=176)
          18	BINARY_SUBSCR(arg=None, lineno=176)
          20	LOAD_DEREF(arg=1, lineno=176)
          22	COMPARE_OP(arg=0, lineno=176)
          24	POP_JUMP_IF_FALSE(arg=66, lineno=176)
          26	LOAD_FAST(arg=0, lineno=176)
          28	LOAD_CONST(arg=2, lineno=176)
          30	BINARY_SUBSCR(arg=None, lineno=176)
          32	LOAD_DEREF(arg=3, lineno=176)
          34	COMPARE_OP(arg=4, lineno=176)
          36	POP_JUMP_IF_FALSE(arg=66, lineno=176)
          38	LOAD_GLOBAL(arg=0, lineno=177)
          40	LOAD_METHOD(arg=1, lineno=177)
          42	LOAD_DEREF(arg=0, lineno=177)
          44	LOAD_CONST(arg=1, lineno=177)
          46	BINARY_SUBSCR(arg=None, lineno=177)
          48	LOAD_DEREF(arg=0, lineno=177)
          50	LOAD_CONST(arg=3, lineno=177)
          52	BINARY_SUBSCR(arg=None, lineno=177)
          54	LOAD_DEREF(arg=0, lineno=177)
          56	LOAD_CONST(arg=2, lineno=177)
          58	BINARY_SUBSCR(arg=None, lineno=177)
          60	BUILD_TUPLE(arg=3, lineno=177)
          62	CALL_METHOD(arg=1, lineno=177)
          64	RETURN_VALUE(arg=None, lineno=177)
>         66	LOAD_GLOBAL(arg=0, lineno=179)
          68	LOAD_METHOD(arg=1, lineno=179)
          70	LOAD_CONST(arg=4, lineno=179)
          72	CALL_METHOD(arg=1, lineno=179)
          74	RETURN_VALUE(arg=None, lineno=179)
          76	LOAD_CONST(arg=0, lineno=179)
          78	RETURN_VALUE(arg=None, lineno=179)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=174)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=176)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_DEREF(arg=2, lineno=176)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=COMPARE_OP(arg=4, lineno=176)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2', '$8load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=POP_JUMP_IF_FALSE(arg=66, lineno=176)
DEBUG:numba.core.byteflow:stack ['$10compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=14 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=176)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx14.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx14.0', '$const16.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_DEREF(arg=1, lineno=176)
DEBUG:numba.core.byteflow:stack ['$18binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=176)
DEBUG:numba.core.byteflow:stack ['$18binary_subscr.2', '$20load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=66, lineno=176)
DEBUG:numba.core.byteflow:stack ['$22compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=66 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_GLOBAL(arg=0, lineno=179)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_METHOD(arg=1, lineno=179)
DEBUG:numba.core.byteflow:stack ['$66load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=179)
DEBUG:numba.core.byteflow:stack ['$68load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=CALL_METHOD(arg=1, lineno=179)
DEBUG:numba.core.byteflow:stack ['$68load_method.1', '$const70.2']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=179)
DEBUG:numba.core.byteflow:stack ['$72call_method.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=26 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=176)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx26.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx26.0', '$const28.1']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_DEREF(arg=3, lineno=176)
DEBUG:numba.core.byteflow:stack ['$30binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=COMPARE_OP(arg=4, lineno=176)
DEBUG:numba.core.byteflow:stack ['$30binary_subscr.2', '$32load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=POP_JUMP_IF_FALSE(arg=66, lineno=176)
DEBUG:numba.core.byteflow:stack ['$34compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=38 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=38 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_GLOBAL(arg=0, lineno=177)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_METHOD(arg=1, lineno=177)
DEBUG:numba.core.byteflow:stack ['$38load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_DEREF(arg=0, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$42load_deref.2']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$42load_deref.2', '$const44.3']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$48load_deref.5']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=BINARY_SUBSCR(arg=None, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$48load_deref.5', '$const50.6']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_DEREF(arg=0, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$52binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$52binary_subscr.7', '$54load_deref.8']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$52binary_subscr.7', '$54load_deref.8', '$const56.9']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BUILD_TUPLE(arg=3, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$52binary_subscr.7', '$58binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=CALL_METHOD(arg=1, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$60build_tuple.11']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=177)
DEBUG:numba.core.byteflow:stack ['$62call_method.12']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ptx2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$ptx2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$8load_deref.3'}), (10, {'lhs': '$6binary_subscr.2', 'rhs': '$8load_deref.3', 'res': '$10compare_op.4'}), (12, {'pred': '$10compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: (), 66: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$ptx14.0'}), (16, {'res': '$const16.1'}), (18, {'index': '$const16.1', 'target': '$ptx14.0', 'res': '$18binary_subscr.2'}), (20, {'res': '$20load_deref.3'}), (22, {'lhs': '$18binary_subscr.2', 'rhs': '$20load_deref.3', 'res': '$22compare_op.4'}), (24, {'pred': '$22compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 66: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$ptx26.0'}), (28, {'res': '$const28.1'}), (30, {'index': '$const28.1', 'target': '$ptx26.0', 'res': '$30binary_subscr.2'}), (32, {'res': '$32load_deref.3'}), (34, {'lhs': '$30binary_subscr.2', 'rhs': '$32load_deref.3', 'res': '$34compare_op.4'}), (36, {'pred': '$34compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 66: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$38load_global.0'}), (40, {'item': '$38load_global.0', 'res': '$40load_method.1'}), (42, {'res': '$42load_deref.2'}), (44, {'res': '$const44.3'}), (46, {'index': '$const44.3', 'target': '$42load_deref.2', 'res': '$46binary_subscr.4'}), (48, {'res': '$48load_deref.5'}), (50, {'res': '$const50.6'}), (52, {'index': '$const50.6', 'target': '$48load_deref.5', 'res': '$52binary_subscr.7'}), (54, {'res': '$54load_deref.8'}), (56, {'res': '$const56.9'}), (58, {'index': '$const56.9', 'target': '$54load_deref.8', 'res': '$58binary_subscr.10'}), (60, {'items': ['$46binary_subscr.4', '$52binary_subscr.7', '$58binary_subscr.10'], 'res': '$60build_tuple.11'}), (62, {'func': '$40load_method.1', 'args': ['$60build_tuple.11'], 'res': '$62call_method.12'}), (64, {'retval': '$62call_method.12', 'castval': '$64return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$66load_global.0'}), (68, {'item': '$66load_global.0', 'res': '$68load_method.1'}), (70, {'res': '$const70.2'}), (72, {'func': '$68load_method.1', 'args': ['$const70.2'], 'res': '$72call_method.3'}), (74, {'retval': '$72call_method.3', 'castval': '$74return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptx = arg(0, name=ptx)                   ['ptx']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=ptx, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'ptx']
    $8load_deref.3 = freevar(xmin: 1.9)      ['$8load_deref.3']
    $10compare_op.4 = $6binary_subscr.2 > $8load_deref.3 ['$10compare_op.4', '$6binary_subscr.2', '$8load_deref.3']
    bool12 = global(bool: <class 'bool'>)    ['bool12']
    $12pred = call bool12($10compare_op.4, func=bool12, args=(Var($10compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None) ['$10compare_op.4', '$12pred', 'bool12']
    branch $12pred, 14, 66                   ['$12pred']
label 14:
    $const16.1 = const(int, 0)               ['$const16.1']
    $18binary_subscr.2 = getitem(value=ptx, index=$const16.1, fn=<built-in function getitem>) ['$18binary_subscr.2', '$const16.1', 'ptx']
    $20load_deref.3 = freevar(xmax: 2.0)     ['$20load_deref.3']
    $22compare_op.4 = $18binary_subscr.2 < $20load_deref.3 ['$18binary_subscr.2', '$20load_deref.3', '$22compare_op.4']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.4, func=bool24, args=(Var($22compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.4', '$24pred', 'bool24']
    branch $24pred, 26, 66                   ['$24pred']
label 26:
    $const28.1 = const(int, 2)               ['$const28.1']
    $30binary_subscr.2 = getitem(value=ptx, index=$const28.1, fn=<built-in function getitem>) ['$30binary_subscr.2', '$const28.1', 'ptx']
    $32load_deref.3 = freevar(zmin: 0.0)     ['$32load_deref.3']
    $34compare_op.4 = $30binary_subscr.2 > $32load_deref.3 ['$30binary_subscr.2', '$32load_deref.3', '$34compare_op.4']
    bool36 = global(bool: <class 'bool'>)    ['bool36']
    $36pred = call bool36($34compare_op.4, func=bool36, args=(Var($34compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None) ['$34compare_op.4', '$36pred', 'bool36']
    branch $36pred, 38, 66                   ['$36pred']
label 38:
    $38load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$38load_global.0']
    $40load_method.1 = getattr(value=$38load_global.0, attr=array) ['$38load_global.0', '$40load_method.1']
    $42load_deref.2 = freevar(force: [100.   0.   0.]) ['$42load_deref.2']
    $const44.3 = const(int, 0)               ['$const44.3']
    $46binary_subscr.4 = getitem(value=$42load_deref.2, index=$const44.3, fn=<built-in function getitem>) ['$42load_deref.2', '$46binary_subscr.4', '$const44.3']
    $48load_deref.5 = freevar(force: [100.   0.   0.]) ['$48load_deref.5']
    $const50.6 = const(int, 1)               ['$const50.6']
    $52binary_subscr.7 = getitem(value=$48load_deref.5, index=$const50.6, fn=<built-in function getitem>) ['$48load_deref.5', '$52binary_subscr.7', '$const50.6']
    $54load_deref.8 = freevar(force: [100.   0.   0.]) ['$54load_deref.8']
    $const56.9 = const(int, 2)               ['$const56.9']
    $58binary_subscr.10 = getitem(value=$54load_deref.8, index=$const56.9, fn=<built-in function getitem>) ['$54load_deref.8', '$58binary_subscr.10', '$const56.9']
    $60build_tuple.11 = build_tuple(items=[Var($46binary_subscr.4, MFEMLinearElasticity.py:177), Var($52binary_subscr.7, MFEMLinearElasticity.py:177), Var($58binary_subscr.10, MFEMLinearElasticity.py:177)]) ['$46binary_subscr.4', '$52binary_subscr.7', '$58binary_subscr.10', '$60build_tuple.11']
    $62call_method.12 = call $40load_method.1($60build_tuple.11, func=$40load_method.1, args=[Var($60build_tuple.11, MFEMLinearElasticity.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$40load_method.1', '$60build_tuple.11', '$62call_method.12']
    $64return_value.13 = cast(value=$62call_method.12) ['$62call_method.12', '$64return_value.13']
    return $64return_value.13                ['$64return_value.13']
label 66:
    $66load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$66load_global.0']
    $68load_method.1 = getattr(value=$66load_global.0, attr=array) ['$66load_global.0', '$68load_method.1']
    $const_0.0 = const(float, 0.0)           ['$const_0.0']
    $const_0.0.1 = const(float, 0.0)         ['$const_0.0.1']
    $const_0.0.2 = const(float, 0.0)         ['$const_0.0.2']
    $const70.2 = build_tuple(items=[Var($const_0.0, MFEMLinearElasticity.py:179), Var($const_0.0.1, MFEMLinearElasticity.py:179), Var($const_0.0.2, MFEMLinearElasticity.py:179)]) ['$const70.2', '$const_0.0', '$const_0.0.1', '$const_0.0.2']
    $72call_method.3 = call $68load_method.1($const70.2, func=$68load_method.1, args=[Var($const70.2, MFEMLinearElasticity.py:179)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_method.1', '$72call_method.3', '$const70.2']
    $74return_value.4 = cast(value=$72call_method.3) ['$72call_method.3', '$74return_value.4']
    return $74return_value.4                 ['$74return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0fd070>
DEBUG:numba.core.ssa:on stmt: ptx = arg(0, name=ptx)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $6binary_subscr.2 = static_getitem(value=ptx, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $8load_deref.3 = freevar(xmin: 1.9)
DEBUG:numba.core.ssa:on stmt: $10compare_op.4 = $6binary_subscr.2 > $8load_deref.3
DEBUG:numba.core.ssa:on stmt: bool12 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $12pred = call bool12($10compare_op.4, func=bool12, args=(Var($10compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $12pred, 14, 66
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0fd070>
DEBUG:numba.core.ssa:on stmt: $const16.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $18binary_subscr.2 = static_getitem(value=ptx, index=0, index_var=$const16.1, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20load_deref.3 = freevar(xmax: 2.0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.4 = $18binary_subscr.2 < $20load_deref.3
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.4, func=bool24, args=(Var($22compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 66
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0fd070>
DEBUG:numba.core.ssa:on stmt: $const28.1 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $30binary_subscr.2 = static_getitem(value=ptx, index=2, index_var=$const28.1, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $32load_deref.3 = freevar(zmin: 0.0)
DEBUG:numba.core.ssa:on stmt: $34compare_op.4 = $30binary_subscr.2 > $32load_deref.3
DEBUG:numba.core.ssa:on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $36pred = call bool36($34compare_op.4, func=bool36, args=(Var($34compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $36pred, 38, 66
DEBUG:numba.core.ssa:==== SSA block analysis pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0fd070>
DEBUG:numba.core.ssa:on stmt: $38load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $40load_method.1 = getattr(value=$38load_global.0, attr=array)
DEBUG:numba.core.ssa:on stmt: $42load_deref.2 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const44.3 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $46binary_subscr.4 = static_getitem(value=$42load_deref.2, index=0, index_var=$const44.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $48load_deref.5 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const50.6 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $52binary_subscr.7 = static_getitem(value=$48load_deref.5, index=1, index_var=$const50.6, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $54load_deref.8 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const56.9 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $58binary_subscr.10 = static_getitem(value=$54load_deref.8, index=2, index_var=$const56.9, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $60build_tuple.11 = build_tuple(items=[Var($46binary_subscr.4, MFEMLinearElasticity.py:177), Var($52binary_subscr.7, MFEMLinearElasticity.py:177), Var($58binary_subscr.10, MFEMLinearElasticity.py:177)])
DEBUG:numba.core.ssa:on stmt: $62call_method.12 = call $40load_method.1($60build_tuple.11, func=$40load_method.1, args=[Var($60build_tuple.11, MFEMLinearElasticity.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64return_value.13 = cast(value=$62call_method.12)
DEBUG:numba.core.ssa:on stmt: return $64return_value.13
DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c0fd070>
DEBUG:numba.core.ssa:on stmt: $66load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $68load_method.1 = getattr(value=$66load_global.0, attr=array)
DEBUG:numba.core.ssa:on stmt: $const_0.0 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const_0.0.1 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const_0.0.2 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const70.2 = build_tuple(items=[Var($const_0.0, MFEMLinearElasticity.py:179), Var($const_0.0.1, MFEMLinearElasticity.py:179), Var($const_0.0.2, MFEMLinearElasticity.py:179)])
DEBUG:numba.core.ssa:on stmt: $72call_method.3 = call $68load_method.1($const70.2, func=$68load_method.1, args=[Var($const70.2, MFEMLinearElasticity.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $74return_value.4 = cast(value=$72call_method.3)
DEBUG:numba.core.ssa:on stmt: return $74return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [(<numba.core.ir.Assign object at 0x7f075c1c9c40>,
                                  0)],
             '$12pred': [(<numba.core.ir.Assign object at 0x7f075c1c9a30>, 0)],
             '$18binary_subscr.2': [(<numba.core.ir.Assign object at 0x7f07303cec70>,
                                     14)],
             '$20load_deref.3': [(<numba.core.ir.Assign object at 0x7f075c1c9e80>,
                                  14)],
             '$22compare_op.4': [(<numba.core.ir.Assign object at 0x7f075c15cfa0>,
                                  14)],
             '$24pred': [(<numba.core.ir.Assign object at 0x7f07620e7f40>, 14)],
             '$30binary_subscr.2': [(<numba.core.ir.Assign object at 0x7f07303ce160>,
                                     26)],
             '$32load_deref.3': [(<numba.core.ir.Assign object at 0x7f0762009640>,
                                  26)],
             '$34compare_op.4': [(<numba.core.ir.Assign object at 0x7f0762009100>,
                                  26)],
             '$36pred': [(<numba.core.ir.Assign object at 0x7f07303c8b20>, 26)],
             '$38load_global.0': [(<numba.core.ir.Assign object at 0x7f07303c8a60>,
                                   38)],
             '$40load_method.1': [(<numba.core.ir.Assign object at 0x7f07303c8c70>,
                                   38)],
             '$42load_deref.2': [(<numba.core.ir.Assign object at 0x7f07303c8f40>,
                                  38)],
             '$46binary_subscr.4': [(<numba.core.ir.Assign object at 0x7f07303ce400>,
                                     38)],
             '$48load_deref.5': [(<numba.core.ir.Assign object at 0x7f07303d7b50>,
                                  38)],
             '$52binary_subscr.7': [(<numba.core.ir.Assign object at 0x7f07303ce0a0>,
                                     38)],
             '$54load_deref.8': [(<numba.core.ir.Assign object at 0x7f07303befd0>,
                                  38)],
             '$58binary_subscr.10': [(<numba.core.ir.Assign object at 0x7f07303ce550>,
                                      38)],
             '$60build_tuple.11': [(<numba.core.ir.Assign object at 0x7f0762076a00>,
                                    38)],
             '$62call_method.12': [(<numba.core.ir.Assign object at 0x7f075c10c7f0>,
                                    38)],
             '$64return_value.13': [(<numba.core.ir.Assign object at 0x7f07303c0760>,
                                     38)],
             '$66load_global.0': [(<numba.core.ir.Assign object at 0x7f07303c00a0>,
                                   66)],
             '$68load_method.1': [(<numba.core.ir.Assign object at 0x7f07303c02e0>,
                                   66)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7f07303ce700>,
                                    0)],
             '$72call_method.3': [(<numba.core.ir.Assign object at 0x7f075c04e880>,
                                   66)],
             '$74return_value.4': [(<numba.core.ir.Assign object at 0x7f075c04e940>,
                                    66)],
             '$8load_deref.3': [(<numba.core.ir.Assign object at 0x7f075c1c9610>,
                                 0)],
             '$const16.1': [(<numba.core.ir.Assign object at 0x7f075c1c9d30>,
                             14)],
             '$const28.1': [(<numba.core.ir.Assign object at 0x7f075c0a6ee0>,
                             26)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7f075c1b0c70>,
                            0)],
             '$const44.3': [(<numba.core.ir.Assign object at 0x7f07303c8b50>,
                             38)],
             '$const50.6': [(<numba.core.ir.Assign object at 0x7f07303c0250>,
                             38)],
             '$const56.9': [(<numba.core.ir.Assign object at 0x7f07303c2670>,
                             38)],
             '$const70.2': [(<numba.core.ir.Assign object at 0x7f07303bca90>,
                             66)],
             '$const_0.0': [(<numba.core.ir.Assign object at 0x7f07303bc3a0>,
                             66)],
             '$const_0.0.1': [(<numba.core.ir.Assign object at 0x7f07303bc490>,
                               66)],
             '$const_0.0.2': [(<numba.core.ir.Assign object at 0x7f07303bc880>,
                               66)],
             'bool12': [(<numba.core.ir.Assign object at 0x7f075c1c9340>, 0)],
             'bool24': [(<numba.core.ir.Assign object at 0x7f075c132520>, 14)],
             'bool36': [(<numba.core.ir.Assign object at 0x7f075c059970>, 26)],
             'ptx': [(<numba.core.ir.Assign object at 0x7f075c1b03d0>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f075c0fd070>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_FAST(arg=1, lineno=2)
           8	BUILD_TUPLE(arg=1, lineno=2)
          10	LOAD_GLOBAL(arg=1, lineno=2)
          12	LOAD_ATTR(arg=2, lineno=2)
          14	CALL_FUNCTION(arg=3, lineno=2)
          16	STORE_FAST(arg=0, lineno=2)
          18	LOAD_GLOBAL(arg=0, lineno=3)
          20	LOAD_FAST(arg=3, lineno=3)
          22	LOAD_CONST(arg=1, lineno=3)
          24	LOAD_GLOBAL(arg=1, lineno=3)
          26	LOAD_ATTR(arg=2, lineno=3)
          28	CALL_FUNCTION(arg=3, lineno=3)
          30	STORE_FAST(arg=4, lineno=3)
          32	LOAD_CONST(arg=2, lineno=4)
          34	STORE_FAST(arg=5, lineno=4)
          36	LOAD_GLOBAL(arg=3, lineno=5)
          38	LOAD_FAST(arg=0, lineno=5)
          40	BUILD_LIST(arg=1, lineno=5)
          42	LOAD_FAST(arg=5, lineno=5)
          44	LIST_EXTEND(arg=1, lineno=5)
          46	LIST_TO_TUPLE(arg=None, lineno=5)
          48	CALL_FUNCTION_EX(arg=0, lineno=5)
          50	STORE_FAST(arg=6, lineno=5)
          52	LOAD_GLOBAL(arg=4, lineno=6)
          54	LOAD_CONST(arg=3, lineno=6)
          56	CALL_FUNCTION(arg=1, lineno=6)
          58	GET_ITER(arg=None, lineno=6)
>         60	FOR_ITER(arg=20, lineno=6)
          62	STORE_FAST(arg=7, lineno=6)
          64	LOAD_FAST(arg=6, lineno=7)
          66	LOAD_FAST(arg=7, lineno=7)
          68	BUILD_TUPLE(arg=1, lineno=7)
          70	BINARY_SUBSCR(arg=None, lineno=7)
          72	LOAD_FAST(arg=4, lineno=7)
          74	LOAD_FAST(arg=7, lineno=7)
          76	BUILD_TUPLE(arg=1, lineno=7)
          78	STORE_SUBSCR(arg=None, lineno=7)
          80	JUMP_ABSOLUTE(arg=60, lineno=7)
>         82	LOAD_CONST(arg=0, lineno=7)
          84	RETURN_VALUE(arg=None, lineno=7)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=BUILD_TUPLE(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$sdim6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3', '$10load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=3, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3', '$12load_attr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack ['$14call_function.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_ATTR(arg=2, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9', '$24load_global.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9', '$26load_attr.11']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=4, lineno=3)
DEBUG:numba.core.byteflow:stack ['$28call_function.12']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=5, lineno=4)
DEBUG:numba.core.byteflow:stack ['$const32.13']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_GLOBAL(arg=3, lineno=5)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BUILD_LIST(arg=1, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$ptx38.15']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=5, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LIST_EXTEND(arg=1, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16', '$params42.17']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LIST_TO_TUPLE(arg=None, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=CALL_FUNCTION_EX(arg=0, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$46list_to_tuple.20']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=6, lineno=5)
DEBUG:numba.core.byteflow:stack ['$48call_function_ex.21']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_GLOBAL(arg=4, lineno=6)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=6)
DEBUG:numba.core.byteflow:stack ['$52load_global.22']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=6)
DEBUG:numba.core.byteflow:stack ['$52load_global.22', '$const54.23']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=GET_ITER(arg=None, lineno=6)
DEBUG:numba.core.byteflow:stack ['$56call_function.24']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi60.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=60 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=60, inst=FOR_ITER(arg=20, lineno=6)
DEBUG:numba.core.byteflow:stack ['$phi60.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=82 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_CONST(arg=0, lineno=7)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$const82.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=62 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=62, inst=STORE_FAST(arg=7, lineno=6)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=6, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=7, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=1, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2', '$i066.3']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2', '$68build_tuple.4']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=7, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=BUILD_TUPLE(arg=1, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6', '$i074.7']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=STORE_SUBSCR(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6', '$76build_tuple.8']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=JUMP_ABSOLUTE(arg=60, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=82 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$ptx4.1'}), (6, {'res': '$sdim6.2'}), (8, {'items': ['$sdim6.2'], 'res': '$8build_tuple.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$2load_global.0', 'args': ['$ptx4.1', '$8build_tuple.3', '$12load_attr.5'], 'res': '$14call_function.6'}), (16, {'value': '$14call_function.6'}), (18, {'res': '$18load_global.7'}), (20, {'res': '$out_20.8'}), (22, {'res': '$const22.9'}), (24, {'res': '$24load_global.10'}), (26, {'item': '$24load_global.10', 'res': '$26load_attr.11'}), (28, {'func': '$18load_global.7', 'args': ['$out_20.8', '$const22.9', '$26load_attr.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12'}), (32, {'res': '$const32.13'}), (34, {'value': '$const32.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$ptx38.15'}), (40, {'items': ['$ptx38.15'], 'res': '$40build_list.16'}), (42, {'res': '$params42.17'}), (44, {'target': '$40build_list.16', 'value': '$params42.17', 'extendvar': '$44list_extend.18', 'res': '$44list_extend.19'}), (46, {'const_list': '$40build_list.16', 'res': '$46list_to_tuple.20'}), (48, {'func': '$36load_global.14', 'vararg': '$46list_to_tuple.20', 'varkwarg': None, 'res': '$48call_function_ex.21'}), (50, {'value': '$48call_function_ex.21'}), (52, {'res': '$52load_global.22'}), (54, {'res': '$const54.23'}), (56, {'func': '$52load_global.22', 'args': ['$const54.23'], 'res': '$56call_function.24'}), (58, {'value': '$56call_function.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$ret64.2'}), (66, {'res': '$i066.3'}), (68, {'items': ['$i066.3'], 'res': '$68build_tuple.4'}), (70, {'index': '$68build_tuple.4', 'target': '$ret64.2', 'res': '$70binary_subscr.5'}), (72, {'res': '$out72.6'}), (74, {'res': '$i074.7'}), (76, {'items': ['$i074.7'], 'res': '$76build_tuple.8'}), (78, {'target': '$out72.6', 'index': '$76build_tuple.8', 'value': '$70binary_subscr.5'}), (80, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$const82.0'}), (84, {'retval': '$const82.0', 'castval': '$84return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptx = arg(0, name=ptx)                   ['ptx']
    sdim = arg(1, name=sdim)                 ['sdim']
    data = arg(2, name=data)                 ['data']
    out_ = arg(3, name=out_)                 ['out_']
    $2load_global.0 = global(farray: <function farray at 0x7f077493f0d0>) ['$2load_global.0']
    $8build_tuple.3 = build_tuple(items=[Var(sdim, <string>:1)]) ['$8build_tuple.3', 'sdim']
    $10load_global.4 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=float64) ['$10load_global.4', '$12load_attr.5']
    ptx.1 = call $2load_global.0(ptx, $8build_tuple.3, $12load_attr.5, func=$2load_global.0, args=[Var(ptx, <string>:1), Var($8build_tuple.3, <string>:2), Var($12load_attr.5, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_attr.5', '$2load_global.0', '$8build_tuple.3', 'ptx', 'ptx.1']
    $18load_global.7 = global(farray: <function farray at 0x7f077493f0d0>) ['$18load_global.7']
    $const_3 = const(int, 3)                 ['$const_3']
    $const22.9 = build_tuple(items=[Var($const_3, <string>:3)]) ['$const22.9', '$const_3']
    $24load_global.10 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$24load_global.10']
    $26load_attr.11 = getattr(value=$24load_global.10, attr=float64) ['$24load_global.10', '$26load_attr.11']
    out = call $18load_global.7(out_, $const22.9, $26load_attr.11, func=$18load_global.7, args=[Var(out_, <string>:1), Var($const22.9, <string>:3), Var($26load_attr.11, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_global.7', '$26load_attr.11', '$const22.9', 'out', 'out_']
    params = build_tuple(items=[])           ['params']
    $36load_global.14 = global(inner_func: CPUDispatcher(<function SurfaceForceCoefficient3D.<locals>.coeff at 0x7f07303af3a0>)) ['$36load_global.14']
    $40build_list.16 = build_list(items=[Var(ptx.1, <string>:2)]) ['$40build_list.16', 'ptx.1']
    $44list_extend.18 = getattr(value=$40build_list.16, attr=extend) ['$40build_list.16', '$44list_extend.18']
    $44list_extend.19 = call $44list_extend.18(params, func=$44list_extend.18, args=(Var(params, <string>:4),), kws=(), vararg=None, varkwarg=None, target=None) ['$44list_extend.18', '$44list_extend.19', 'params']
    $46list_to_tuple.20 = list_to_tuple(info=('$40build_list.16',)) ['$46list_to_tuple.20']
    ret = call $36load_global.14(*$46list_to_tuple.20, func=$36load_global.14, args=[], kws=[], vararg=$46list_to_tuple.20, varkwarg=None, target=None) ['$36load_global.14', '$46list_to_tuple.20', 'ret']
    $52load_global.22 = global(range: <class 'range'>) ['$52load_global.22']
    $const54.23 = const(int, 3)              ['$const54.23']
    $56call_function.24 = call $52load_global.22($const54.23, func=$52load_global.22, args=[Var($const54.23, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_global.22', '$56call_function.24', '$const54.23']
    $58get_iter.25 = getiter(value=$56call_function.24) ['$56call_function.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 82             ['$60for_iter.3']
label 62:
    i0 = $phi62.1                            ['$phi62.1', 'i0']
    $68build_tuple.4 = build_tuple(items=[Var(i0, <string>:6)]) ['$68build_tuple.4', 'i0']
    $70binary_subscr.5 = getitem(value=ret, index=$68build_tuple.4, fn=<built-in function getitem>) ['$68build_tuple.4', '$70binary_subscr.5', 'ret']
    $76build_tuple.8 = build_tuple(items=[Var(i0, <string>:6)]) ['$76build_tuple.8', 'i0']
    out[$76build_tuple.8] = $70binary_subscr.5 ['$70binary_subscr.5', '$76build_tuple.8', 'out']
    jump 60                                  []
label 82:
    $const82.0 = const(NoneType, None)       ['$const82.0']
    $84return_value.1 = cast(value=$const82.0) ['$84return_value.1', '$const82.0']
    return $84return_value.1                 ['$84return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c1b02e0>
DEBUG:numba.core.ssa:on stmt: ptx = arg(0, name=ptx)
DEBUG:numba.core.ssa:on stmt: sdim = arg(1, name=sdim)
DEBUG:numba.core.ssa:on stmt: data = arg(2, name=data)
DEBUG:numba.core.ssa:on stmt: out_ = arg(3, name=out_)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(farray: <function farray at 0x7f077493f0d0>)
DEBUG:numba.core.ssa:on stmt: $8build_tuple.3 = build_tuple(items=[Var(sdim, <string>:1)])
DEBUG:numba.core.ssa:on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=float64)
DEBUG:numba.core.ssa:on stmt: ptx.1 = call $2load_global.0(ptx, $8build_tuple.3, $12load_attr.5, func=$2load_global.0, args=[Var(ptx, <string>:1), Var($8build_tuple.3, <string>:2), Var($12load_attr.5, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $18load_global.7 = global(farray: <function farray at 0x7f077493f0d0>)
DEBUG:numba.core.ssa:on stmt: $const_3 = const(int, 3)
DEBUG:numba.core.ssa:on stmt: $const22.9 = build_tuple(items=[Var($const_3, <string>:3)])
DEBUG:numba.core.ssa:on stmt: $24load_global.10 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_attr.11 = getattr(value=$24load_global.10, attr=float64)
DEBUG:numba.core.ssa:on stmt: out = call $18load_global.7(out_, $const22.9, $26load_attr.11, func=$18load_global.7, args=[Var(out_, <string>:1), Var($const22.9, <string>:3), Var($26load_attr.11, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: params = build_tuple(items=[])
DEBUG:numba.core.ssa:on stmt: $36load_global.14 = global(inner_func: CPUDispatcher(<function SurfaceForceCoefficient3D.<locals>.coeff at 0x7f07303af3a0>))
DEBUG:numba.core.ssa:on stmt: $40build_list.16 = build_tuple(items=[Var(ptx.1, <string>:2)])
DEBUG:numba.core.ssa:on stmt: $_list_extend_gv_tuple = global(tuple: <class 'tuple'>)
DEBUG:numba.core.ssa:on stmt: $44list_extend.18_var_params = call $_list_extend_gv_tuple(params, func=$_list_extend_gv_tuple, args=(Var(params, <string>:4),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $44list_extend.19 = $40build_list.16 + $44list_extend.18_var_params
DEBUG:numba.core.ssa:on stmt: $46list_to_tuple.20 = $44list_extend.19
DEBUG:numba.core.ssa:on stmt: ret = call $36load_global.14(*$46list_to_tuple.20, func=$36load_global.14, args=[], kws=[], vararg=$46list_to_tuple.20, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $52load_global.22 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $const54.23 = const(int, 3)
DEBUG:numba.core.ssa:on stmt: $56call_function.24 = call $52load_global.22($const54.23, func=$52load_global.22, args=[Var($const54.23, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58get_iter.25 = getiter(value=$56call_function.24)
DEBUG:numba.core.ssa:on stmt: $phi60.0 = $58get_iter.25
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c1b02e0>
DEBUG:numba.core.ssa:on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG:numba.core.ssa:on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi62.1 = $60for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $60for_iter.3, 62, 82
DEBUG:numba.core.ssa:==== SSA block analysis pass on 62
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c1b02e0>
DEBUG:numba.core.ssa:on stmt: i0 = $phi62.1
DEBUG:numba.core.ssa:on stmt: $68build_tuple.4 = build_tuple(items=[Var(i0, <string>:6)])
DEBUG:numba.core.ssa:on stmt: $70binary_subscr.5 = getitem(value=ret, index=$68build_tuple.4, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $76build_tuple.8 = build_tuple(items=[Var(i0, <string>:6)])
DEBUG:numba.core.ssa:on stmt: out[$76build_tuple.8] = $70binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c1b02e0>
DEBUG:numba.core.ssa:on stmt: $const82.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $84return_value.1 = cast(value=$const82.0)
DEBUG:numba.core.ssa:on stmt: return $84return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.4': [(<numba.core.ir.Assign object at 0x7f0730523490>,
                                   0)],
             '$12load_attr.5': [(<numba.core.ir.Assign object at 0x7f0730523610>,
                                 0)],
             '$18load_global.7': [(<numba.core.ir.Assign object at 0x7f0730523a30>,
                                   0)],
             '$24load_global.10': [(<numba.core.ir.Assign object at 0x7f0730523f70>,
                                    0)],
             '$26load_attr.11': [(<numba.core.ir.Assign object at 0x7f0730525130>,
                                  0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7f073050ff10>,
                                  0)],
             '$36load_global.14': [(<numba.core.ir.Assign object at 0x7f07305257f0>,
                                    0)],
             '$40build_list.16': [(<numba.core.ir.Assign object at 0x7f07303b83d0>,
                                   0)],
             '$44list_extend.18_var_params': [(<numba.core.ir.Assign object at 0x7f07303b8640>,
                                               0)],
             '$44list_extend.19': [(<numba.core.ir.Assign object at 0x7f07303b8700>,
                                    0)],
             '$46list_to_tuple.20': [(<numba.core.ir.Assign object at 0x7f07303b83a0>,
                                      0)],
             '$52load_global.22': [(<numba.core.ir.Assign object at 0x7f0730527430>,
                                    0)],
             '$56call_function.24': [(<numba.core.ir.Assign object at 0x7f0730527790>,
                                      0)],
             '$58get_iter.25': [(<numba.core.ir.Assign object at 0x7f07305278b0>,
                                 0)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x7f07305272b0>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x7f0730527a00>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x7f0730527b20>,
                                60)],
             '$68build_tuple.4': [(<numba.core.ir.Assign object at 0x7f07303bea30>,
                                   62)],
             '$70binary_subscr.5': [(<numba.core.ir.Assign object at 0x7f07304d38e0>,
                                     62)],
             '$76build_tuple.8': [(<numba.core.ir.Assign object at 0x7f0730527dc0>,
                                   62)],
             '$84return_value.1': [(<numba.core.ir.Assign object at 0x7f07303b8190>,
                                    82)],
             '$8build_tuple.3': [(<numba.core.ir.Assign object at 0x7f0730523340>,
                                  0)],
             '$_list_extend_gv_tuple': [(<numba.core.ir.Assign object at 0x7f07303b84f0>,
                                         0)],
             '$const22.9': [(<numba.core.ir.Assign object at 0x7f0730523df0>,
                             0)],
             '$const54.23': [(<numba.core.ir.Assign object at 0x7f07305275b0>,
                              0)],
             '$const82.0': [(<numba.core.ir.Assign object at 0x7f0730527fd0>,
                             82)],
             '$const_3': [(<numba.core.ir.Assign object at 0x7f0730523d00>, 0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x7f0730523100>, 0)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x7f0730525c40>,
                           60)],
             'data': [(<numba.core.ir.Assign object at 0x7f075c0f3700>, 0)],
             'i0': [(<numba.core.ir.Assign object at 0x7f0762022a90>, 62)],
             'out': [(<numba.core.ir.Assign object at 0x7f0730525310>, 0)],
             'out_': [(<numba.core.ir.Assign object at 0x7f073050fe20>, 0)],
             'params': [(<numba.core.ir.Assign object at 0x7f0730525550>, 0)],
             'ptx': [(<numba.core.ir.Assign object at 0x7f076206e8e0>, 0)],
             'ptx.1': [(<numba.core.ir.Assign object at 0x7f07305237f0>, 0)],
             'ret': [(<numba.core.ir.Assign object at 0x7f07305271c0>, 0)],
             'sdim': [(<numba.core.ir.Assign object at 0x7f075c0f36a0>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f075c1b02e0>
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning const_vertices
DEBUG:gustaf:<Faces> returning const_elements
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning const_vertices
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning show_options
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:optimization.opti:Vol: 0.6401, dVol: [-0.00087776  0.01302996  0.00322424  0.03905981 -0.00733951  0.02853611
  0.00311141  0.03908188 -0.00117319  0.01227872 -0.00273929  0.03182458
  0.01065044  0.10184918 -0.01755125  0.06952876  0.01089379  0.1022889
 -0.00325688  0.03223455 -0.00067009  0.0132672   0.00367467  0.03971732
 -0.00729841  0.02903233  0.00365453  0.03943009 -0.00077921  0.01253338
 -0.00725894  0.00974286 -0.05324565  0.03724336 -0.03960579  0.03514975
 -0.04764998  0.03582178 -0.00847846  0.00775279 -0.02104842  0.02061083
 -0.10744021  0.08134544 -0.07731865  0.05940618 -0.10638393  0.08091611
 -0.02142904  0.02055094 -0.00773331  0.01013116 -0.03917207  0.03039764
 -0.02469333  0.02550362 -0.03887483  0.03015792 -0.00848061  0.00817424
 -0.00092864  0.00772389 -0.00909557  0.02984486 -0.0273541   0.03124233
 -0.00589901  0.02953644 -0.00167235  0.00735165 -0.00365337  0.01932496
 -0.00632514  0.06430219 -0.03027641  0.0489962  -0.00559613  0.06431226
 -0.00466837  0.01941349 -0.00117475  0.0088833   0.00078184  0.02551813
 -0.00789132  0.02023201  0.00080301  0.0257204  -0.00155869  0.00857583]
DEBUG:optimization.opti:Compliance: 8.5688, dCompliance: [-1.06199150e-05 -2.31759618e-05 -4.24437465e-05 -8.37350002e-05
 -1.17760207e-05 -3.19846809e-05 -3.74997729e-06 -8.92925046e-06
 -3.21432457e-07 -1.73593267e-06 -3.55556608e-05 -7.42877770e-05
 -1.34506246e-04 -2.67314802e-04 -3.71317871e-05 -1.01402728e-04
 -5.94957999e-06 -5.38267255e-05  1.30700982e-05 -2.88909389e-05
 -1.78626928e-05 -3.61201322e-05 -6.25120417e-05 -1.26393512e-04
 -1.61316609e-05 -4.95363230e-05  1.64779481e-05 -4.39480363e-05
  2.33817482e-05 -2.43843123e-05  1.10052467e-05 -2.67287505e-05
  1.41587456e-05 -4.06807874e-05  5.55779431e-06 -3.99038058e-05
  9.10626662e-07 -5.99122942e-06  2.21069950e-08 -1.41930103e-06
  2.38781937e-05 -7.14555827e-05  3.12751409e-05 -1.23737525e-04
  4.40067045e-06 -9.67203661e-05  2.28882588e-05 -4.15784765e-05
  7.00023996e-06 -3.28821398e-05  9.08773000e-06 -3.32732062e-05
  3.49222691e-06 -5.02822030e-05 -1.86707881e-08 -3.73728791e-05
  5.31175550e-05 -3.51433582e-05  2.42817082e-05 -2.34309986e-05
  1.66547519e-05 -5.15611435e-05  9.50145631e-06 -5.87964578e-05
  1.89405978e-05 -4.12468146e-05  2.58227377e-06 -5.08704291e-06
  1.77098932e-07 -7.41859443e-07  1.61488384e-05 -1.70380942e-04
 -6.94766162e-06 -1.97536503e-04  2.48029924e-05 -8.85599132e-05
  4.08699432e-06 -1.08387202e-05  3.68988298e-07 -4.41416889e-06
  7.33354368e-06 -7.42769489e-05 -9.07224871e-06 -8.26874561e-05
  6.95745196e-06 -3.55591328e-05  1.70608731e-06 -4.69964886e-06
  3.58494517e-07 -3.29962787e-06]
INFO:optimization.opti:Finished iteration 2 with compliance 8.5688033133168 and volume 0.6400959524258616
DEBUG:optimization.opti:Saving simulation results to optimization_runs/opti_double_lattice/simulation_2
INFO:optimization.MMA:It.:    2 | Obj.: 1.187e+01 | Constr.:  1.401e-01 | ch.: 6.125e-01 | C: 8.569e+00
DEBUG:optimization.opti:Computing Solution
DEBUG:optimization.opti:Generating Geometry
DEBUG:deep_sdf.mesh:Querying 18081 DeepSDF points
DEBUG:deep_sdf.mesh:sampling takes: 0.001114
DEBUG:root:torch.cuda.memory_allocated:  35.30MiB | torch.cuda.memory_reserved:  90.00MiB
DEBUG:deep_sdf.mesh:Computing DeepSDF derivatives
DEBUG:deep_sdf.mesh:sampling takes: 0.000497
DEBUG:deep_sdf.mesh:sampling takes: 0.000402
DEBUG:deep_sdf.mesh:sampling takes: 0.000386
DEBUG:deep_sdf.mesh:sampling takes: 0.000375
DEBUG:deep_sdf.mesh:sampling takes: 0.000389
DEBUG:deep_sdf.mesh:sampling takes: 0.000384
DEBUG:deep_sdf.mesh:sampling takes: 0.000379
DEBUG:deep_sdf.mesh:sampling takes: 0.000385
DEBUG:deep_sdf.mesh:sampling takes: 0.000395
DEBUG:deep_sdf.mesh:sampling takes: 0.000386
DEBUG:deep_sdf.mesh:sampling takes: 0.000377
DEBUG:deep_sdf.mesh:sampling takes: 0.000382
DEBUG:deep_sdf.mesh:sampling takes: 0.000381
DEBUG:deep_sdf.mesh:sampling takes: 0.000387
DEBUG:deep_sdf.mesh:sampling takes: 0.000386
DEBUG:deep_sdf.mesh:sampling takes: 0.000385
DEBUG:deep_sdf.mesh:sampling takes: 0.000374
DEBUG:deep_sdf.mesh:sampling takes: 0.000387
DEBUG:deep_sdf.mesh:sampling takes: 0.000386
DEBUG:deep_sdf.mesh:sampling takes: 0.000384
DEBUG:deep_sdf.mesh:sampling takes: 0.000384
DEBUG:deep_sdf.mesh:sampling takes: 0.000381
DEBUG:deep_sdf.mesh:sampling takes: 0.000383
DEBUG:deep_sdf.mesh:sampling takes: 0.000383
DEBUG:deep_sdf.mesh:sampling takes: 0.000387
DEBUG:deep_sdf.mesh:sampling takes: 0.000389
DEBUG:deep_sdf.mesh:sampling takes: 0.000376
DEBUG:deep_sdf.mesh:sampling takes: 0.000390
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000308
DEBUG:deep_sdf.mesh:sampling takes: 0.000298
DEBUG:deep_sdf.mesh:sampling takes: 0.000310
DEBUG:deep_sdf.mesh:sampling takes: 0.000305
DEBUG:deep_sdf.mesh:sampling takes: 0.000313
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000314
DEBUG:deep_sdf.mesh:sampling takes: 0.000317
DEBUG:deep_sdf.mesh:sampling takes: 0.000312
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000307
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000315
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000307
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000315
DEBUG:deep_sdf.mesh:sampling takes: 0.000315
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000310
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000307
DEBUG:deep_sdf.mesh:sampling takes: 0.000339
DEBUG:deep_sdf.mesh:sampling takes: 0.000315
DEBUG:deep_sdf.mesh:sampling takes: 0.000301
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000315
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000312
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000319
DEBUG:deep_sdf.mesh:sampling takes: 0.000364
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:deep_sdf.mesh:sampling takes: 0.000311
DEBUG:deep_sdf.mesh:sampling takes: 0.000314
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000300
DEBUG:deep_sdf.mesh:sampling takes: 0.000308
DEBUG:deep_sdf.mesh:sampling takes: 0.000308
DEBUG:deep_sdf.mesh:sampling takes: 0.000323
DEBUG:deep_sdf.mesh:sampling takes: 0.000318
DEBUG:deep_sdf.mesh:sampling takes: 0.000314
DEBUG:deep_sdf.mesh:sampling takes: 0.000303
DEBUG:deep_sdf.mesh:sampling takes: 0.000310
DEBUG:deep_sdf.mesh:sampling takes: 0.000327
DEBUG:deep_sdf.mesh:sampling takes: 0.000308
DEBUG:deep_sdf.mesh:sampling takes: 0.000304
DEBUG:deep_sdf.mesh:sampling takes: 0.000309
DEBUG:deep_sdf.mesh:sampling takes: 0.000302
DEBUG:deep_sdf.mesh:sampling takes: 0.000301
DEBUG:deep_sdf.mesh:sampling takes: 0.000313
DEBUG:deep_sdf.mesh:sampling takes: 0.000317
DEBUG:deep_sdf.mesh:sampling takes: 0.000306
DEBUG:root:torch.cuda.memory_allocated:  46.87MiB | torch.cuda.memory_reserved:  66.00MiB
DEBUG:deep_sdf.mesh:Time for computing derivatives: 0.5841598510742188
DEBUG:gustaf:<Faces> setting vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> setting faces
DEBUG:analysis.geometry:Tetrahedralizing surface mesh
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Volumes> setting vertices
DEBUG:gustaf:<Volumes> returning vertex_data
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:optimization.opti:Writing surface mesh to simulation/tmpxv9bekoy/simulation_3/surf3.inp
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning vertex_data
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Faces> setting vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> setting faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:analysis.geometry:Exporting mesh with 19706 elements, 7809 vertices, 844 boundaries with marker 1, 1796 boundaries with marker 2, and 12320 boundaries with marker 3.
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning volumes
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=163)
           2	LOAD_GLOBAL(arg=0, lineno=165)
           4	LOAD_GLOBAL(arg=1, lineno=165)
           6	LOAD_FAST(arg=0, lineno=165)
           8	LOAD_DEREF(arg=0, lineno=165)
          10	BINARY_SUBTRACT(arg=None, lineno=165)
          12	LOAD_CONST(arg=1, lineno=165)
          14	BINARY_POWER(arg=None, lineno=165)
          16	CALL_FUNCTION(arg=1, lineno=165)
          18	CALL_FUNCTION(arg=1, lineno=165)
          20	STORE_FAST(arg=1, lineno=165)
          22	LOAD_FAST(arg=1, lineno=166)
          24	LOAD_DEREF(arg=2, lineno=166)
          26	COMPARE_OP(arg=0, lineno=166)
          28	POP_JUMP_IF_FALSE(arg=58, lineno=166)
          30	LOAD_GLOBAL(arg=2, lineno=167)
          32	LOAD_METHOD(arg=3, lineno=167)
          34	LOAD_DEREF(arg=1, lineno=167)
          36	LOAD_CONST(arg=2, lineno=167)
          38	BINARY_SUBSCR(arg=None, lineno=167)
          40	LOAD_DEREF(arg=1, lineno=167)
          42	LOAD_CONST(arg=3, lineno=167)
          44	BINARY_SUBSCR(arg=None, lineno=167)
          46	LOAD_DEREF(arg=1, lineno=167)
          48	LOAD_CONST(arg=1, lineno=167)
          50	BINARY_SUBSCR(arg=None, lineno=167)
          52	BUILD_TUPLE(arg=3, lineno=167)
          54	CALL_METHOD(arg=1, lineno=167)
          56	RETURN_VALUE(arg=None, lineno=167)
>         58	LOAD_GLOBAL(arg=2, lineno=169)
          60	LOAD_METHOD(arg=3, lineno=169)
          62	LOAD_CONST(arg=4, lineno=169)
          64	CALL_METHOD(arg=1, lineno=169)
          66	RETURN_VALUE(arg=None, lineno=169)
          68	LOAD_CONST(arg=0, lineno=169)
          70	RETURN_VALUE(arg=None, lineno=169)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=163)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=165)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$ptx6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$ptx6.2', '$8load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$10binary_subtract.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=BINARY_POWER(arg=None, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$10binary_subtract.4', '$const12.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$14binary_power.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$16call_function.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=STORE_FAST(arg=1, lineno=165)
DEBUG:numba.core.byteflow:stack ['$18call_function.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=166)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_DEREF(arg=2, lineno=166)
DEBUG:numba.core.byteflow:stack ['$cr22.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=COMPARE_OP(arg=0, lineno=166)
DEBUG:numba.core.byteflow:stack ['$cr22.9', '$24load_deref.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=58, lineno=166)
DEBUG:numba.core.byteflow:stack ['$26compare_op.11']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=30 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=167)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_METHOD(arg=3, lineno=167)
DEBUG:numba.core.byteflow:stack ['$30load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_DEREF(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$34load_deref.2']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$34load_deref.2', '$const36.3']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_DEREF(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_CONST(arg=3, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$40load_deref.5']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$40load_deref.5', '$const42.6']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_DEREF(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$44binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_CONST(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$44binary_subscr.7', '$46load_deref.8']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$44binary_subscr.7', '$46load_deref.8', '$const48.9']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=BUILD_TUPLE(arg=3, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$38binary_subscr.4', '$44binary_subscr.7', '$50binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=CALL_METHOD(arg=1, lineno=167)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$52build_tuple.11']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=167)
DEBUG:numba.core.byteflow:stack ['$54call_method.12']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=58 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_GLOBAL(arg=2, lineno=169)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_METHOD(arg=3, lineno=169)
DEBUG:numba.core.byteflow:stack ['$58load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_CONST(arg=4, lineno=169)
DEBUG:numba.core.byteflow:stack ['$60load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=169)
DEBUG:numba.core.byteflow:stack ['$60load_method.1', '$const62.2']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=169)
DEBUG:numba.core.byteflow:stack ['$64call_method.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$ptx6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'lhs': '$ptx6.2', 'rhs': '$8load_deref.3', 'res': '$10binary_subtract.4'}), (12, {'res': '$const12.5'}), (14, {'lhs': '$10binary_subtract.4', 'rhs': '$const12.5', 'res': '$14binary_power.6'}), (16, {'func': '$4load_global.1', 'args': ['$14binary_power.6'], 'res': '$16call_function.7'}), (18, {'func': '$2load_global.0', 'args': ['$16call_function.7'], 'res': '$18call_function.8'}), (20, {'value': '$18call_function.8'}), (22, {'res': '$cr22.9'}), (24, {'res': '$24load_deref.10'}), (26, {'lhs': '$cr22.9', 'rhs': '$24load_deref.10', 'res': '$26compare_op.11'}), (28, {'pred': '$26compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 58: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.0'}), (32, {'item': '$30load_global.0', 'res': '$32load_method.1'}), (34, {'res': '$34load_deref.2'}), (36, {'res': '$const36.3'}), (38, {'index': '$const36.3', 'target': '$34load_deref.2', 'res': '$38binary_subscr.4'}), (40, {'res': '$40load_deref.5'}), (42, {'res': '$const42.6'}), (44, {'index': '$const42.6', 'target': '$40load_deref.5', 'res': '$44binary_subscr.7'}), (46, {'res': '$46load_deref.8'}), (48, {'res': '$const48.9'}), (50, {'index': '$const48.9', 'target': '$46load_deref.8', 'res': '$50binary_subscr.10'}), (52, {'items': ['$38binary_subscr.4', '$44binary_subscr.7', '$50binary_subscr.10'], 'res': '$52build_tuple.11'}), (54, {'func': '$32load_method.1', 'args': ['$52build_tuple.11'], 'res': '$54call_method.12'}), (56, {'retval': '$54call_method.12', 'castval': '$56return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$58load_global.0'}), (60, {'item': '$58load_global.0', 'res': '$60load_method.1'}), (62, {'res': '$const62.2'}), (64, {'func': '$60load_method.1', 'args': ['$const62.2'], 'res': '$64call_method.3'}), (66, {'retval': '$64call_method.3', 'castval': '$66return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptx = arg(0, name=ptx)                   ['ptx']
    $2load_global.0 = global(sqrt: <ufunc 'sqrt'>) ['$2load_global.0']
    $4load_global.1 = global(sum: <built-in function sum>) ['$4load_global.1']
    $8load_deref.3 = freevar(center: [2.  0.5 0.5]) ['$8load_deref.3']
    $10binary_subtract.4 = ptx - $8load_deref.3 ['$10binary_subtract.4', '$8load_deref.3', 'ptx']
    $const12.5 = const(int, 2)               ['$const12.5']
    $14binary_power.6 = $10binary_subtract.4 ** $const12.5 ['$10binary_subtract.4', '$14binary_power.6', '$const12.5']
    $16call_function.7 = call $4load_global.1($14binary_power.6, func=$4load_global.1, args=[Var($14binary_power.6, MFEMLinearElasticity.py:165)], kws=(), vararg=None, varkwarg=None, target=None) ['$14binary_power.6', '$16call_function.7', '$4load_global.1']
    cr = call $2load_global.0($16call_function.7, func=$2load_global.0, args=[Var($16call_function.7, MFEMLinearElasticity.py:165)], kws=(), vararg=None, varkwarg=None, target=None) ['$16call_function.7', '$2load_global.0', 'cr']
    $24load_deref.10 = freevar(r: 0.1)       ['$24load_deref.10']
    $26compare_op.11 = cr < $24load_deref.10 ['$24load_deref.10', '$26compare_op.11', 'cr']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.11, func=bool28, args=(Var($26compare_op.11, MFEMLinearElasticity.py:166),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.11', '$28pred', 'bool28']
    branch $28pred, 30, 58                   ['$28pred']
label 30:
    $30load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$30load_global.0']
    $32load_method.1 = getattr(value=$30load_global.0, attr=array) ['$30load_global.0', '$32load_method.1']
    $34load_deref.2 = freevar(force: [100.   0.   0.]) ['$34load_deref.2']
    $const36.3 = const(int, 0)               ['$const36.3']
    $38binary_subscr.4 = getitem(value=$34load_deref.2, index=$const36.3, fn=<built-in function getitem>) ['$34load_deref.2', '$38binary_subscr.4', '$const36.3']
    $40load_deref.5 = freevar(force: [100.   0.   0.]) ['$40load_deref.5']
    $const42.6 = const(int, 1)               ['$const42.6']
    $44binary_subscr.7 = getitem(value=$40load_deref.5, index=$const42.6, fn=<built-in function getitem>) ['$40load_deref.5', '$44binary_subscr.7', '$const42.6']
    $46load_deref.8 = freevar(force: [100.   0.   0.]) ['$46load_deref.8']
    $const48.9 = const(int, 2)               ['$const48.9']
    $50binary_subscr.10 = getitem(value=$46load_deref.8, index=$const48.9, fn=<built-in function getitem>) ['$46load_deref.8', '$50binary_subscr.10', '$const48.9']
    $52build_tuple.11 = build_tuple(items=[Var($38binary_subscr.4, MFEMLinearElasticity.py:167), Var($44binary_subscr.7, MFEMLinearElasticity.py:167), Var($50binary_subscr.10, MFEMLinearElasticity.py:167)]) ['$38binary_subscr.4', '$44binary_subscr.7', '$50binary_subscr.10', '$52build_tuple.11']
    $54call_method.12 = call $32load_method.1($52build_tuple.11, func=$32load_method.1, args=[Var($52build_tuple.11, MFEMLinearElasticity.py:167)], kws=(), vararg=None, varkwarg=None, target=None) ['$32load_method.1', '$52build_tuple.11', '$54call_method.12']
    $56return_value.13 = cast(value=$54call_method.12) ['$54call_method.12', '$56return_value.13']
    return $56return_value.13                ['$56return_value.13']
label 58:
    $58load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$58load_global.0']
    $60load_method.1 = getattr(value=$58load_global.0, attr=array) ['$58load_global.0', '$60load_method.1']
    $const_0.0 = const(float, 0.0)           ['$const_0.0']
    $const_0.0.1 = const(float, 0.0)         ['$const_0.0.1']
    $const_0.0.2 = const(float, 0.0)         ['$const_0.0.2']
    $const62.2 = build_tuple(items=[Var($const_0.0, MFEMLinearElasticity.py:169), Var($const_0.0.1, MFEMLinearElasticity.py:169), Var($const_0.0.2, MFEMLinearElasticity.py:169)]) ['$const62.2', '$const_0.0', '$const_0.0.1', '$const_0.0.2']
    $64call_method.3 = call $60load_method.1($const62.2, func=$60load_method.1, args=[Var($const62.2, MFEMLinearElasticity.py:169)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.1', '$64call_method.3', '$const62.2']
    $66return_value.4 = cast(value=$64call_method.3) ['$64call_method.3', '$66return_value.4']
    return $66return_value.4                 ['$66return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761ff59a0>
DEBUG:numba.core.ssa:on stmt: ptx = arg(0, name=ptx)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(sqrt: <ufunc 'sqrt'>)
DEBUG:numba.core.ssa:on stmt: $4load_global.1 = global(sum: <built-in function sum>)
DEBUG:numba.core.ssa:on stmt: $8load_deref.3 = freevar(center: [2.  0.5 0.5])
DEBUG:numba.core.ssa:on stmt: $10binary_subtract.4 = ptx - $8load_deref.3
DEBUG:numba.core.ssa:on stmt: $const12.5 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $14binary_power.6 = $10binary_subtract.4 ** $const12.5
DEBUG:numba.core.ssa:on stmt: $16call_function.7 = call $4load_global.1($14binary_power.6, func=$4load_global.1, args=[Var($14binary_power.6, MFEMLinearElasticity.py:165)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: cr = call $2load_global.0($16call_function.7, func=$2load_global.0, args=[Var($16call_function.7, MFEMLinearElasticity.py:165)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $24load_deref.10 = freevar(r: 0.1)
DEBUG:numba.core.ssa:on stmt: $26compare_op.11 = cr < $24load_deref.10
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28($26compare_op.11, func=bool28, args=(Var($26compare_op.11, MFEMLinearElasticity.py:166),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 58
DEBUG:numba.core.ssa:==== SSA block analysis pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761ff59a0>
DEBUG:numba.core.ssa:on stmt: $30load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $32load_method.1 = getattr(value=$30load_global.0, attr=array)
DEBUG:numba.core.ssa:on stmt: $34load_deref.2 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const36.3 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $38binary_subscr.4 = static_getitem(value=$34load_deref.2, index=0, index_var=$const36.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $40load_deref.5 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const42.6 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $44binary_subscr.7 = static_getitem(value=$40load_deref.5, index=1, index_var=$const42.6, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $46load_deref.8 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const48.9 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $50binary_subscr.10 = static_getitem(value=$46load_deref.8, index=2, index_var=$const48.9, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $52build_tuple.11 = build_tuple(items=[Var($38binary_subscr.4, MFEMLinearElasticity.py:167), Var($44binary_subscr.7, MFEMLinearElasticity.py:167), Var($50binary_subscr.10, MFEMLinearElasticity.py:167)])
DEBUG:numba.core.ssa:on stmt: $54call_method.12 = call $32load_method.1($52build_tuple.11, func=$32load_method.1, args=[Var($52build_tuple.11, MFEMLinearElasticity.py:167)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $56return_value.13 = cast(value=$54call_method.12)
DEBUG:numba.core.ssa:on stmt: return $56return_value.13
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761ff59a0>
DEBUG:numba.core.ssa:on stmt: $58load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $60load_method.1 = getattr(value=$58load_global.0, attr=array)
DEBUG:numba.core.ssa:on stmt: $const_0.0 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const_0.0.1 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const_0.0.2 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const62.2 = build_tuple(items=[Var($const_0.0, MFEMLinearElasticity.py:169), Var($const_0.0.1, MFEMLinearElasticity.py:169), Var($const_0.0.2, MFEMLinearElasticity.py:169)])
DEBUG:numba.core.ssa:on stmt: $64call_method.3 = call $60load_method.1($const62.2, func=$60load_method.1, args=[Var($const62.2, MFEMLinearElasticity.py:169)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $66return_value.4 = cast(value=$64call_method.3)
DEBUG:numba.core.ssa:on stmt: return $66return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [(<numba.core.ir.Assign object at 0x7f07620f7640>,
                                       0)],
             '$14binary_power.6': [(<numba.core.ir.Assign object at 0x7f07620944f0>,
                                    0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x7f075c116ac0>,
                                     0)],
             '$24load_deref.10': [(<numba.core.ir.Assign object at 0x7f075c116a60>,
                                   0)],
             '$26compare_op.11': [(<numba.core.ir.Assign object at 0x7f0762221790>,
                                   0)],
             '$28pred': [(<numba.core.ir.Assign object at 0x7f0762214d30>, 0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7f075c1164f0>,
                                  0)],
             '$30load_global.0': [(<numba.core.ir.Assign object at 0x7f07305a3f70>,
                                   30)],
             '$32load_method.1': [(<numba.core.ir.Assign object at 0x7f07305a3d60>,
                                   30)],
             '$34load_deref.2': [(<numba.core.ir.Assign object at 0x7f07305a3310>,
                                  30)],
             '$38binary_subscr.4': [(<numba.core.ir.Assign object at 0x7f0761ff5fd0>,
                                     30)],
             '$40load_deref.5': [(<numba.core.ir.Assign object at 0x7f07305a3610>,
                                  30)],
             '$44binary_subscr.7': [(<numba.core.ir.Assign object at 0x7f0761ff5880>,
                                     30)],
             '$46load_deref.8': [(<numba.core.ir.Assign object at 0x7f07305a33a0>,
                                  30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x7f075c116640>,
                                  0)],
             '$50binary_subscr.10': [(<numba.core.ir.Assign object at 0x7f0761ff5a30>,
                                      30)],
             '$52build_tuple.11': [(<numba.core.ir.Assign object at 0x7f0762000d90>,
                                    30)],
             '$54call_method.12': [(<numba.core.ir.Assign object at 0x7f0762000c70>,
                                    30)],
             '$56return_value.13': [(<numba.core.ir.Assign object at 0x7f0762000d60>,
                                     30)],
             '$58load_global.0': [(<numba.core.ir.Assign object at 0x7f0762000280>,
                                   58)],
             '$60load_method.1': [(<numba.core.ir.Assign object at 0x7f0762000400>,
                                   58)],
             '$64call_method.3': [(<numba.core.ir.Assign object at 0x7f0761ff5220>,
                                   58)],
             '$66return_value.4': [(<numba.core.ir.Assign object at 0x7f0761ff5eb0>,
                                    58)],
             '$8load_deref.3': [(<numba.core.ir.Assign object at 0x7f07620353a0>,
                                 0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7f07620f7910>,
                             0)],
             '$const36.3': [(<numba.core.ir.Assign object at 0x7f07305a39a0>,
                             30)],
             '$const42.6': [(<numba.core.ir.Assign object at 0x7f07305a3820>,
                             30)],
             '$const48.9': [(<numba.core.ir.Assign object at 0x7f07305a3b50>,
                             30)],
             '$const62.2': [(<numba.core.ir.Assign object at 0x7f0762000610>,
                             58)],
             '$const_0.0': [(<numba.core.ir.Assign object at 0x7f0762000b20>,
                             58)],
             '$const_0.0.1': [(<numba.core.ir.Assign object at 0x7f0762000fd0>,
                               58)],
             '$const_0.0.2': [(<numba.core.ir.Assign object at 0x7f0762000be0>,
                               58)],
             'bool28': [(<numba.core.ir.Assign object at 0x7f0762214670>, 0)],
             'cr': [(<numba.core.ir.Assign object at 0x7f075c1161f0>, 0)],
             'ptx': [(<numba.core.ir.Assign object at 0x7f075c116a90>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f07620f7550>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=1, lineno=1)
           4	LOAD_FAST(arg=0, lineno=1)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	BINARY_POWER(arg=None, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1)
DEBUG:numba.core.byteflow:stack ['$ptx_12.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$ptx_12.0', '$_8load_deref_3_14.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_subtract.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=BINARY_POWER(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_subtract.2', '$const8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$10binary_power.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ptx_12.0'}), (4, {'res': '$_8load_deref_3_14.1'}), (6, {'lhs': '$ptx_12.0', 'rhs': '$_8load_deref_3_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10binary_power.4'}), (12, {'retval': '$10binary_power.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _8load_deref_3_1 = arg(0, name=_8load_deref_3_1) ['_8load_deref_3_1']
    ptx_1 = arg(1, name=ptx_1)               ['ptx_1']
    $6binary_subtract.2 = ptx_1 - _8load_deref_3_1 ['$6binary_subtract.2', '_8load_deref_3_1', 'ptx_1']
    $const8.3 = const(int, 2)                ['$const8.3']
    $10binary_power.4 = $6binary_subtract.2 ** $const8.3 ['$10binary_power.4', '$6binary_subtract.2', '$const8.3']
    $12return_value.5 = cast(value=$10binary_power.4) ['$10binary_power.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075c184fa0>
DEBUG:numba.core.ssa:on stmt: _8load_deref_3_1 = arg(0, name=_8load_deref_3_1)
DEBUG:numba.core.ssa:on stmt: ptx_1 = arg(1, name=ptx_1)
DEBUG:numba.core.ssa:on stmt: $6binary_subtract.2 = ptx_1 - _8load_deref_3_1
DEBUG:numba.core.ssa:on stmt: $const8.3 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $10binary_power.4 = $6binary_subtract.2 ** $const8.3
DEBUG:numba.core.ssa:on stmt: $12return_value.5 = cast(value=$10binary_power.4)
DEBUG:numba.core.ssa:on stmt: return $12return_value.5
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10binary_power.4': [(<numba.core.ir.Assign object at 0x7f075c1840d0>,
                                    0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x7f075c1a3940>,
                                    0)],
             '$6binary_subtract.2': [(<numba.core.ir.Assign object at 0x7f075c184520>,
                                      0)],
             '$const8.3': [(<numba.core.ir.Assign object at 0x7f075c184220>,
                            0)],
             '_8load_deref_3_1': [(<numba.core.ir.Assign object at 0x7f075c184a30>,
                                   0)],
             'ptx_1': [(<numba.core.ir.Assign object at 0x7f075c1844c0>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f075c184fa0>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_FAST(arg=1, lineno=2)
           8	BUILD_TUPLE(arg=1, lineno=2)
          10	LOAD_GLOBAL(arg=1, lineno=2)
          12	LOAD_ATTR(arg=2, lineno=2)
          14	CALL_FUNCTION(arg=3, lineno=2)
          16	STORE_FAST(arg=0, lineno=2)
          18	LOAD_GLOBAL(arg=0, lineno=3)
          20	LOAD_FAST(arg=3, lineno=3)
          22	LOAD_CONST(arg=1, lineno=3)
          24	LOAD_GLOBAL(arg=1, lineno=3)
          26	LOAD_ATTR(arg=2, lineno=3)
          28	CALL_FUNCTION(arg=3, lineno=3)
          30	STORE_FAST(arg=4, lineno=3)
          32	LOAD_CONST(arg=2, lineno=4)
          34	STORE_FAST(arg=5, lineno=4)
          36	LOAD_GLOBAL(arg=3, lineno=5)
          38	LOAD_FAST(arg=0, lineno=5)
          40	BUILD_LIST(arg=1, lineno=5)
          42	LOAD_FAST(arg=5, lineno=5)
          44	LIST_EXTEND(arg=1, lineno=5)
          46	LIST_TO_TUPLE(arg=None, lineno=5)
          48	CALL_FUNCTION_EX(arg=0, lineno=5)
          50	STORE_FAST(arg=6, lineno=5)
          52	LOAD_GLOBAL(arg=4, lineno=6)
          54	LOAD_CONST(arg=3, lineno=6)
          56	CALL_FUNCTION(arg=1, lineno=6)
          58	GET_ITER(arg=None, lineno=6)
>         60	FOR_ITER(arg=20, lineno=6)
          62	STORE_FAST(arg=7, lineno=6)
          64	LOAD_FAST(arg=6, lineno=7)
          66	LOAD_FAST(arg=7, lineno=7)
          68	BUILD_TUPLE(arg=1, lineno=7)
          70	BINARY_SUBSCR(arg=None, lineno=7)
          72	LOAD_FAST(arg=4, lineno=7)
          74	LOAD_FAST(arg=7, lineno=7)
          76	BUILD_TUPLE(arg=1, lineno=7)
          78	STORE_SUBSCR(arg=None, lineno=7)
          80	JUMP_ABSOLUTE(arg=60, lineno=7)
>         82	LOAD_CONST(arg=0, lineno=7)
          84	RETURN_VALUE(arg=None, lineno=7)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=BUILD_TUPLE(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$sdim6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3', '$10load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=3, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3', '$12load_attr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack ['$14call_function.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_ATTR(arg=2, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9', '$24load_global.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9', '$26load_attr.11']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=4, lineno=3)
DEBUG:numba.core.byteflow:stack ['$28call_function.12']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=5, lineno=4)
DEBUG:numba.core.byteflow:stack ['$const32.13']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_GLOBAL(arg=3, lineno=5)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BUILD_LIST(arg=1, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$ptx38.15']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=5, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LIST_EXTEND(arg=1, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16', '$params42.17']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LIST_TO_TUPLE(arg=None, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=CALL_FUNCTION_EX(arg=0, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$46list_to_tuple.20']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=6, lineno=5)
DEBUG:numba.core.byteflow:stack ['$48call_function_ex.21']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_GLOBAL(arg=4, lineno=6)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=6)
DEBUG:numba.core.byteflow:stack ['$52load_global.22']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=6)
DEBUG:numba.core.byteflow:stack ['$52load_global.22', '$const54.23']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=GET_ITER(arg=None, lineno=6)
DEBUG:numba.core.byteflow:stack ['$56call_function.24']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi60.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=60 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=60, inst=FOR_ITER(arg=20, lineno=6)
DEBUG:numba.core.byteflow:stack ['$phi60.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=82 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_CONST(arg=0, lineno=7)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$const82.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=62 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=62, inst=STORE_FAST(arg=7, lineno=6)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=6, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=7, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=1, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2', '$i066.3']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2', '$68build_tuple.4']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=7, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=BUILD_TUPLE(arg=1, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6', '$i074.7']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=STORE_SUBSCR(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6', '$76build_tuple.8']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=JUMP_ABSOLUTE(arg=60, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=82 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$ptx4.1'}), (6, {'res': '$sdim6.2'}), (8, {'items': ['$sdim6.2'], 'res': '$8build_tuple.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$2load_global.0', 'args': ['$ptx4.1', '$8build_tuple.3', '$12load_attr.5'], 'res': '$14call_function.6'}), (16, {'value': '$14call_function.6'}), (18, {'res': '$18load_global.7'}), (20, {'res': '$out_20.8'}), (22, {'res': '$const22.9'}), (24, {'res': '$24load_global.10'}), (26, {'item': '$24load_global.10', 'res': '$26load_attr.11'}), (28, {'func': '$18load_global.7', 'args': ['$out_20.8', '$const22.9', '$26load_attr.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12'}), (32, {'res': '$const32.13'}), (34, {'value': '$const32.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$ptx38.15'}), (40, {'items': ['$ptx38.15'], 'res': '$40build_list.16'}), (42, {'res': '$params42.17'}), (44, {'target': '$40build_list.16', 'value': '$params42.17', 'extendvar': '$44list_extend.18', 'res': '$44list_extend.19'}), (46, {'const_list': '$40build_list.16', 'res': '$46list_to_tuple.20'}), (48, {'func': '$36load_global.14', 'vararg': '$46list_to_tuple.20', 'varkwarg': None, 'res': '$48call_function_ex.21'}), (50, {'value': '$48call_function_ex.21'}), (52, {'res': '$52load_global.22'}), (54, {'res': '$const54.23'}), (56, {'func': '$52load_global.22', 'args': ['$const54.23'], 'res': '$56call_function.24'}), (58, {'value': '$56call_function.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$ret64.2'}), (66, {'res': '$i066.3'}), (68, {'items': ['$i066.3'], 'res': '$68build_tuple.4'}), (70, {'index': '$68build_tuple.4', 'target': '$ret64.2', 'res': '$70binary_subscr.5'}), (72, {'res': '$out72.6'}), (74, {'res': '$i074.7'}), (76, {'items': ['$i074.7'], 'res': '$76build_tuple.8'}), (78, {'target': '$out72.6', 'index': '$76build_tuple.8', 'value': '$70binary_subscr.5'}), (80, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$const82.0'}), (84, {'retval': '$const82.0', 'castval': '$84return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptx = arg(0, name=ptx)                   ['ptx']
    sdim = arg(1, name=sdim)                 ['sdim']
    data = arg(2, name=data)                 ['data']
    out_ = arg(3, name=out_)                 ['out_']
    $2load_global.0 = global(farray: <function farray at 0x7f077493f0d0>) ['$2load_global.0']
    $8build_tuple.3 = build_tuple(items=[Var(sdim, <string>:1)]) ['$8build_tuple.3', 'sdim']
    $10load_global.4 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=float64) ['$10load_global.4', '$12load_attr.5']
    ptx.1 = call $2load_global.0(ptx, $8build_tuple.3, $12load_attr.5, func=$2load_global.0, args=[Var(ptx, <string>:1), Var($8build_tuple.3, <string>:2), Var($12load_attr.5, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_attr.5', '$2load_global.0', '$8build_tuple.3', 'ptx', 'ptx.1']
    $18load_global.7 = global(farray: <function farray at 0x7f077493f0d0>) ['$18load_global.7']
    $const_3 = const(int, 3)                 ['$const_3']
    $const22.9 = build_tuple(items=[Var($const_3, <string>:3)]) ['$const22.9', '$const_3']
    $24load_global.10 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$24load_global.10']
    $26load_attr.11 = getattr(value=$24load_global.10, attr=float64) ['$24load_global.10', '$26load_attr.11']
    out = call $18load_global.7(out_, $const22.9, $26load_attr.11, func=$18load_global.7, args=[Var(out_, <string>:1), Var($const22.9, <string>:3), Var($26load_attr.11, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_global.7', '$26load_attr.11', '$const22.9', 'out', 'out_']
    params = build_tuple(items=[])           ['params']
    $36load_global.14 = global(inner_func: CPUDispatcher(<function VolumeForceCoefficient3D.<locals>.coeff at 0x7f0761f20dc0>)) ['$36load_global.14']
    $40build_list.16 = build_list(items=[Var(ptx.1, <string>:2)]) ['$40build_list.16', 'ptx.1']
    $44list_extend.18 = getattr(value=$40build_list.16, attr=extend) ['$40build_list.16', '$44list_extend.18']
    $44list_extend.19 = call $44list_extend.18(params, func=$44list_extend.18, args=(Var(params, <string>:4),), kws=(), vararg=None, varkwarg=None, target=None) ['$44list_extend.18', '$44list_extend.19', 'params']
    $46list_to_tuple.20 = list_to_tuple(info=('$40build_list.16',)) ['$46list_to_tuple.20']
    ret = call $36load_global.14(*$46list_to_tuple.20, func=$36load_global.14, args=[], kws=[], vararg=$46list_to_tuple.20, varkwarg=None, target=None) ['$36load_global.14', '$46list_to_tuple.20', 'ret']
    $52load_global.22 = global(range: <class 'range'>) ['$52load_global.22']
    $const54.23 = const(int, 3)              ['$const54.23']
    $56call_function.24 = call $52load_global.22($const54.23, func=$52load_global.22, args=[Var($const54.23, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_global.22', '$56call_function.24', '$const54.23']
    $58get_iter.25 = getiter(value=$56call_function.24) ['$56call_function.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 82             ['$60for_iter.3']
label 62:
    i0 = $phi62.1                            ['$phi62.1', 'i0']
    $68build_tuple.4 = build_tuple(items=[Var(i0, <string>:6)]) ['$68build_tuple.4', 'i0']
    $70binary_subscr.5 = getitem(value=ret, index=$68build_tuple.4, fn=<built-in function getitem>) ['$68build_tuple.4', '$70binary_subscr.5', 'ret']
    $76build_tuple.8 = build_tuple(items=[Var(i0, <string>:6)]) ['$76build_tuple.8', 'i0']
    out[$76build_tuple.8] = $70binary_subscr.5 ['$70binary_subscr.5', '$76build_tuple.8', 'out']
    jump 60                                  []
label 82:
    $const82.0 = const(NoneType, None)       ['$const82.0']
    $84return_value.1 = cast(value=$const82.0) ['$84return_value.1', '$const82.0']
    return $84return_value.1                 ['$84return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bb4c0>
DEBUG:numba.core.ssa:on stmt: ptx = arg(0, name=ptx)
DEBUG:numba.core.ssa:on stmt: sdim = arg(1, name=sdim)
DEBUG:numba.core.ssa:on stmt: data = arg(2, name=data)
DEBUG:numba.core.ssa:on stmt: out_ = arg(3, name=out_)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(farray: <function farray at 0x7f077493f0d0>)
DEBUG:numba.core.ssa:on stmt: $8build_tuple.3 = build_tuple(items=[Var(sdim, <string>:1)])
DEBUG:numba.core.ssa:on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=float64)
DEBUG:numba.core.ssa:on stmt: ptx.1 = call $2load_global.0(ptx, $8build_tuple.3, $12load_attr.5, func=$2load_global.0, args=[Var(ptx, <string>:1), Var($8build_tuple.3, <string>:2), Var($12load_attr.5, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $18load_global.7 = global(farray: <function farray at 0x7f077493f0d0>)
DEBUG:numba.core.ssa:on stmt: $const_3 = const(int, 3)
DEBUG:numba.core.ssa:on stmt: $const22.9 = build_tuple(items=[Var($const_3, <string>:3)])
DEBUG:numba.core.ssa:on stmt: $24load_global.10 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_attr.11 = getattr(value=$24load_global.10, attr=float64)
DEBUG:numba.core.ssa:on stmt: out = call $18load_global.7(out_, $const22.9, $26load_attr.11, func=$18load_global.7, args=[Var(out_, <string>:1), Var($const22.9, <string>:3), Var($26load_attr.11, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: params = build_tuple(items=[])
DEBUG:numba.core.ssa:on stmt: $36load_global.14 = global(inner_func: CPUDispatcher(<function VolumeForceCoefficient3D.<locals>.coeff at 0x7f0761f20dc0>))
DEBUG:numba.core.ssa:on stmt: $40build_list.16 = build_tuple(items=[Var(ptx.1, <string>:2)])
DEBUG:numba.core.ssa:on stmt: $_list_extend_gv_tuple = global(tuple: <class 'tuple'>)
DEBUG:numba.core.ssa:on stmt: $44list_extend.18_var_params = call $_list_extend_gv_tuple(params, func=$_list_extend_gv_tuple, args=(Var(params, <string>:4),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $44list_extend.19 = $40build_list.16 + $44list_extend.18_var_params
DEBUG:numba.core.ssa:on stmt: $46list_to_tuple.20 = $44list_extend.19
DEBUG:numba.core.ssa:on stmt: ret = call $36load_global.14(*$46list_to_tuple.20, func=$36load_global.14, args=[], kws=[], vararg=$46list_to_tuple.20, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $52load_global.22 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $const54.23 = const(int, 3)
DEBUG:numba.core.ssa:on stmt: $56call_function.24 = call $52load_global.22($const54.23, func=$52load_global.22, args=[Var($const54.23, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58get_iter.25 = getiter(value=$56call_function.24)
DEBUG:numba.core.ssa:on stmt: $phi60.0 = $58get_iter.25
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bb4c0>
DEBUG:numba.core.ssa:on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG:numba.core.ssa:on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi62.1 = $60for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $60for_iter.3, 62, 82
DEBUG:numba.core.ssa:==== SSA block analysis pass on 62
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bb4c0>
DEBUG:numba.core.ssa:on stmt: i0 = $phi62.1
DEBUG:numba.core.ssa:on stmt: $68build_tuple.4 = build_tuple(items=[Var(i0, <string>:6)])
DEBUG:numba.core.ssa:on stmt: $70binary_subscr.5 = getitem(value=ret, index=$68build_tuple.4, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $76build_tuple.8 = build_tuple(items=[Var(i0, <string>:6)])
DEBUG:numba.core.ssa:on stmt: out[$76build_tuple.8] = $70binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f075e3bb4c0>
DEBUG:numba.core.ssa:on stmt: $const82.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $84return_value.1 = cast(value=$const82.0)
DEBUG:numba.core.ssa:on stmt: return $84return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.4': [(<numba.core.ir.Assign object at 0x7f075e3874c0>,
                                   0)],
             '$12load_attr.5': [(<numba.core.ir.Assign object at 0x7f075e387940>,
                                 0)],
             '$18load_global.7': [(<numba.core.ir.Assign object at 0x7f075e387d00>,
                                   0)],
             '$24load_global.10': [(<numba.core.ir.Assign object at 0x7f075c1e24c0>,
                                    0)],
             '$26load_attr.11': [(<numba.core.ir.Assign object at 0x7f075c1e2a60>,
                                  0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7f075e3878b0>,
                                  0)],
             '$36load_global.14': [(<numba.core.ir.Assign object at 0x7f075c1e2ca0>,
                                    0)],
             '$40build_list.16': [(<numba.core.ir.Assign object at 0x7f0761e93730>,
                                   0)],
             '$44list_extend.18_var_params': [(<numba.core.ir.Assign object at 0x7f0761e93910>,
                                               0)],
             '$44list_extend.19': [(<numba.core.ir.Assign object at 0x7f0761e933a0>,
                                    0)],
             '$46list_to_tuple.20': [(<numba.core.ir.Assign object at 0x7f0761e93f10>,
                                      0)],
             '$52load_global.22': [(<numba.core.ir.Assign object at 0x7f075e3bd190>,
                                    0)],
             '$56call_function.24': [(<numba.core.ir.Assign object at 0x7f0761fdd0d0>,
                                      0)],
             '$58get_iter.25': [(<numba.core.ir.Assign object at 0x7f0761ece310>,
                                 0)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x7f0761fdd3a0>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x7f0761ecedf0>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x7f0761ece8e0>,
                                60)],
             '$68build_tuple.4': [(<numba.core.ir.Assign object at 0x7f0761ecec10>,
                                   62)],
             '$70binary_subscr.5': [(<numba.core.ir.Assign object at 0x7f0762089130>,
                                     62)],
             '$76build_tuple.8': [(<numba.core.ir.Assign object at 0x7f0762089280>,
                                   62)],
             '$84return_value.1': [(<numba.core.ir.Assign object at 0x7f0762089c40>,
                                    82)],
             '$8build_tuple.3': [(<numba.core.ir.Assign object at 0x7f075e387bb0>,
                                  0)],
             '$_list_extend_gv_tuple': [(<numba.core.ir.Assign object at 0x7f0761e93760>,
                                         0)],
             '$const22.9': [(<numba.core.ir.Assign object at 0x7f075c1e2070>,
                             0)],
             '$const54.23': [(<numba.core.ir.Assign object at 0x7f0761fdd2b0>,
                              0)],
             '$const82.0': [(<numba.core.ir.Assign object at 0x7f0762089940>,
                             82)],
             '$const_3': [(<numba.core.ir.Assign object at 0x7f075c1e2c10>, 0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x7f075e387430>, 0)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x7f075e3bb8e0>,
                           60)],
             'data': [(<numba.core.ir.Assign object at 0x7f075e387520>, 0)],
             'i0': [(<numba.core.ir.Assign object at 0x7f0761eceb20>, 62)],
             'out': [(<numba.core.ir.Assign object at 0x7f075c1e2d90>, 0)],
             'out_': [(<numba.core.ir.Assign object at 0x7f075e3874f0>, 0)],
             'params': [(<numba.core.ir.Assign object at 0x7f075c1e2250>, 0)],
             'ptx': [(<numba.core.ir.Assign object at 0x7f0762188670>, 0)],
             'ptx.1': [(<numba.core.ir.Assign object at 0x7f075e3875e0>, 0)],
             'ret': [(<numba.core.ir.Assign object at 0x7f0762188f10>, 0)],
             'sdim': [(<numba.core.ir.Assign object at 0x7f0762097760>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f075e3bb4c0>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=174)
           2	LOAD_FAST(arg=0, lineno=176)
           4	LOAD_CONST(arg=1, lineno=176)
           6	BINARY_SUBSCR(arg=None, lineno=176)
           8	LOAD_DEREF(arg=2, lineno=176)
          10	COMPARE_OP(arg=4, lineno=176)
          12	POP_JUMP_IF_FALSE(arg=66, lineno=176)
          14	LOAD_FAST(arg=0, lineno=176)
          16	LOAD_CONST(arg=1, lineno=176)
          18	BINARY_SUBSCR(arg=None, lineno=176)
          20	LOAD_DEREF(arg=1, lineno=176)
          22	COMPARE_OP(arg=0, lineno=176)
          24	POP_JUMP_IF_FALSE(arg=66, lineno=176)
          26	LOAD_FAST(arg=0, lineno=176)
          28	LOAD_CONST(arg=2, lineno=176)
          30	BINARY_SUBSCR(arg=None, lineno=176)
          32	LOAD_DEREF(arg=3, lineno=176)
          34	COMPARE_OP(arg=4, lineno=176)
          36	POP_JUMP_IF_FALSE(arg=66, lineno=176)
          38	LOAD_GLOBAL(arg=0, lineno=177)
          40	LOAD_METHOD(arg=1, lineno=177)
          42	LOAD_DEREF(arg=0, lineno=177)
          44	LOAD_CONST(arg=1, lineno=177)
          46	BINARY_SUBSCR(arg=None, lineno=177)
          48	LOAD_DEREF(arg=0, lineno=177)
          50	LOAD_CONST(arg=3, lineno=177)
          52	BINARY_SUBSCR(arg=None, lineno=177)
          54	LOAD_DEREF(arg=0, lineno=177)
          56	LOAD_CONST(arg=2, lineno=177)
          58	BINARY_SUBSCR(arg=None, lineno=177)
          60	BUILD_TUPLE(arg=3, lineno=177)
          62	CALL_METHOD(arg=1, lineno=177)
          64	RETURN_VALUE(arg=None, lineno=177)
>         66	LOAD_GLOBAL(arg=0, lineno=179)
          68	LOAD_METHOD(arg=1, lineno=179)
          70	LOAD_CONST(arg=4, lineno=179)
          72	CALL_METHOD(arg=1, lineno=179)
          74	RETURN_VALUE(arg=None, lineno=179)
          76	LOAD_CONST(arg=0, lineno=179)
          78	RETURN_VALUE(arg=None, lineno=179)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=174)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=176)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_DEREF(arg=2, lineno=176)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=COMPARE_OP(arg=4, lineno=176)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2', '$8load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=POP_JUMP_IF_FALSE(arg=66, lineno=176)
DEBUG:numba.core.byteflow:stack ['$10compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=14 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=176)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx14.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx14.0', '$const16.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_DEREF(arg=1, lineno=176)
DEBUG:numba.core.byteflow:stack ['$18binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=176)
DEBUG:numba.core.byteflow:stack ['$18binary_subscr.2', '$20load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=66, lineno=176)
DEBUG:numba.core.byteflow:stack ['$22compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=66 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_GLOBAL(arg=0, lineno=179)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_METHOD(arg=1, lineno=179)
DEBUG:numba.core.byteflow:stack ['$66load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=179)
DEBUG:numba.core.byteflow:stack ['$68load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=CALL_METHOD(arg=1, lineno=179)
DEBUG:numba.core.byteflow:stack ['$68load_method.1', '$const70.2']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=179)
DEBUG:numba.core.byteflow:stack ['$72call_method.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=26 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=176)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx26.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG:numba.core.byteflow:stack ['$ptx26.0', '$const28.1']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_DEREF(arg=3, lineno=176)
DEBUG:numba.core.byteflow:stack ['$30binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=COMPARE_OP(arg=4, lineno=176)
DEBUG:numba.core.byteflow:stack ['$30binary_subscr.2', '$32load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=POP_JUMP_IF_FALSE(arg=66, lineno=176)
DEBUG:numba.core.byteflow:stack ['$34compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=38 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=38 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_GLOBAL(arg=0, lineno=177)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_METHOD(arg=1, lineno=177)
DEBUG:numba.core.byteflow:stack ['$38load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_DEREF(arg=0, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$42load_deref.2']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$42load_deref.2', '$const44.3']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$48load_deref.5']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=BINARY_SUBSCR(arg=None, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$48load_deref.5', '$const50.6']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_DEREF(arg=0, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$52binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$52binary_subscr.7', '$54load_deref.8']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$52binary_subscr.7', '$54load_deref.8', '$const56.9']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BUILD_TUPLE(arg=3, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$46binary_subscr.4', '$52binary_subscr.7', '$58binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=CALL_METHOD(arg=1, lineno=177)
DEBUG:numba.core.byteflow:stack ['$40load_method.1', '$60build_tuple.11']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=177)
DEBUG:numba.core.byteflow:stack ['$62call_method.12']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ptx2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$ptx2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$8load_deref.3'}), (10, {'lhs': '$6binary_subscr.2', 'rhs': '$8load_deref.3', 'res': '$10compare_op.4'}), (12, {'pred': '$10compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: (), 66: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$ptx14.0'}), (16, {'res': '$const16.1'}), (18, {'index': '$const16.1', 'target': '$ptx14.0', 'res': '$18binary_subscr.2'}), (20, {'res': '$20load_deref.3'}), (22, {'lhs': '$18binary_subscr.2', 'rhs': '$20load_deref.3', 'res': '$22compare_op.4'}), (24, {'pred': '$22compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 66: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$ptx26.0'}), (28, {'res': '$const28.1'}), (30, {'index': '$const28.1', 'target': '$ptx26.0', 'res': '$30binary_subscr.2'}), (32, {'res': '$32load_deref.3'}), (34, {'lhs': '$30binary_subscr.2', 'rhs': '$32load_deref.3', 'res': '$34compare_op.4'}), (36, {'pred': '$34compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 66: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$38load_global.0'}), (40, {'item': '$38load_global.0', 'res': '$40load_method.1'}), (42, {'res': '$42load_deref.2'}), (44, {'res': '$const44.3'}), (46, {'index': '$const44.3', 'target': '$42load_deref.2', 'res': '$46binary_subscr.4'}), (48, {'res': '$48load_deref.5'}), (50, {'res': '$const50.6'}), (52, {'index': '$const50.6', 'target': '$48load_deref.5', 'res': '$52binary_subscr.7'}), (54, {'res': '$54load_deref.8'}), (56, {'res': '$const56.9'}), (58, {'index': '$const56.9', 'target': '$54load_deref.8', 'res': '$58binary_subscr.10'}), (60, {'items': ['$46binary_subscr.4', '$52binary_subscr.7', '$58binary_subscr.10'], 'res': '$60build_tuple.11'}), (62, {'func': '$40load_method.1', 'args': ['$60build_tuple.11'], 'res': '$62call_method.12'}), (64, {'retval': '$62call_method.12', 'castval': '$64return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$66load_global.0'}), (68, {'item': '$66load_global.0', 'res': '$68load_method.1'}), (70, {'res': '$const70.2'}), (72, {'func': '$68load_method.1', 'args': ['$const70.2'], 'res': '$72call_method.3'}), (74, {'retval': '$72call_method.3', 'castval': '$74return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptx = arg(0, name=ptx)                   ['ptx']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=ptx, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'ptx']
    $8load_deref.3 = freevar(xmin: 1.9)      ['$8load_deref.3']
    $10compare_op.4 = $6binary_subscr.2 > $8load_deref.3 ['$10compare_op.4', '$6binary_subscr.2', '$8load_deref.3']
    bool12 = global(bool: <class 'bool'>)    ['bool12']
    $12pred = call bool12($10compare_op.4, func=bool12, args=(Var($10compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None) ['$10compare_op.4', '$12pred', 'bool12']
    branch $12pred, 14, 66                   ['$12pred']
label 14:
    $const16.1 = const(int, 0)               ['$const16.1']
    $18binary_subscr.2 = getitem(value=ptx, index=$const16.1, fn=<built-in function getitem>) ['$18binary_subscr.2', '$const16.1', 'ptx']
    $20load_deref.3 = freevar(xmax: 2.0)     ['$20load_deref.3']
    $22compare_op.4 = $18binary_subscr.2 < $20load_deref.3 ['$18binary_subscr.2', '$20load_deref.3', '$22compare_op.4']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.4, func=bool24, args=(Var($22compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.4', '$24pred', 'bool24']
    branch $24pred, 26, 66                   ['$24pred']
label 26:
    $const28.1 = const(int, 2)               ['$const28.1']
    $30binary_subscr.2 = getitem(value=ptx, index=$const28.1, fn=<built-in function getitem>) ['$30binary_subscr.2', '$const28.1', 'ptx']
    $32load_deref.3 = freevar(zmin: 0.0)     ['$32load_deref.3']
    $34compare_op.4 = $30binary_subscr.2 > $32load_deref.3 ['$30binary_subscr.2', '$32load_deref.3', '$34compare_op.4']
    bool36 = global(bool: <class 'bool'>)    ['bool36']
    $36pred = call bool36($34compare_op.4, func=bool36, args=(Var($34compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None) ['$34compare_op.4', '$36pred', 'bool36']
    branch $36pred, 38, 66                   ['$36pred']
label 38:
    $38load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$38load_global.0']
    $40load_method.1 = getattr(value=$38load_global.0, attr=array) ['$38load_global.0', '$40load_method.1']
    $42load_deref.2 = freevar(force: [100.   0.   0.]) ['$42load_deref.2']
    $const44.3 = const(int, 0)               ['$const44.3']
    $46binary_subscr.4 = getitem(value=$42load_deref.2, index=$const44.3, fn=<built-in function getitem>) ['$42load_deref.2', '$46binary_subscr.4', '$const44.3']
    $48load_deref.5 = freevar(force: [100.   0.   0.]) ['$48load_deref.5']
    $const50.6 = const(int, 1)               ['$const50.6']
    $52binary_subscr.7 = getitem(value=$48load_deref.5, index=$const50.6, fn=<built-in function getitem>) ['$48load_deref.5', '$52binary_subscr.7', '$const50.6']
    $54load_deref.8 = freevar(force: [100.   0.   0.]) ['$54load_deref.8']
    $const56.9 = const(int, 2)               ['$const56.9']
    $58binary_subscr.10 = getitem(value=$54load_deref.8, index=$const56.9, fn=<built-in function getitem>) ['$54load_deref.8', '$58binary_subscr.10', '$const56.9']
    $60build_tuple.11 = build_tuple(items=[Var($46binary_subscr.4, MFEMLinearElasticity.py:177), Var($52binary_subscr.7, MFEMLinearElasticity.py:177), Var($58binary_subscr.10, MFEMLinearElasticity.py:177)]) ['$46binary_subscr.4', '$52binary_subscr.7', '$58binary_subscr.10', '$60build_tuple.11']
    $62call_method.12 = call $40load_method.1($60build_tuple.11, func=$40load_method.1, args=[Var($60build_tuple.11, MFEMLinearElasticity.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$40load_method.1', '$60build_tuple.11', '$62call_method.12']
    $64return_value.13 = cast(value=$62call_method.12) ['$62call_method.12', '$64return_value.13']
    return $64return_value.13                ['$64return_value.13']
label 66:
    $66load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$66load_global.0']
    $68load_method.1 = getattr(value=$66load_global.0, attr=array) ['$66load_global.0', '$68load_method.1']
    $const_0.0 = const(float, 0.0)           ['$const_0.0']
    $const_0.0.1 = const(float, 0.0)         ['$const_0.0.1']
    $const_0.0.2 = const(float, 0.0)         ['$const_0.0.2']
    $const70.2 = build_tuple(items=[Var($const_0.0, MFEMLinearElasticity.py:179), Var($const_0.0.1, MFEMLinearElasticity.py:179), Var($const_0.0.2, MFEMLinearElasticity.py:179)]) ['$const70.2', '$const_0.0', '$const_0.0.1', '$const_0.0.2']
    $72call_method.3 = call $68load_method.1($const70.2, func=$68load_method.1, args=[Var($const70.2, MFEMLinearElasticity.py:179)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_method.1', '$72call_method.3', '$const70.2']
    $74return_value.4 = cast(value=$72call_method.3) ['$72call_method.3', '$74return_value.4']
    return $74return_value.4                 ['$74return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f07304b0c10>
DEBUG:numba.core.ssa:on stmt: ptx = arg(0, name=ptx)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $6binary_subscr.2 = static_getitem(value=ptx, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $8load_deref.3 = freevar(xmin: 1.9)
DEBUG:numba.core.ssa:on stmt: $10compare_op.4 = $6binary_subscr.2 > $8load_deref.3
DEBUG:numba.core.ssa:on stmt: bool12 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $12pred = call bool12($10compare_op.4, func=bool12, args=(Var($10compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $12pred, 14, 66
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f07304b0c10>
DEBUG:numba.core.ssa:on stmt: $const16.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $18binary_subscr.2 = static_getitem(value=ptx, index=0, index_var=$const16.1, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20load_deref.3 = freevar(xmax: 2.0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.4 = $18binary_subscr.2 < $20load_deref.3
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.4, func=bool24, args=(Var($22compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 66
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f07304b0c10>
DEBUG:numba.core.ssa:on stmt: $const28.1 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $30binary_subscr.2 = static_getitem(value=ptx, index=2, index_var=$const28.1, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $32load_deref.3 = freevar(zmin: 0.0)
DEBUG:numba.core.ssa:on stmt: $34compare_op.4 = $30binary_subscr.2 > $32load_deref.3
DEBUG:numba.core.ssa:on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $36pred = call bool36($34compare_op.4, func=bool36, args=(Var($34compare_op.4, MFEMLinearElasticity.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $36pred, 38, 66
DEBUG:numba.core.ssa:==== SSA block analysis pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f07304b0c10>
DEBUG:numba.core.ssa:on stmt: $38load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $40load_method.1 = getattr(value=$38load_global.0, attr=array)
DEBUG:numba.core.ssa:on stmt: $42load_deref.2 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const44.3 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $46binary_subscr.4 = static_getitem(value=$42load_deref.2, index=0, index_var=$const44.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $48load_deref.5 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const50.6 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $52binary_subscr.7 = static_getitem(value=$48load_deref.5, index=1, index_var=$const50.6, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $54load_deref.8 = freevar(force: [100.   0.   0.])
DEBUG:numba.core.ssa:on stmt: $const56.9 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $58binary_subscr.10 = static_getitem(value=$54load_deref.8, index=2, index_var=$const56.9, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $60build_tuple.11 = build_tuple(items=[Var($46binary_subscr.4, MFEMLinearElasticity.py:177), Var($52binary_subscr.7, MFEMLinearElasticity.py:177), Var($58binary_subscr.10, MFEMLinearElasticity.py:177)])
DEBUG:numba.core.ssa:on stmt: $62call_method.12 = call $40load_method.1($60build_tuple.11, func=$40load_method.1, args=[Var($60build_tuple.11, MFEMLinearElasticity.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64return_value.13 = cast(value=$62call_method.12)
DEBUG:numba.core.ssa:on stmt: return $64return_value.13
DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f07304b0c10>
DEBUG:numba.core.ssa:on stmt: $66load_global.0 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $68load_method.1 = getattr(value=$66load_global.0, attr=array)
DEBUG:numba.core.ssa:on stmt: $const_0.0 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const_0.0.1 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const_0.0.2 = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $const70.2 = build_tuple(items=[Var($const_0.0, MFEMLinearElasticity.py:179), Var($const_0.0.1, MFEMLinearElasticity.py:179), Var($const_0.0.2, MFEMLinearElasticity.py:179)])
DEBUG:numba.core.ssa:on stmt: $72call_method.3 = call $68load_method.1($const70.2, func=$68load_method.1, args=[Var($const70.2, MFEMLinearElasticity.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $74return_value.4 = cast(value=$72call_method.3)
DEBUG:numba.core.ssa:on stmt: return $74return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [(<numba.core.ir.Assign object at 0x7f0761fdd790>,
                                  0)],
             '$12pred': [(<numba.core.ir.Assign object at 0x7f0761fdd8b0>, 0)],
             '$18binary_subscr.2': [(<numba.core.ir.Assign object at 0x7f07304b0b50>,
                                     14)],
             '$20load_deref.3': [(<numba.core.ir.Assign object at 0x7f0761ecec10>,
                                  14)],
             '$22compare_op.4': [(<numba.core.ir.Assign object at 0x7f0761eceeb0>,
                                  14)],
             '$24pred': [(<numba.core.ir.Assign object at 0x7f0761ece280>, 14)],
             '$30binary_subscr.2': [(<numba.core.ir.Assign object at 0x7f0761e9f880>,
                                     26)],
             '$32load_deref.3': [(<numba.core.ir.Assign object at 0x7f07305a31c0>,
                                  26)],
             '$34compare_op.4': [(<numba.core.ir.Assign object at 0x7f075c0e8e20>,
                                  26)],
             '$36pred': [(<numba.core.ir.Assign object at 0x7f0762089c40>, 26)],
             '$38load_global.0': [(<numba.core.ir.Assign object at 0x7f07620892e0>,
                                   38)],
             '$40load_method.1': [(<numba.core.ir.Assign object at 0x7f075c1d7d30>,
                                   38)],
             '$42load_deref.2': [(<numba.core.ir.Assign object at 0x7f075c1d7e20>,
                                  38)],
             '$46binary_subscr.4': [(<numba.core.ir.Assign object at 0x7f0761e9ff10>,
                                     38)],
             '$48load_deref.5': [(<numba.core.ir.Assign object at 0x7f075c1d79a0>,
                                  38)],
             '$52binary_subscr.7': [(<numba.core.ir.Assign object at 0x7f0761e9fb50>,
                                     38)],
             '$54load_deref.8': [(<numba.core.ir.Assign object at 0x7f07304b06a0>,
                                  38)],
             '$58binary_subscr.10': [(<numba.core.ir.Assign object at 0x7f0761e9f670>,
                                      38)],
             '$60build_tuple.11': [(<numba.core.ir.Assign object at 0x7f075e387e80>,
                                    38)],
             '$62call_method.12': [(<numba.core.ir.Assign object at 0x7f075c1d7880>,
                                    38)],
             '$64return_value.13': [(<numba.core.ir.Assign object at 0x7f075c1d7fa0>,
                                     38)],
             '$66load_global.0': [(<numba.core.ir.Assign object at 0x7f075c1d7ac0>,
                                   66)],
             '$68load_method.1': [(<numba.core.ir.Assign object at 0x7f075c1d7b50>,
                                   66)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7f07304b09d0>,
                                    0)],
             '$72call_method.3': [(<numba.core.ir.Assign object at 0x7f073049c8b0>,
                                   66)],
             '$74return_value.4': [(<numba.core.ir.Assign object at 0x7f07620351f0>,
                                    66)],
             '$8load_deref.3': [(<numba.core.ir.Assign object at 0x7f075c1e2fa0>,
                                 0)],
             '$const16.1': [(<numba.core.ir.Assign object at 0x7f0761fdd670>,
                             14)],
             '$const28.1': [(<numba.core.ir.Assign object at 0x7f07305a32b0>,
                             26)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7f075c1e2160>,
                            0)],
             '$const44.3': [(<numba.core.ir.Assign object at 0x7f075c1d7cd0>,
                             38)],
             '$const50.6': [(<numba.core.ir.Assign object at 0x7f0761ff55b0>,
                             38)],
             '$const56.9': [(<numba.core.ir.Assign object at 0x7f07304b0850>,
                             38)],
             '$const70.2': [(<numba.core.ir.Assign object at 0x7f0761e934c0>,
                             66)],
             '$const_0.0': [(<numba.core.ir.Assign object at 0x7f075c1d72b0>,
                             66)],
             '$const_0.0.1': [(<numba.core.ir.Assign object at 0x7f0762188310>,
                               66)],
             '$const_0.0.2': [(<numba.core.ir.Assign object at 0x7f0761e93730>,
                               66)],
             'bool12': [(<numba.core.ir.Assign object at 0x7f0761fdd730>, 0)],
             'bool24': [(<numba.core.ir.Assign object at 0x7f0761ece310>, 14)],
             'bool36': [(<numba.core.ir.Assign object at 0x7f0762101e20>, 26)],
             'ptx': [(<numba.core.ir.Assign object at 0x7f0761ff5f40>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f07304b0c10>
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_FAST(arg=1, lineno=2)
           8	BUILD_TUPLE(arg=1, lineno=2)
          10	LOAD_GLOBAL(arg=1, lineno=2)
          12	LOAD_ATTR(arg=2, lineno=2)
          14	CALL_FUNCTION(arg=3, lineno=2)
          16	STORE_FAST(arg=0, lineno=2)
          18	LOAD_GLOBAL(arg=0, lineno=3)
          20	LOAD_FAST(arg=3, lineno=3)
          22	LOAD_CONST(arg=1, lineno=3)
          24	LOAD_GLOBAL(arg=1, lineno=3)
          26	LOAD_ATTR(arg=2, lineno=3)
          28	CALL_FUNCTION(arg=3, lineno=3)
          30	STORE_FAST(arg=4, lineno=3)
          32	LOAD_CONST(arg=2, lineno=4)
          34	STORE_FAST(arg=5, lineno=4)
          36	LOAD_GLOBAL(arg=3, lineno=5)
          38	LOAD_FAST(arg=0, lineno=5)
          40	BUILD_LIST(arg=1, lineno=5)
          42	LOAD_FAST(arg=5, lineno=5)
          44	LIST_EXTEND(arg=1, lineno=5)
          46	LIST_TO_TUPLE(arg=None, lineno=5)
          48	CALL_FUNCTION_EX(arg=0, lineno=5)
          50	STORE_FAST(arg=6, lineno=5)
          52	LOAD_GLOBAL(arg=4, lineno=6)
          54	LOAD_CONST(arg=3, lineno=6)
          56	CALL_FUNCTION(arg=1, lineno=6)
          58	GET_ITER(arg=None, lineno=6)
>         60	FOR_ITER(arg=20, lineno=6)
          62	STORE_FAST(arg=7, lineno=6)
          64	LOAD_FAST(arg=6, lineno=7)
          66	LOAD_FAST(arg=7, lineno=7)
          68	BUILD_TUPLE(arg=1, lineno=7)
          70	BINARY_SUBSCR(arg=None, lineno=7)
          72	LOAD_FAST(arg=4, lineno=7)
          74	LOAD_FAST(arg=7, lineno=7)
          76	BUILD_TUPLE(arg=1, lineno=7)
          78	STORE_SUBSCR(arg=None, lineno=7)
          80	JUMP_ABSOLUTE(arg=60, lineno=7)
>         82	LOAD_CONST(arg=0, lineno=7)
          84	RETURN_VALUE(arg=None, lineno=7)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=BUILD_TUPLE(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$sdim6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3', '$10load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=3, lineno=2)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$ptx4.1', '$8build_tuple.3', '$12load_attr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=0, lineno=2)
DEBUG:numba.core.byteflow:stack ['$14call_function.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_ATTR(arg=2, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9', '$24load_global.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG:numba.core.byteflow:stack ['$18load_global.7', '$out_20.8', '$const22.9', '$26load_attr.11']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=4, lineno=3)
DEBUG:numba.core.byteflow:stack ['$28call_function.12']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=5, lineno=4)
DEBUG:numba.core.byteflow:stack ['$const32.13']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_GLOBAL(arg=3, lineno=5)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BUILD_LIST(arg=1, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$ptx38.15']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=5, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LIST_EXTEND(arg=1, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16', '$params42.17']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LIST_TO_TUPLE(arg=None, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$40build_list.16']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=CALL_FUNCTION_EX(arg=0, lineno=5)
DEBUG:numba.core.byteflow:stack ['$36load_global.14', '$46list_to_tuple.20']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=6, lineno=5)
DEBUG:numba.core.byteflow:stack ['$48call_function_ex.21']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_GLOBAL(arg=4, lineno=6)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=6)
DEBUG:numba.core.byteflow:stack ['$52load_global.22']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=6)
DEBUG:numba.core.byteflow:stack ['$52load_global.22', '$const54.23']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=GET_ITER(arg=None, lineno=6)
DEBUG:numba.core.byteflow:stack ['$56call_function.24']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi60.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=60 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=60, inst=FOR_ITER(arg=20, lineno=6)
DEBUG:numba.core.byteflow:stack ['$phi60.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=82 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_CONST(arg=0, lineno=7)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$const82.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=62 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=62, inst=STORE_FAST(arg=7, lineno=6)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=6, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=7, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=1, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2', '$i066.3']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$ret64.2', '$68build_tuple.4']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=7, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=BUILD_TUPLE(arg=1, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6', '$i074.7']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=STORE_SUBSCR(arg=None, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$70binary_subscr.5', '$out72.6', '$76build_tuple.8']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=JUMP_ABSOLUTE(arg=60, lineno=7)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=82 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$ptx4.1'}), (6, {'res': '$sdim6.2'}), (8, {'items': ['$sdim6.2'], 'res': '$8build_tuple.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$2load_global.0', 'args': ['$ptx4.1', '$8build_tuple.3', '$12load_attr.5'], 'res': '$14call_function.6'}), (16, {'value': '$14call_function.6'}), (18, {'res': '$18load_global.7'}), (20, {'res': '$out_20.8'}), (22, {'res': '$const22.9'}), (24, {'res': '$24load_global.10'}), (26, {'item': '$24load_global.10', 'res': '$26load_attr.11'}), (28, {'func': '$18load_global.7', 'args': ['$out_20.8', '$const22.9', '$26load_attr.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12'}), (32, {'res': '$const32.13'}), (34, {'value': '$const32.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$ptx38.15'}), (40, {'items': ['$ptx38.15'], 'res': '$40build_list.16'}), (42, {'res': '$params42.17'}), (44, {'target': '$40build_list.16', 'value': '$params42.17', 'extendvar': '$44list_extend.18', 'res': '$44list_extend.19'}), (46, {'const_list': '$40build_list.16', 'res': '$46list_to_tuple.20'}), (48, {'func': '$36load_global.14', 'vararg': '$46list_to_tuple.20', 'varkwarg': None, 'res': '$48call_function_ex.21'}), (50, {'value': '$48call_function_ex.21'}), (52, {'res': '$52load_global.22'}), (54, {'res': '$const54.23'}), (56, {'func': '$52load_global.22', 'args': ['$const54.23'], 'res': '$56call_function.24'}), (58, {'value': '$56call_function.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$ret64.2'}), (66, {'res': '$i066.3'}), (68, {'items': ['$i066.3'], 'res': '$68build_tuple.4'}), (70, {'index': '$68build_tuple.4', 'target': '$ret64.2', 'res': '$70binary_subscr.5'}), (72, {'res': '$out72.6'}), (74, {'res': '$i074.7'}), (76, {'items': ['$i074.7'], 'res': '$76build_tuple.8'}), (78, {'target': '$out72.6', 'index': '$76build_tuple.8', 'value': '$70binary_subscr.5'}), (80, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$const82.0'}), (84, {'retval': '$const82.0', 'castval': '$84return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ptx = arg(0, name=ptx)                   ['ptx']
    sdim = arg(1, name=sdim)                 ['sdim']
    data = arg(2, name=data)                 ['data']
    out_ = arg(3, name=out_)                 ['out_']
    $2load_global.0 = global(farray: <function farray at 0x7f077493f0d0>) ['$2load_global.0']
    $8build_tuple.3 = build_tuple(items=[Var(sdim, <string>:1)]) ['$8build_tuple.3', 'sdim']
    $10load_global.4 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=float64) ['$10load_global.4', '$12load_attr.5']
    ptx.1 = call $2load_global.0(ptx, $8build_tuple.3, $12load_attr.5, func=$2load_global.0, args=[Var(ptx, <string>:1), Var($8build_tuple.3, <string>:2), Var($12load_attr.5, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_attr.5', '$2load_global.0', '$8build_tuple.3', 'ptx', 'ptx.1']
    $18load_global.7 = global(farray: <function farray at 0x7f077493f0d0>) ['$18load_global.7']
    $const_3 = const(int, 3)                 ['$const_3']
    $const22.9 = build_tuple(items=[Var($const_3, <string>:3)]) ['$const22.9', '$const_3']
    $24load_global.10 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>) ['$24load_global.10']
    $26load_attr.11 = getattr(value=$24load_global.10, attr=float64) ['$24load_global.10', '$26load_attr.11']
    out = call $18load_global.7(out_, $const22.9, $26load_attr.11, func=$18load_global.7, args=[Var(out_, <string>:1), Var($const22.9, <string>:3), Var($26load_attr.11, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_global.7', '$26load_attr.11', '$const22.9', 'out', 'out_']
    params = build_tuple(items=[])           ['params']
    $36load_global.14 = global(inner_func: CPUDispatcher(<function SurfaceForceCoefficient3D.<locals>.coeff at 0x7f0730474700>)) ['$36load_global.14']
    $40build_list.16 = build_list(items=[Var(ptx.1, <string>:2)]) ['$40build_list.16', 'ptx.1']
    $44list_extend.18 = getattr(value=$40build_list.16, attr=extend) ['$40build_list.16', '$44list_extend.18']
    $44list_extend.19 = call $44list_extend.18(params, func=$44list_extend.18, args=(Var(params, <string>:4),), kws=(), vararg=None, varkwarg=None, target=None) ['$44list_extend.18', '$44list_extend.19', 'params']
    $46list_to_tuple.20 = list_to_tuple(info=('$40build_list.16',)) ['$46list_to_tuple.20']
    ret = call $36load_global.14(*$46list_to_tuple.20, func=$36load_global.14, args=[], kws=[], vararg=$46list_to_tuple.20, varkwarg=None, target=None) ['$36load_global.14', '$46list_to_tuple.20', 'ret']
    $52load_global.22 = global(range: <class 'range'>) ['$52load_global.22']
    $const54.23 = const(int, 3)              ['$const54.23']
    $56call_function.24 = call $52load_global.22($const54.23, func=$52load_global.22, args=[Var($const54.23, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_global.22', '$56call_function.24', '$const54.23']
    $58get_iter.25 = getiter(value=$56call_function.24) ['$56call_function.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 82             ['$60for_iter.3']
label 62:
    i0 = $phi62.1                            ['$phi62.1', 'i0']
    $68build_tuple.4 = build_tuple(items=[Var(i0, <string>:6)]) ['$68build_tuple.4', 'i0']
    $70binary_subscr.5 = getitem(value=ret, index=$68build_tuple.4, fn=<built-in function getitem>) ['$68build_tuple.4', '$70binary_subscr.5', 'ret']
    $76build_tuple.8 = build_tuple(items=[Var(i0, <string>:6)]) ['$76build_tuple.8', 'i0']
    out[$76build_tuple.8] = $70binary_subscr.5 ['$70binary_subscr.5', '$76build_tuple.8', 'out']
    jump 60                                  []
label 82:
    $const82.0 = const(NoneType, None)       ['$const82.0']
    $84return_value.1 = cast(value=$const82.0) ['$84return_value.1', '$const82.0']
    return $84return_value.1                 ['$84return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761fddfd0>
DEBUG:numba.core.ssa:on stmt: ptx = arg(0, name=ptx)
DEBUG:numba.core.ssa:on stmt: sdim = arg(1, name=sdim)
DEBUG:numba.core.ssa:on stmt: data = arg(2, name=data)
DEBUG:numba.core.ssa:on stmt: out_ = arg(3, name=out_)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(farray: <function farray at 0x7f077493f0d0>)
DEBUG:numba.core.ssa:on stmt: $8build_tuple.3 = build_tuple(items=[Var(sdim, <string>:1)])
DEBUG:numba.core.ssa:on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=float64)
DEBUG:numba.core.ssa:on stmt: ptx.1 = call $2load_global.0(ptx, $8build_tuple.3, $12load_attr.5, func=$2load_global.0, args=[Var(ptx, <string>:1), Var($8build_tuple.3, <string>:2), Var($12load_attr.5, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $18load_global.7 = global(farray: <function farray at 0x7f077493f0d0>)
DEBUG:numba.core.ssa:on stmt: $const_3 = const(int, 3)
DEBUG:numba.core.ssa:on stmt: $const22.9 = build_tuple(items=[Var($const_3, <string>:3)])
DEBUG:numba.core.ssa:on stmt: $24load_global.10 = global(np: <module 'numpy' from '/home/michael.kofler/miniforge3/envs/pytorch/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_attr.11 = getattr(value=$24load_global.10, attr=float64)
DEBUG:numba.core.ssa:on stmt: out = call $18load_global.7(out_, $const22.9, $26load_attr.11, func=$18load_global.7, args=[Var(out_, <string>:1), Var($const22.9, <string>:3), Var($26load_attr.11, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: params = build_tuple(items=[])
DEBUG:numba.core.ssa:on stmt: $36load_global.14 = global(inner_func: CPUDispatcher(<function SurfaceForceCoefficient3D.<locals>.coeff at 0x7f0730474700>))
DEBUG:numba.core.ssa:on stmt: $40build_list.16 = build_tuple(items=[Var(ptx.1, <string>:2)])
DEBUG:numba.core.ssa:on stmt: $_list_extend_gv_tuple = global(tuple: <class 'tuple'>)
DEBUG:numba.core.ssa:on stmt: $44list_extend.18_var_params = call $_list_extend_gv_tuple(params, func=$_list_extend_gv_tuple, args=(Var(params, <string>:4),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $44list_extend.19 = $40build_list.16 + $44list_extend.18_var_params
DEBUG:numba.core.ssa:on stmt: $46list_to_tuple.20 = $44list_extend.19
DEBUG:numba.core.ssa:on stmt: ret = call $36load_global.14(*$46list_to_tuple.20, func=$36load_global.14, args=[], kws=[], vararg=$46list_to_tuple.20, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $52load_global.22 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $const54.23 = const(int, 3)
DEBUG:numba.core.ssa:on stmt: $56call_function.24 = call $52load_global.22($const54.23, func=$52load_global.22, args=[Var($const54.23, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58get_iter.25 = getiter(value=$56call_function.24)
DEBUG:numba.core.ssa:on stmt: $phi60.0 = $58get_iter.25
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761fddfd0>
DEBUG:numba.core.ssa:on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG:numba.core.ssa:on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi62.1 = $60for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $60for_iter.3, 62, 82
DEBUG:numba.core.ssa:==== SSA block analysis pass on 62
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761fddfd0>
DEBUG:numba.core.ssa:on stmt: i0 = $phi62.1
DEBUG:numba.core.ssa:on stmt: $68build_tuple.4 = build_tuple(items=[Var(i0, <string>:6)])
DEBUG:numba.core.ssa:on stmt: $70binary_subscr.5 = getitem(value=ret, index=$68build_tuple.4, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $76build_tuple.8 = build_tuple(items=[Var(i0, <string>:6)])
DEBUG:numba.core.ssa:on stmt: out[$76build_tuple.8] = $70binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f0761fddfd0>
DEBUG:numba.core.ssa:on stmt: $const82.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $84return_value.1 = cast(value=$const82.0)
DEBUG:numba.core.ssa:on stmt: return $84return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.4': [(<numba.core.ir.Assign object at 0x7f075c1165e0>,
                                   0)],
             '$12load_attr.5': [(<numba.core.ir.Assign object at 0x7f0761fefbe0>,
                                 0)],
             '$18load_global.7': [(<numba.core.ir.Assign object at 0x7f0761fef7f0>,
                                   0)],
             '$24load_global.10': [(<numba.core.ir.Assign object at 0x7f0761fef760>,
                                    0)],
             '$26load_attr.11': [(<numba.core.ir.Assign object at 0x7f0761fefe20>,
                                  0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7f0762097a00>,
                                  0)],
             '$36load_global.14': [(<numba.core.ir.Assign object at 0x7f075c10cee0>,
                                    0)],
             '$40build_list.16': [(<numba.core.ir.Assign object at 0x7f075c0a6f70>,
                                   0)],
             '$44list_extend.18_var_params': [(<numba.core.ir.Assign object at 0x7f075c0a60d0>,
                                               0)],
             '$44list_extend.19': [(<numba.core.ir.Assign object at 0x7f075c0a6b50>,
                                    0)],
             '$46list_to_tuple.20': [(<numba.core.ir.Assign object at 0x7f075c0a6760>,
                                      0)],
             '$52load_global.22': [(<numba.core.ir.Assign object at 0x7f07303c81f0>,
                                    0)],
             '$56call_function.24': [(<numba.core.ir.Assign object at 0x7f07303c8a30>,
                                      0)],
             '$58get_iter.25': [(<numba.core.ir.Assign object at 0x7f07303c8f40>,
                                 0)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x7f07303c8550>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x7f07303c84f0>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x7f07303c8dc0>,
                                60)],
             '$68build_tuple.4': [(<numba.core.ir.Assign object at 0x7f07305271c0>,
                                   62)],
             '$70binary_subscr.5': [(<numba.core.ir.Assign object at 0x7f0730527520>,
                                     62)],
             '$76build_tuple.8': [(<numba.core.ir.Assign object at 0x7f075c0a6040>,
                                   62)],
             '$84return_value.1': [(<numba.core.ir.Assign object at 0x7f075c0a6940>,
                                    82)],
             '$8build_tuple.3': [(<numba.core.ir.Assign object at 0x7f075c116f70>,
                                  0)],
             '$_list_extend_gv_tuple': [(<numba.core.ir.Assign object at 0x7f075c0a6370>,
                                         0)],
             '$const22.9': [(<numba.core.ir.Assign object at 0x7f0761fef190>,
                             0)],
             '$const54.23': [(<numba.core.ir.Assign object at 0x7f07303c8670>,
                              0)],
             '$const82.0': [(<numba.core.ir.Assign object at 0x7f075c0a6460>,
                             82)],
             '$const_3': [(<numba.core.ir.Assign object at 0x7f0761fef940>, 0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x7f0762097a60>, 0)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x7f07621a7190>,
                           60)],
             'data': [(<numba.core.ir.Assign object at 0x7f075c0fd430>, 0)],
             'i0': [(<numba.core.ir.Assign object at 0x7f0730527ca0>, 62)],
             'out': [(<numba.core.ir.Assign object at 0x7f0761fef4c0>, 0)],
             'out_': [(<numba.core.ir.Assign object at 0x7f075c0fd610>, 0)],
             'params': [(<numba.core.ir.Assign object at 0x7f075c10ce20>, 0)],
             'ptx': [(<numba.core.ir.Assign object at 0x7f07621a71c0>, 0)],
             'ptx.1': [(<numba.core.ir.Assign object at 0x7f0761fef2b0>, 0)],
             'ret': [(<numba.core.ir.Assign object at 0x7f07303c89a0>, 0)],
             'sdim': [(<numba.core.ir.Assign object at 0x7f0761f4ad90>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x7f0761fddfd0>
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Volumes> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning const_vertices
DEBUG:gustaf:<Faces> returning const_elements
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning const_vertices
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning faces
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning show_options
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:gustaf:<Faces> returning vertex_data
DEBUG:gustaf:<Faces> returning vertices
DEBUG:optimization.opti:Vol: 0.37491, dVol: [ 0.00509581  0.02523737  0.00166257  0.02420181  0.00096787  0.03751678
  0.00109012  0.02358594  0.00142713  0.01924147  0.01111883  0.0650421
 -0.0003627   0.06026381 -0.00277438  0.09553704 -0.00221612  0.05880821
  0.00133378  0.05090015  0.00234544  0.02535844 -0.00148577  0.02261873
 -0.00170123  0.03877555 -0.00281193  0.0220746  -0.00249465  0.02038027
  0.00138567  0.03411622 -0.03066643  0.03151659  0.00819581  0.05746129
 -0.03049955  0.02805175 -0.00818725  0.01153037 -0.01457565  0.09597181
 -0.11147676  0.10093058  0.00569945  0.14408698 -0.10982569  0.09169039
 -0.03957055  0.03915706 -0.00721536  0.037853   -0.05399586  0.04533219
  0.00066268  0.06057258 -0.05573466  0.04308028 -0.01960647  0.01665257
 -0.00732589  0.02366343 -0.00071089  0.02908842  0.0033278   0.03190511
  0.00108505  0.02728203 -0.00781917  0.01622699 -0.03008008  0.07005468
 -0.02646539  0.08331672  0.00133214  0.08050158 -0.02357304  0.07886029
 -0.03237051  0.05180141 -0.01322729  0.02563548 -0.01389163  0.03452706
  0.00072907  0.03747024 -0.01515402  0.03391896 -0.01806264  0.02048715]
